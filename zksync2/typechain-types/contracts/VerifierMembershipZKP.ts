/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export type BigNumberStruct = {
  val: BytesLike;
  neg: boolean;
  bitlen: BigNumberish;
};

export type BigNumberStructOutput = [string, boolean, BigNumber] & {
  val: string;
  neg: boolean;
  bitlen: BigNumber;
};

export interface VerifierMembershipZKPInterface extends utils.Interface {
  functions: {
    "BN(bytes[])": FunctionFragment;
    "add1(uint256,uint256)": FunctionFragment;
    "add2(bytes,bytes)": FunctionFragment;
    "checkEvery(bytes[][],bool[],(bytes,bool,uint256)[],bytes[],(bytes,bool,uint256))": FunctionFragment;
    "verifyInvMod(bytes,bytes,bytes)": FunctionFragment;
    "verifyMembershipZKP(bytes,bytes[][],bool[],bytes[],bytes[],bytes[],bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BN"
      | "add1"
      | "add2"
      | "checkEvery"
      | "verifyInvMod"
      | "verifyMembershipZKP"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BN", values: [BytesLike[]]): string;
  encodeFunctionData(
    functionFragment: "add1",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "add2",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkEvery",
    values: [
      BytesLike[][],
      boolean[],
      BigNumberStruct[],
      BytesLike[],
      BigNumberStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyInvMod",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMembershipZKP",
    values: [
      BytesLike,
      BytesLike[][],
      boolean[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "BN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkEvery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyInvMod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMembershipZKP",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VerifierMembershipZKP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VerifierMembershipZKPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BN(
      _values: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumberStructOutput[]] & { _bg: BigNumberStructOutput[] }>;

    add1(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    add2(
      _a: BytesLike,
      _b: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumberStructOutput] & { result: BigNumberStructOutput }>;

    checkEvery(
      _proof: BytesLike[][],
      _isProof0Negativ: boolean[],
      _as: BigNumberStruct[],
      _ias: BytesLike[],
      _pub: BigNumberStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyInvMod(
      _gmk: BytesLike,
      _N: BytesLike,
      _r: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { verify: boolean }>;

    verifyMembershipZKP(
      _ciphertext: BytesLike,
      _proof: BytesLike[][],
      _isProof0Negativ: boolean[],
      _as: BytesLike[],
      _ias: BytesLike[],
      _gmk: BytesLike[],
      _e: BytesLike,
      _pubKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  BN(
    _values: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumberStructOutput[]>;

  add1(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  add2(
    _a: BytesLike,
    _b: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumberStructOutput>;

  checkEvery(
    _proof: BytesLike[][],
    _isProof0Negativ: boolean[],
    _as: BigNumberStruct[],
    _ias: BytesLike[],
    _pub: BigNumberStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyInvMod(
    _gmk: BytesLike,
    _N: BytesLike,
    _r: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyMembershipZKP(
    _ciphertext: BytesLike,
    _proof: BytesLike[][],
    _isProof0Negativ: boolean[],
    _as: BytesLike[],
    _ias: BytesLike[],
    _gmk: BytesLike[],
    _e: BytesLike,
    _pubKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    BN(
      _values: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumberStructOutput[]>;

    add1(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    add2(
      _a: BytesLike,
      _b: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumberStructOutput>;

    checkEvery(
      _proof: BytesLike[][],
      _isProof0Negativ: boolean[],
      _as: BigNumberStruct[],
      _ias: BytesLike[],
      _pub: BigNumberStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyInvMod(
      _gmk: BytesLike,
      _N: BytesLike,
      _r: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyMembershipZKP(
      _ciphertext: BytesLike,
      _proof: BytesLike[][],
      _isProof0Negativ: boolean[],
      _as: BytesLike[],
      _ias: BytesLike[],
      _gmk: BytesLike[],
      _e: BytesLike,
      _pubKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    BN(_values: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;

    add1(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    add2(
      _a: BytesLike,
      _b: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkEvery(
      _proof: BytesLike[][],
      _isProof0Negativ: boolean[],
      _as: BigNumberStruct[],
      _ias: BytesLike[],
      _pub: BigNumberStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyInvMod(
      _gmk: BytesLike,
      _N: BytesLike,
      _r: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyMembershipZKP(
      _ciphertext: BytesLike,
      _proof: BytesLike[][],
      _isProof0Negativ: boolean[],
      _as: BytesLike[],
      _ias: BytesLike[],
      _gmk: BytesLike[],
      _e: BytesLike,
      _pubKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BN(
      _values: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add1(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add2(
      _a: BytesLike,
      _b: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkEvery(
      _proof: BytesLike[][],
      _isProof0Negativ: boolean[],
      _as: BigNumberStruct[],
      _ias: BytesLike[],
      _pub: BigNumberStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyInvMod(
      _gmk: BytesLike,
      _N: BytesLike,
      _r: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyMembershipZKP(
      _ciphertext: BytesLike,
      _proof: BytesLike[][],
      _isProof0Negativ: boolean[],
      _as: BytesLike[],
      _ias: BytesLike[],
      _gmk: BytesLike[],
      _e: BytesLike,
      _pubKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
