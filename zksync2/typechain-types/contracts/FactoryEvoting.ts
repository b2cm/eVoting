/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Utils {
  export type BallotPaperStruct = {
    ballotType: BigNumberish;
    name: string;
    information: string;
    title: string;
    candidates: string[];
    maxSelectableAnswer: BigNumberish;
  };

  export type BallotPaperStructOutput = [
    number,
    string,
    string,
    string,
    string[],
    BigNumber
  ] & {
    ballotType: number;
    name: string;
    information: string;
    title: string;
    candidates: string[];
    maxSelectableAnswer: BigNumber;
  };
}

export interface FactoryEvotingInterface extends utils.Interface {
  functions: {
    "add_admin(address)": FunctionFragment;
    "get_admins()": FunctionFragment;
    "get_voteIDs()": FunctionFragment;
    "get_voting(string)": FunctionFragment;
    "get_votings()": FunctionFragment;
    "is_admin(address)": FunctionFragment;
    "new_voting(string,string,string,uint256,uint256,(uint8,string,string,string,string[],uint256)[])": FunctionFragment;
    "votings_length()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add_admin"
      | "get_admins"
      | "get_voteIDs"
      | "get_voting"
      | "get_votings"
      | "is_admin"
      | "new_voting"
      | "votings_length"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "add_admin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "get_admins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_voteIDs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "get_voting", values: [string]): string;
  encodeFunctionData(
    functionFragment: "get_votings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "is_admin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "new_voting",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      Utils.BallotPaperStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votings_length",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "add_admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_voteIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_voting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_votings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "is_admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "new_voting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votings_length",
    data: BytesLike
  ): Result;

  events: {
    "VotingCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VotingCreated"): EventFragment;
}

export interface VotingCreatedEventObject {
  contractAddr: string;
}
export type VotingCreatedEvent = TypedEvent<[string], VotingCreatedEventObject>;

export type VotingCreatedEventFilter = TypedEventFilter<VotingCreatedEvent>;

export interface FactoryEvoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryEvotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add_admin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    get_admins(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _admins: string[] }>;

    get_voteIDs(overrides?: CallOverrides): Promise<[string[]]>;

    get_voting(_id: string, overrides?: CallOverrides): Promise<[string]>;

    get_votings(overrides?: CallOverrides): Promise<[string[]]>;

    is_admin(_admin: string, overrides?: CallOverrides): Promise<[boolean]>;

    new_voting(
      _voteID: string,
      _name: string,
      _description: string,
      _start_time: BigNumberish,
      _end_time: BigNumberish,
      _ballot_papers: Utils.BallotPaperStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    votings_length(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  add_admin(
    _admin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  get_admins(overrides?: CallOverrides): Promise<string[]>;

  get_voteIDs(overrides?: CallOverrides): Promise<string[]>;

  get_voting(_id: string, overrides?: CallOverrides): Promise<string>;

  get_votings(overrides?: CallOverrides): Promise<string[]>;

  is_admin(_admin: string, overrides?: CallOverrides): Promise<boolean>;

  new_voting(
    _voteID: string,
    _name: string,
    _description: string,
    _start_time: BigNumberish,
    _end_time: BigNumberish,
    _ballot_papers: Utils.BallotPaperStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  votings_length(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    add_admin(_admin: string, overrides?: CallOverrides): Promise<void>;

    get_admins(overrides?: CallOverrides): Promise<string[]>;

    get_voteIDs(overrides?: CallOverrides): Promise<string[]>;

    get_voting(_id: string, overrides?: CallOverrides): Promise<string>;

    get_votings(overrides?: CallOverrides): Promise<string[]>;

    is_admin(_admin: string, overrides?: CallOverrides): Promise<boolean>;

    new_voting(
      _voteID: string,
      _name: string,
      _description: string,
      _start_time: BigNumberish,
      _end_time: BigNumberish,
      _ballot_papers: Utils.BallotPaperStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    votings_length(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "VotingCreated(address)"(contractAddr?: null): VotingCreatedEventFilter;
    VotingCreated(contractAddr?: null): VotingCreatedEventFilter;
  };

  estimateGas: {
    add_admin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    get_admins(overrides?: CallOverrides): Promise<BigNumber>;

    get_voteIDs(overrides?: CallOverrides): Promise<BigNumber>;

    get_voting(_id: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_votings(overrides?: CallOverrides): Promise<BigNumber>;

    is_admin(_admin: string, overrides?: CallOverrides): Promise<BigNumber>;

    new_voting(
      _voteID: string,
      _name: string,
      _description: string,
      _start_time: BigNumberish,
      _end_time: BigNumberish,
      _ballot_papers: Utils.BallotPaperStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    votings_length(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add_admin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    get_admins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_voteIDs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_voting(
      _id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_votings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    is_admin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    new_voting(
      _voteID: string,
      _name: string,
      _description: string,
      _start_time: BigNumberish,
      _end_time: BigNumberish,
      _ballot_papers: Utils.BallotPaperStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    votings_length(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
