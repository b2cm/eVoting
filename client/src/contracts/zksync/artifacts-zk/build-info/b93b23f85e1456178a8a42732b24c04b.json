{"id":"b93b23f85e1456178a8a42732b24c04b","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"contracts/Register.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Register {\n    address[] private eligibleVoters;\n    bytes[] private hashedVoterIDs;\n    string[] private lrs;\n    string[] private hashedIDs;\n    mapping(bytes => string) private lrsPublicKeys; // hashedID => lrsPublicKey (Linkable Ring Signature pk)\n\n    struct SHA512 {\n        bytes32 part1;\n        bytes32 part2;\n    }\n\n    event HashedIDStored();\n    event VoterAdded();\n    event LRSPKStored();\n\n    constructor() {\n\n    }\n\n    function storeHashedID(string memory _hashedID) external {\n        hashedIDs.push(_hashedID);\n        emit HashedIDStored();\n    }\n\n    function getHashedIDs() external view returns (string[] memory _hashedIDs) {\n        uint256 length = hashedIDs.length;\n        _hashedIDs = new string[](length);\n        for (uint256 i = 0; i < length; i++) {\n            _hashedIDs[i] = hashedIDs[i];\n        }\n    }\n\n    function storeHashedIDAndPK(bytes memory _hashedID, string memory _publicKey) external {\n        hashedVoterIDs.push(_hashedID);\n        lrsPublicKeys[_hashedID] = _publicKey;\n        lrs.push(_publicKey);\n        emit HashedIDStored();\n        emit LRSPKStored();\n    }\n\n    function addEligibleVoter(address _voter) external {\n        eligibleVoters.push(_voter);\n        emit VoterAdded();\n    }\n\n    function getVoterIDs() external view returns(bytes[] memory) {\n        uint256 length = hashedVoterIDs.length;\n        bytes[] memory _voterIDs = new bytes[](length);\n        for (uint256 i = 0; i < length; i++) {\n            _voterIDs[i] = hashedVoterIDs[i];\n        }\n        return _voterIDs;\n    }\n\n    function storeLRSPK (bytes memory _hashedID, string memory _publicKey) external {\n        lrsPublicKeys[_hashedID] = _publicKey;\n        emit LRSPKStored();\n    }\n\n    function getLRSPKs(bytes memory _hashedID) external view returns(string memory pk) {\n        pk = lrsPublicKeys[_hashedID];\n    }\n\n    function getLRSGroup() external view returns(string[] memory _lrs) {\n        _lrs = new string[](lrs.length);\n        for (uint256 i = 0; i < lrs.length; i++) {\n            _lrs[i] = lrs[i];\n        }\n    }\n}"}},"settings":{"optimizer":{"enabled":false,"mode":"z"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[],"version":"0.8.17","long_version":"0.8.17+commit.8df45f5f.Darwin.appleclang","zk_version":"1.3.8","sources":{"contracts/Register.sol":{"id":0,"ast":{"nodeType":"SourceUnit","name":null,"src":"31:2101:0","memberName":null,"functionName":null,"AST":null,"nodes":[{"nodeType":"PragmaDirective","name":null,"src":"31:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ContractDefinition","name":"Register","src":"56:2076:0","memberName":null,"functionName":null,"AST":null,"nodes":[{"nodeType":"VariableDeclaration","name":"eligibleVoters","src":"80:32:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"hashedVoterIDs","src":"118:30:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"lrs","src":"154:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"hashedIDs","src":"180:26:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"lrsPublicKeys","src":"212:46:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"StructDefinition","name":"SHA512","src":"322:67:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":[{"nodeType":"VariableDeclaration","name":"part1","src":"346:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"part2","src":"369:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EventDefinition","name":"HashedIDStored","src":"395:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EventDefinition","name":"VoterAdded","src":"423:19:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EventDefinition","name":"LRSPKStored","src":"447:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"","src":"473:22:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"487:8:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"storeHashedID","src":"501:130:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"558:73:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"568:25:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"568:25:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"_hashedID","src":"583:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"MemberAccess","name":null,"src":"568:14:0","memberName":"push","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"hashedIDs","src":"568:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EmitStatement","name":null,"src":"603:21:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":{"nodeType":"FunctionCall","name":null,"src":"608:16:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"HashedIDStored","src":"608:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"getHashedIDs","src":"637:267:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"712:192:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"VariableDeclarationStatement","name":null,"src":"722:33:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":[{"nodeType":"VariableDeclaration","name":"length","src":"722:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":{"nodeType":"MemberAccess","name":null,"src":"739:16:0","memberName":"length","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"hashedIDs","src":"739:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ExpressionStatement","name":null,"src":"765:33:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"765:33:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"_hashedIDs","src":"765:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"FunctionCall","name":null,"src":"778:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"length","src":"791:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"NewExpression","name":null,"src":"778:12:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ForStatement","name":null,"src":"808:90:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"845:53:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"859:28:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"859:28:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"IndexAccess","name":null,"src":"859:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"_hashedIDs","src":"859:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"i","src":"870:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"IndexAccess","name":null,"src":"875:12:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"hashedIDs","src":"875:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"i","src":"885:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":{"nodeType":"BinaryOperation","name":null,"src":"828:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"Identifier","name":"i","src":"828:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"Identifier","name":"length","src":"832:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"initializationExpression":{"nodeType":"VariableDeclarationStatement","name":null,"src":"813:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":[{"nodeType":"VariableDeclaration","name":"i","src":"813:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":{"nodeType":"Literal","name":null,"src":"825:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":"0","initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":{"nodeType":"ExpressionStatement","name":null,"src":"840:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"UnaryOperation","name":null,"src":"840:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":{"nodeType":"Identifier","name":"i","src":"840:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"storeHashedIDAndPK","src":"910:270:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"997:183:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"1007:30:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"1007:30:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"_hashedID","src":"1027:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"MemberAccess","name":null,"src":"1007:19:0","memberName":"push","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"hashedVoterIDs","src":"1007:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ExpressionStatement","name":null,"src":"1047:37:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"1047:37:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"IndexAccess","name":null,"src":"1047:24:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"lrsPublicKeys","src":"1047:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"_hashedID","src":"1061:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"Identifier","name":"_publicKey","src":"1074:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ExpressionStatement","name":null,"src":"1094:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"1094:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"_publicKey","src":"1103:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"MemberAccess","name":null,"src":"1094:8:0","memberName":"push","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"lrs","src":"1094:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EmitStatement","name":null,"src":"1124:21:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":{"nodeType":"FunctionCall","name":null,"src":"1129:16:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"HashedIDStored","src":"1129:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EmitStatement","name":null,"src":"1155:18:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":{"nodeType":"FunctionCall","name":null,"src":"1160:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"LRSPKStored","src":"1160:11:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"addEligibleVoter","src":"1186:122:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"1237:71:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"1247:27:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"1247:27:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"_voter","src":"1267:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"MemberAccess","name":null,"src":"1247:19:0","memberName":"push","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"eligibleVoters","src":"1247:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EmitStatement","name":null,"src":"1284:17:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":{"nodeType":"FunctionCall","name":null,"src":"1289:12:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"VoterAdded","src":"1289:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"getVoterIDs","src":"1314:301:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"1375:240:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"VariableDeclarationStatement","name":null,"src":"1385:38:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":[{"nodeType":"VariableDeclaration","name":"length","src":"1385:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":{"nodeType":"MemberAccess","name":null,"src":"1402:21:0","memberName":"length","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"hashedVoterIDs","src":"1402:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclarationStatement","name":null,"src":"1433:46:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":[{"nodeType":"VariableDeclaration","name":"_voterIDs","src":"1433:24:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":{"nodeType":"FunctionCall","name":null,"src":"1460:19:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"length","src":"1472:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"NewExpression","name":null,"src":"1460:11:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ForStatement","name":null,"src":"1489:94:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"1526:57:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"1540:32:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"1540:32:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"IndexAccess","name":null,"src":"1540:12:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"_voterIDs","src":"1540:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"i","src":"1550:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"IndexAccess","name":null,"src":"1555:17:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"hashedVoterIDs","src":"1555:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"i","src":"1570:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":{"nodeType":"BinaryOperation","name":null,"src":"1509:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"Identifier","name":"i","src":"1509:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"Identifier","name":"length","src":"1513:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"initializationExpression":{"nodeType":"VariableDeclarationStatement","name":null,"src":"1494:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":[{"nodeType":"VariableDeclaration","name":"i","src":"1494:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":{"nodeType":"Literal","name":null,"src":"1506:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":"0","initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":{"nodeType":"ExpressionStatement","name":null,"src":"1521:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"UnaryOperation","name":null,"src":"1521:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":{"nodeType":"Identifier","name":"i","src":"1521:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"Return","name":null,"src":"1592:16:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"_voterIDs","src":"1599:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"storeLRSPK","src":"1621:162:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"1701:82:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"1711:37:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"1711:37:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"IndexAccess","name":null,"src":"1711:24:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"lrsPublicKeys","src":"1711:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"_hashedID","src":"1725:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"Identifier","name":"_publicKey","src":"1738:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EmitStatement","name":null,"src":"1758:18:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":{"nodeType":"FunctionCall","name":null,"src":"1763:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"LRSPKStored","src":"1763:11:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"getLRSPKs","src":"1789:129:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"1872:46:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"1882:29:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"1882:29:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"pk","src":"1882:2:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"IndexAccess","name":null,"src":"1887:24:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"lrsPublicKeys","src":"1887:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"_hashedID","src":"1901:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"getLRSGroup","src":"1924:206:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"1991:139:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"2001:31:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"2001:31:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"_lrs","src":"2001:4:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"FunctionCall","name":null,"src":"2008:24:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"MemberAccess","name":null,"src":"2021:10:0","memberName":"length","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"lrs","src":"2021:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"NewExpression","name":null,"src":"2008:12:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ForStatement","name":null,"src":"2042:82:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"2083:41:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"2097:16:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"2097:16:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"IndexAccess","name":null,"src":"2097:7:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"_lrs","src":"2097:4:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"i","src":"2102:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"IndexAccess","name":null,"src":"2107:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"lrs","src":"2107:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"i","src":"2111:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":{"nodeType":"BinaryOperation","name":null,"src":"2062:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"Identifier","name":"i","src":"2062:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"MemberAccess","name":null,"src":"2066:10:0","memberName":"length","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"lrs","src":"2066:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"initializationExpression":{"nodeType":"VariableDeclarationStatement","name":null,"src":"2047:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":[{"nodeType":"VariableDeclaration","name":"i","src":"2047:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":{"nodeType":"Literal","name":null,"src":"2059:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":"0","initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":{"nodeType":"ExpressionStatement","name":null,"src":"2078:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"UnaryOperation","name":null,"src":"2078:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":{"nodeType":"Identifier","name":"i","src":"2078:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}}},"contracts":{"contracts/Register.sol":{"Register":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[],"name":"HashedIDStored","type":"event"},{"anonymous":false,"inputs":[],"name":"LRSPKStored","type":"event"},{"anonymous":false,"inputs":[],"name":"VoterAdded","type":"event"},{"inputs":[{"internalType":"address","name":"_voter","type":"address"}],"name":"addEligibleVoter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getHashedIDs","outputs":[{"internalType":"string[]","name":"_hashedIDs","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLRSGroup","outputs":[{"internalType":"string[]","name":"_lrs","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_hashedID","type":"bytes"}],"name":"getLRSPKs","outputs":[{"internalType":"string","name":"pk","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVoterIDs","outputs":[{"internalType":"bytes[]","name":"","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_hashedID","type":"string"}],"name":"storeHashedID","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_hashedID","type":"bytes"},{"internalType":"string","name":"_publicKey","type":"string"}],"name":"storeHashedIDAndPK","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_hashedID","type":"bytes"},{"internalType":"string","name":"_publicKey","type":"string"}],"name":"storeLRSPK","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":"MzB3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HashedIDStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LRSPKStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VoterAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"addEligibleVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHashedIDs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_hashedIDs\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLRSGroup\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_lrs\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_hashedID\",\"type\":\"bytes\"}],\"name\":\"getLRSPKs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pk\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoterIDs\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hashedID\",\"type\":\"string\"}],\"name\":\"storeHashedID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_hashedID\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_publicKey\",\"type\":\"string\"}],\"name\":\"storeHashedIDAndPK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_hashedID\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_publicKey\",\"type\":\"string\"}],\"name\":\"storeLRSPK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Register.sol\":\"Register\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Register.sol\":{\"keccak256\":\"0xdb9f2010d51a8226f62204e14328b56df5d927b0190e573090d0663c99ee7296\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20b459370a9985178125db670c9b5c22ed83a1e96feb82e2fc5a75baf292737a\",\"dweb:/ipfs/Qmcdd2vtnUnvdCvGM78A8Qqp2ZiPzXeUN7epa8PurtScR2\"]}},\"version\":1}","zk_version":"1.3.8"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"Register.sol:Register\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[1]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@calldatasize]\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_1\n\tadd\tstack[@calldatasize], r0, r1\n\tsub.s!\t4, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_2[0], r1, r2\n\tjump.eq\t@.BB0_27\n\tsub.s!\t@CPI0_3[0], r1, r2\n\tjump.eq\t@.BB0_15\n\tsub.s!\t@CPI0_4[0], r1, r2\n\tjump.eq\t@.BB0_17\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.eq\t@.BB0_19\n\tsub.s!\t@CPI0_6[0], r1, r2\n\tjump.eq\t@.BB0_21\n\tsub.s!\t@CPI0_7[0], r1, r2\n\tjump.eq\t@.BB0_23\n\tsub.s!\t@CPI0_8[0], r1, r2\n\tjump.eq\t@.BB0_25\n\tsub.s!\t@CPI0_9[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_getVoterIDs_179, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t256, r0, r1\n\tadd\t64, r0, r2\n\tadd\t@CPI0_1[0], r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_15:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_getLRSGroup_247, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_17:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_bytes_memory_ptrt_string_memory_ptr, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_storeLRSPK_196, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr0, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_19:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_getHashedIDs_87, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_21:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_storeHashedID_47, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr0, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_23:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_address, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_addEligibleVoter_134, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr0, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_25:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_bytes_memory_ptrt_string_memory_ptr, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_storeHashedIDAndPK_119, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr0, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_27:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_getLRSPKs_210, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_2:\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end0:\n\n__keccak256:\n.func_begin1:\n\tadd\t@CPI1_0[0], r0, r3\n\tsub.s!\t@CPI1_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI1_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_2\n\tld\tr1, r1\n\tret\n.BB1_2:\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end1:\n\n__exit_return:\n.func_begin2:\n\tadd\t@CPI2_0[0], r0, r4\n\tsub.s!\t@CPI2_0[0], r1, r5\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tadd\tr1, r3, r1\n\tsub.s!\t@CPI2_0[0], r2, r3\n\tadd.ge\tr4, r0, r2\n\tshl.s\t96, r2, r2\n\tadd\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end2:\n\n__exit_revert:\n.func_begin3:\n\tshl.s\t96, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\nabi_decode_tuple_:\n.func_begin4:\n\tsub.s\t4, r1, r1\n\tsub.s\t1, r0, r2\n\tadd\t@CPI4_0[0], r0, r3\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.gt\tr3, r0, r2\n\tand\t@CPI4_0[0], r1, r1\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\t0, r0, r3\n\txor\t@CPI4_0[0], r1, r1\n\tsub.s!\t@CPI4_0[0], r1, r1\n\tadd\tr2, r0, r1\n\tadd.eq\tr3, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB4_1\n\tret\n.BB4_1:\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end4:\n\nabi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack:\n.func_begin5:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1\tr2, r3\n\tst.1\tr4, r3\n\tadd\t64, r1, r4\n\tshl.s\t5, r3, r1\n\tadd\tr1, r4, r1\n\tadd\tr4, r0, r5\n\tadd\tr0, r0, r6\n.BB5_1:\n\tsub!\tr6, r3, r7\n\tjump.ge\t@.BB5_6\n\tadd\t32, r2, r2\n\tsub\tr1, r4, r7\n\tst.1.inc\tr5, r7, r5\n\tld.1\tr2, r8\n\tld.1\tr8, r7\n\tst.1.inc\tr1, r7, r1\n\tadd\tr0, r0, r9\n.BB5_3:\n\tsub!\tr9, r7, r10\n\tjump.ge\t@.BB5_5\n\tadd\tr9, r1, r10\n\tadd\t32, r9, r9\n\tadd\tr9, r8, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tjump\t@.BB5_3\n.BB5_5:\n\tadd\t31, r7, r8\n\tsub.s\t32, r0, r9\n\tand\tr8, r9, r8\n\tadd\tr7, r1, r7\n\tst.1\tr7, r0\n\tadd\tr8, r1, r1\n\tadd\t1, r6, r6\n\tjump\t@.BB5_1\n.BB5_6:\n\tret\n.func_end5:\n\nallocate_memory:\n.func_begin6:\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tld.1\t64, r1\n\tadd\tr1, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t@CPI6_0[0], r2, r4\n\tjump.gt\t@.BB6_2\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB6_2\n\tst.1\t64, r2\n\tret\n.BB6_2:\n\tadd\t@CPI6_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end6:\n\nabi_decode_t_bytes_memory_ptr:\n.func_begin7:\n\tnop\tstack+=[3]\n\tadd\t31, r1, r6\n\tadd\t@CPI7_0[0], r0, r3\n\tsub!\tr6, r2, r4\n\tadd\t0, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t@CPI7_0[0], r2, r5\n\tand\t@CPI7_0[0], r6, r7\n\tsub!\tr7, r5, r6\n\tadd.le\t0, r0, r3\n\txor\tr7, r5, r5\n\tsub.s!\t@CPI7_0[0], r5, r5\n\tadd.ne\tr4, r0, r3\n\tsub.s!\t0, r3, r3\n\tjump.eq\t@.BB7_1\n\tadd\tr2, r0, stack-[3]\n\tptr.add\tstack[@ptr_calldata], r1, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI7_1[0], r3, r2\n\tjump.ge\t@.BB7_3\n\tadd\t32, r1, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t63, r3, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\tr3, r0, stack-[2]\n\tnear_call\tr0, @allocate_memory, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r5\n\tadd\tstack-[2], r0, r9\n\tst.1.inc\tr1, r9, r2\n\tadd\tr9, r5, r3\n\tadd\tstack-[3], r0, r4\n\tsub!\tr3, r4, r3\n\tjump.gt\t@.BB7_1\n\tand\t31, r9, r3\n\tptr.add\tstack[@ptr_calldata], r5, r4\n\tshr.s!\t5, r9, r5\n\tjump.eq\t@.BB7_10\n\tadd\tr0, r0, r6\n.BB7_7:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr4, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB7_7\n.BB7_10:\n\tsub.s!\t0, r3, r6\n\tjump.eq\t@.BB7_9\n\tshl.s\t5, r5, r5\n\tptr.add\tr4, r5, r4\n\tadd\tr2, r5, r5\n\tshl.s\t3, r3, r3\n\tld.1\tr5, r6\n\tshl\tr6, r3, r6\n\tshr\tr6, r3, r6\n\tld\tr4, r4\n\tsub\t256, r3, r3\n\tshr\tr4, r3, r4\n\tshl\tr4, r3, r3\n\tor\tr3, r6, r3\n\tst.1\tr5, r3\n.BB7_9:\n\tadd\tr2, r9, r2\n\tst.1\tr2, r0\n\tret\n.BB7_1:\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB7_3:\n\tadd\t@CPI7_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end7:\n\nabi_decode_tuple_t_bytes_memory_ptrt_string_memory_ptr:\n.func_begin8:\n\tnop\tstack+=[2]\n\tadd\tr1, r0, r5\n\tsub.s\t4, r5, r1\n\tadd\t@CPI8_0[0], r0, r2\n\tsub.s!\t63, r1, r3\n\tadd\t0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI8_0[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.ge\t0, r0, r2\n\tsub.s!\t@CPI8_0[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB8_1\n\tadd\t4, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI8_1[0], r1, r2\n\tjump.gt\t@.BB8_1\n\tadd\t4, r1, r1\n\tadd\tr5, r0, r2\n\tadd\tr5, r0, stack-[2]\n\tnear_call\tr0, @abi_decode_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r2\n\tadd\tr1, r0, stack-[1]\n\tadd\t36, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI8_1[0], r1, r3\n\tjump.gt\t@.BB8_1\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tadd\tstack-[1], r0, r1\n\tret\n.BB8_1:\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end8:\n\nabi_decode_tuple_t_address:\n.func_begin9:\n\tsub.s\t4, r1, r1\n\tadd\t@CPI9_0[0], r0, r2\n\tsub.s!\t31, r1, r3\n\tadd\t0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI9_0[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.ge\t0, r0, r2\n\tsub.s!\t@CPI9_0[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB9_1\n\tadd\t4, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI9_1[0], r1, r2\n\tjump.gt\t@.BB9_1\n\tret\n.BB9_1:\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end9:\n\nabi_decode_tuple_t_bytes_memory_ptr:\n.func_begin10:\n\tadd\tr1, r0, r2\n\tsub.s\t4, r2, r1\n\tadd\t@CPI10_0[0], r0, r3\n\tsub.s!\t31, r1, r4\n\tadd\t0, r0, r4\n\tadd.gt\tr3, r0, r4\n\tand\t@CPI10_0[0], r1, r1\n\tsub.s!\t0, r1, r5\n\tadd.ge\t0, r0, r3\n\tsub.s!\t@CPI10_0[0], r1, r1\n\tadd\tr4, r0, r1\n\tadd.eq\tr3, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB10_1\n\tadd\t4, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI10_1[0], r1, r3\n\tjump.gt\t@.BB10_1\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tret\n.BB10_1:\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end10:\n\nabi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack:\n.func_begin11:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1\tr2, r3\n\tst.1\tr4, r3\n\tadd\t64, r1, r1\n\tadd\tr0, r0, r4\n.BB11_1:\n\tsub!\tr4, r3, r5\n\tjump.ge\t@.BB11_3\n\tadd\tr4, r1, r5\n\tadd\t32, r4, r4\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tjump\t@.BB11_1\n.BB11_3:\n\tadd\tr3, r1, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tret\n.func_end11:\n\nextract_byte_array_length:\n.func_begin12:\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.eq\tr3, r0, r1\n\tsub.s!\t31, r1, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\tand\t1, r3, r3\n\tsub!\tr2, r3, r2\n\tjump.ne\t@.BB12_1\n\tret\n.BB12_1:\n\tadd\t@CPI12_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end12:\n\ncopy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage:\n.func_begin13:\n\tnop\tstack+=[5]\n\tadd\tr2, r0, stack-[3]\n\tld.1.inc\tr2, r2, r3\n\tadd\tr3, r0, stack-[2]\n\tadd\tr2, r0, stack-[5]\n\tsub.s!\t@CPI13_0[0], r2, r2\n\tjump.ge\t@.BB13_1\n\tadd\tr1, r0, stack-[4]\n\tsload\tr1, r1\n\tnear_call\tr0, @extract_byte_array_length, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tsub.s!\t32, r2, r1\n\tadd\tstack-[5], r0, r5\n\tjump.lt\t@.BB13_6\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\tr2, r0, stack-[1]\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd\tr2, r0, r3\n\tadd.lt\t0, r0, r3\n\tadd\tstack-[1], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tadd\tr1, r3, r1\n.BB13_4:\n\tsub!\tr1, r2, r3\n\tjump.ge\t@.BB13_6\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tjump\t@.BB13_4\n.BB13_6:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB13_14\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr2, r0, stack-[2]\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r7\n\tadd\tstack-[5], r0, r5\n\tsub.s\t32, r0, r2\n\tand\tr5, r2, r2\n\tadd\tr0, r0, r3\n\tadd\tstack-[3], r0, r6\n.BB13_9:\n\tsub!\tr3, r2, r4\n\tadd\tr7, r6, r4\n\tjump.ge\t@.BB13_11\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r3, r3\n\tadd\t32, r7, r7\n\tadd\t1, r1, r1\n\tjump\t@.BB13_9\n.BB13_14:\n\tsub.s!\t0, r5, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[4], r0, r4\n\tjump.eq\t@.BB13_16\n\tadd\tstack-[2], r0, r1\n\tld.1\tr1, r1\n.BB13_16:\n\tshl.s\t3, r5, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r5, r1\n\tjump\t@.BB13_7\n.BB13_11:\n\tsub!\tr2, r5, r2\n\tjump.ge\t@.BB13_13\n\tshl.s\t3, r5, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tld.1\tr4, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB13_13:\n\tadd\t1, r0, r1\n\tshl.s\t1, r5, r2\n\tadd\tstack-[4], r0, r4\n.BB13_7:\n\tor\tr2, r1, r1\n\tsstore\tr4, r1\n\tret\n.BB13_1:\n\tadd\t@CPI13_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end13:\n\narray_push_from_t_string_memory_ptr_to_t_array$_t_string_storage_$dyn_storage_ptr:\n.func_begin14:\n\tnop\tstack+=[2]\n\tsload\tr1, r4\n\tsub.s!\t@CPI14_0[0], r4, r3\n\tjump.ge\t@.BB14_1\n\tadd\tr2, r0, stack-[2]\n\tadd\t1, r4, r2\n\tsstore\tr1, r2\n\tsload\tr1, r2\n\tadd\tr4, r0, stack-[1]\n\tsub!\tr2, r4, r2\n\tjump.le\t@.BB14_3\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tadd\tr1, r2, r1\n\tadd\tstack-[2], r0, r2\n\tnear_call\tr0, @copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage, @DEFAULT_UNWIND\n\tret\n.BB14_1:\n\tadd\t@CPI14_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB14_3:\n\tadd\t@CPI14_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end14:\n\nfun_storeHashedID_47:\n.func_begin15:\n\tadd\tr1, r0, r2\n\tadd\t3, r0, r1\n\tnear_call\tr0, @array_push_from_t_string_memory_ptr_to_t_array$_t_string_storage_$dyn_storage_ptr, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\t@CPI15_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI15_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI15_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI15_1[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI15_2[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB15_1\n\tret\n.BB15_1:\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end15:\n\nallocate_and_zero_memory_array_t_array$_t_string_memory_ptr_$dyn_memory_ptr:\n.func_begin16:\n\tnop\tstack+=[2]\n\tadd\tr1, r0, r2\n\tsub.s!\t@CPI16_0[0], r2, r1\n\tjump.ge\t@.BB16_1\n\tshl.s\t5, r2, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t32, r1, r1\n\tadd\tr2, r0, stack-[2]\n\tnear_call\tr0, @allocate_memory, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r6\n\tadd\tstack-[1], r0, r5\n\tadd\t96, r0, r2\n\tadd\tr1, r0, r4\n\tadd\tr0, r0, r3\n.BB16_3:\n\tst.1\tr4, r6\n\tsub!\tr3, r5, r4\n\tjump.ge\t@.BB16_5\n\tadd\t32, r3, r3\n\tadd\tr3, r1, r4\n\tadd\tr2, r0, r6\n\tjump\t@.BB16_3\n.BB16_5:\n\tret\n.BB16_1:\n\tadd\t@CPI16_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end16:\n\nstorage_array_index_access_t_array$_t_string_storage_$dyn_storage:\n.func_begin17:\n\tnop\tstack+=[1]\n\tsload\tr1, r3\n\tadd\tr2, r0, stack-[1]\n\tsub!\tr3, r2, r2\n\tjump.le\t@.BB17_1\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tadd\tr1, r2, r1\n\tadd\tr0, r0, r2\n\tret\n.BB17_1:\n\tadd\t@CPI17_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end17:\n\nconvert_array_t_string_storage_to_t_string_memory_ptr:\n.func_begin18:\n\tnop\tstack+=[3]\n\tadd\tr1, r0, stack-[1]\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[2]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[3]\n\tnear_call\tr0, @extract_byte_array_length, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r2\n\tadd\tstack-[3], r0, r5\n\tadd\tr1, r0, r3\n\tst.1.inc\tr5, r3, r4\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB18_2\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\tr4, r1\n\tsub.s!\t0, r3, r1\n\tadd\t32, r0, r2\n\tadd.eq\t0, r0, r2\n.BB18_5:\n\tadd\t63, r2, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI18_0[0], r1, r3\n\tjump.gt\t@.BB18_7\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB18_7\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tret\n.BB18_2:\n\tadd\tstack-[1], r0, r1\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[2]\n\tadd\tr4, r0, stack-[1]\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r7\n\tadd\tstack-[2], r0, r6\n\tadd\tstack-[3], r0, r5\n\tadd\tr0, r0, r2\n.BB18_3:\n\tsub!\tr2, r6, r3\n\tjump.ge\t@.BB18_5\n\tadd\tr2, r7, r3\n\tsload\tr1, r4\n\tst.1\tr3, r4\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tjump\t@.BB18_3\n.BB18_7:\n\tadd\t@CPI18_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end18:\n\nfun_getHashedIDs_87:\n.func_begin19:\n\tnop\tstack+=[5]\n\tadd\t3, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[3]\n\tnear_call\tr0, @allocate_and_zero_memory_array_t_array$_t_string_memory_ptr_$dyn_memory_ptr, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tadd\t32, r3, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\tr0, r0, r2\n\tadd\tr3, r0, stack-[4]\n.BB19_1:\n\tadd\tstack-[3], r0, r1\n\tsub!\tr2, r1, r1\n\tjump.ge\t@.BB19_2\n\tadd\tstack-[2], r0, r1\n\tadd\tr2, r0, stack-[5]\n\tnear_call\tr0, @storage_array_index_access_t_array$_t_string_storage_$dyn_storage, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r3\n\tadd\tstack-[4], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r3, r2\n\tjump.le\t@.BB19_4\n\tnear_call\tr0, @convert_array_t_string_storage_to_t_string_memory_ptr, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r3\n\tadd\tstack-[5], r0, r5\n\tshl.s\t5, r5, r2\n\tadd\tstack-[1], r0, r4\n\tadd\tr4, r2, r2\n\tst.1\tr2, r1\n\tadd\t1, r5, r1\n\tld.1\tr3, r2\n\tsub!\tr2, r5, r2\n\tadd\tr1, r0, r2\n\tjump.gt\t@.BB19_1\n.BB19_4:\n\tadd\t@CPI19_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB19_2:\n\tadd\tr3, r0, r1\n\tret\n.func_end19:\n\nmapping_index_access_t_mapping$_t_bytes_memory_ptr_$_t_string_storage_$_of_t_bytes_memory_ptr:\n.func_begin20:\n\tadd\tr1, r0, r2\n\tld.1\t64, r1\n\tld.1\tr2, r3\n\tadd\tr0, r0, r4\n.BB20_1:\n\tsub!\tr4, r3, r5\n\tjump.ge\t@.BB20_3\n\tadd\tr4, r1, r5\n\tadd\t32, r4, r4\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tjump\t@.BB20_1\n.BB20_3:\n\tadd\tr3, r1, r2\n\tadd\t4, r0, r4\n\tst.1\tr2, r4\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tret\n.func_end20:\n\nfun_storeHashedIDAndPK_119:\n.func_begin21:\n\tnop\tstack+=[8]\n\tadd\tr2, r0, stack-[8]\n\tadd\t1, r0, r3\n\tsload\tr3, r4\n\tsub.s!\t@CPI21_0[0], r4, r2\n\tjump.ge\t@.BB21_1\n\tadd\tr1, r0, stack-[7]\n\tadd\t1, r4, r1\n\tsstore\tr3, r1\n\tsload\tr3, r1\n\tadd\tr4, r0, stack-[4]\n\tsub!\tr1, r4, r1\n\tjump.le\t@.BB21_3\n\tst.1\t0, r3\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[3]\n\tadd\tr2, r0, stack-[5]\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r2\n\tld.1.inc\tr2, r2, r3\n\tadd\tr3, r0, stack-[2]\n\tadd\tr2, r0, stack-[6]\n\tsub.s!\t@CPI21_2[0], r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.gt\t@.BB21_1\n\tadd\tstack-[3], r0, r3\n\tadd\tr1, r2, r1\n\tadd\tr1, r0, stack-[4]\n\tsload\tr1, r1\n\tnear_call\tr0, @extract_byte_array_length, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tstack-[6], r0, r4\n\tadd\tstack-[5], r0, r2\n\tjump.lt\t@.BB21_9\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[1]\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tadd\tstack-[6], r0, r4\n\tadd\t31, r4, r3\n\tshr.s\t5, r3, r5\n\tsub.s!\t32, r4, r3\n\tadd\tr5, r0, r3\n\tadd.lt\t0, r0, r3\n\tadd\tstack-[1], r0, r5\n\tadd\t31, r5, r5\n\tshr.s\t5, r5, r5\n\tadd\tr1, r5, r5\n\tadd\tr1, r3, r1\n.BB21_7:\n\tsub!\tr1, r5, r3\n\tjump.ge\t@.BB21_9\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tjump\t@.BB21_7\n.BB21_9:\n\tsub.s!\t32, r4, r1\n\tjump.lt\t@.BB21_16\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r7\n\tadd\tstack-[6], r0, r6\n\tsub.s\t32, r0, r2\n\tand\tr6, r2, r2\n\tadd\tr0, r0, r3\n\tadd\tstack-[7], r0, r5\n.BB21_11:\n\tsub!\tr3, r2, r4\n\tadd\tr7, r5, r4\n\tjump.ge\t@.BB21_13\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r3, r3\n\tadd\t32, r7, r7\n\tadd\t1, r1, r1\n\tjump\t@.BB21_11\n.BB21_16:\n\tsub.s!\t0, r4, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB21_18\n\tadd\tstack-[2], r0, r1\n\tld.1\tr1, r1\n.BB21_18:\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, r2\n\tadd\tstack-[7], r0, r5\n\tjump\t@.BB21_19\n.BB21_13:\n\tsub!\tr2, r6, r2\n\tjump.ge\t@.BB21_15\n\tshl.s\t3, r6, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tld.1\tr4, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB21_15:\n\tshl.s\t1, r6, r1\n\tadd\tstack-[3], r0, r2\n.BB21_19:\n\tor\tr1, r2, r1\n\tadd\tstack-[4], r0, r2\n\tsstore\tr2, r1\n\tadd\tr5, r0, r1\n\tnear_call\tr0, @mapping_index_access_t_mapping$_t_bytes_memory_ptr_$_t_string_storage_$_of_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r2\n\tnear_call\tr0, @copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage, @DEFAULT_UNWIND\n\tadd\t2, r0, r1\n\tadd\tstack-[8], r0, r2\n\tnear_call\tr0, @array_push_from_t_string_memory_ptr_to_t_array$_t_string_storage_$dyn_storage_ptr, @DEFAULT_UNWIND\n\tadd\t@CPI21_3[0], r0, r1\n\tld.1\t64, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI21_3[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI21_3[0], r2, r4\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI21_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI21_5[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB21_20\n\tld.1\t64, r1\n\tadd\t@CPI21_3[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI21_3[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI21_3[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI21_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI21_6[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB21_20\n\tret\n.BB21_1:\n\tadd\t@CPI21_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB21_20:\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB21_3:\n\tadd\t@CPI21_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end21:\n\nfun_addEligibleVoter_134:\n.func_begin22:\n\tnop\tstack+=[2]\n\tsload\tr0, r3\n\tsub.s!\t@CPI22_0[0], r3, r2\n\tjump.ge\t@.BB22_1\n\tadd\tr1, r0, stack-[2]\n\tadd\t1, r3, r1\n\tsstore\tr0, r1\n\tsload\tr0, r1\n\tadd\tr3, r0, stack-[1]\n\tsub!\tr1, r3, r1\n\tjump.le\t@.BB22_3\n\tst.1\t0, r0\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tadd\tr1, r2, r1\n\tsload\tr1, r2\n\tand\t@CPI22_2[0], r2, r2\n\tadd\tstack-[2], r0, r3\n\tand\t@CPI22_3[0], r3, r3\n\tor\tr2, r3, r2\n\tsstore\tr1, r2\n\tadd\t@CPI22_4[0], r0, r1\n\tld.1\t64, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI22_4[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI22_4[0], r2, r4\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI22_5[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI22_6[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB22_5\n\tret\n.BB22_1:\n\tadd\t@CPI22_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB22_3:\n\tadd\t@CPI22_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB22_5:\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end22:\n\nfun_getVoterIDs_179:\n.func_begin23:\n\tnop\tstack+=[9]\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[6]\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[3]\n\tsub.s!\t@CPI23_0[0], r1, r1\n\tjump.ge\t@.BB23_1\n\tadd\tstack-[3], r0, r1\n\tshl.s\t5, r1, r1\n\tadd\tr1, r0, stack-[8]\n\tadd\t32, r1, r1\n\tnear_call\tr0, @allocate_memory, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r5\n\tadd\tr1, r0, r3\n\tadd\t96, r0, r1\n\tadd\tr3, r0, stack-[9]\n\tadd\tstack-[3], r0, r4\n\tadd\tr0, r0, r2\n.BB23_3:\n\tst.1\tr3, r4\n\tsub!\tr2, r5, r3\n\tjump.ge\t@.BB23_4\n\tadd\t32, r2, r2\n\tadd\tstack-[9], r0, r3\n\tadd\tr2, r3, r3\n\tadd\tr1, r0, r4\n\tjump\t@.BB23_3\n.BB23_4:\n\tadd\tstack-[9], r0, r1\n\tadd\t32, r1, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t32, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\tr0, r0, r3\n.BB23_6:\n\tadd\tstack-[3], r0, r1\n\tsub!\tr3, r1, r1\n\tjump.ge\t@.BB23_7\n\tadd\tstack-[6], r0, r1\n\tsload\tr1, r1\n\tsub!\tr1, r3, r1\n\tjump.le\t@.BB23_9\n\tadd\tstack-[6], r0, r1\n\tst.1\t0, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r2\n\tadd\tr3, r0, stack-[8]\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r3\n\tadd\tstack-[9], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r3, r2\n\tjump.le\t@.BB23_9\n\tadd\tr1, r3, r1\n\tadd\tr1, r0, stack-[4]\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[5]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[7]\n\tnear_call\tr0, @extract_byte_array_length, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tadd\tstack-[7], r0, r5\n\tadd\tr1, r0, r3\n\tst.1.inc\tr5, r3, r4\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB23_13\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\tr4, r1\n\tsub.s!\t0, r3, r1\n\tadd\t32, r0, r2\n\tadd.eq\t0, r0, r2\n.BB23_16:\n\tadd\t63, r2, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI23_1[0], r1, r3\n\tjump.gt\t@.BB23_1\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB23_1\n\tadd\tstack-[8], r0, r4\n\tshl.s\t5, r4, r2\n\tadd\tstack-[1], r0, r3\n\tadd\tr3, r2, r2\n\tst.1\t64, r1\n\tst.1\tr2, r5\n\tadd\t1, r4, r1\n\tadd\tstack-[9], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r4, r2\n\tadd\tr1, r0, r3\n\tjump.gt\t@.BB23_6\n\tjump\t@.BB23_9\n.BB23_13:\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[5]\n\tadd\tr4, r0, stack-[4]\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r7\n\tadd\tstack-[5], r0, r6\n\tadd\tstack-[7], r0, r5\n\tadd\tr0, r0, r2\n.BB23_14:\n\tsub!\tr2, r6, r3\n\tjump.ge\t@.BB23_16\n\tadd\tr2, r7, r3\n\tsload\tr1, r4\n\tst.1\tr3, r4\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tjump\t@.BB23_14\n.BB23_7:\n\tadd\tstack-[9], r0, r1\n\tret\n.BB23_9:\n\tadd\t@CPI23_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB23_1:\n\tadd\t@CPI23_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end23:\n\nfun_storeLRSPK_196:\n.func_begin24:\n\tnop\tstack+=[1]\n\tadd\tr2, r0, stack-[1]\n\tnear_call\tr0, @mapping_index_access_t_mapping$_t_bytes_memory_ptr_$_t_string_storage_$_of_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tnear_call\tr0, @copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\t@CPI24_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI24_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI24_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI24_1[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI24_2[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB24_1\n\tret\n.BB24_1:\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end24:\n\nfun_getLRSPKs_210:\n.func_begin25:\n\tnear_call\tr0, @mapping_index_access_t_mapping$_t_bytes_memory_ptr_$_t_string_storage_$_of_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tnear_call\tr0, @convert_array_t_string_storage_to_t_string_memory_ptr, @DEFAULT_UNWIND\n\tret\n.func_end25:\n\nfun_getLRSGroup_247:\n.func_begin26:\n\tnop\tstack+=[4]\n\tadd\t2, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tsload\tr1, r1\n\tnear_call\tr0, @allocate_and_zero_memory_array_t_array$_t_string_memory_ptr_$dyn_memory_ptr, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tadd\t32, r3, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\tr0, r0, r2\n\tadd\tr3, r0, stack-[3]\n.BB26_1:\n\tadd\tstack-[2], r0, r1\n\tsload\tr1, r4\n\tsub!\tr2, r4, r4\n\tjump.ge\t@.BB26_2\n\tadd\tr2, r0, stack-[4]\n\tnear_call\tr0, @storage_array_index_access_t_array$_t_string_storage_$dyn_storage, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r3\n\tadd\tstack-[3], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r3, r2\n\tjump.le\t@.BB26_4\n\tnear_call\tr0, @convert_array_t_string_storage_to_t_string_memory_ptr, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r3\n\tadd\tstack-[4], r0, r5\n\tshl.s\t5, r5, r2\n\tadd\tstack-[1], r0, r4\n\tadd\tr4, r2, r2\n\tst.1\tr2, r1\n\tadd\t1, r5, r1\n\tld.1\tr3, r2\n\tsub!\tr2, r5, r2\n\tadd\tr1, r0, r2\n\tjump.gt\t@.BB26_1\n.BB26_4:\n\tadd\t@CPI26_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB26_2:\n\tadd\tr3, r0, r1\n\tret\n.func_end26:\n\n__farcall:\n.func_begin27:\n.tmp0:\n\tfar_call\tr1, r2, @.BB27_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB27_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end27:\n\n__staticcall:\n.func_begin28:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB28_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB28_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end28:\n\n\t.data\n\t.p2align\t5\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\nCPI2_0:\nCPI15_0:\nCPI21_3:\nCPI22_4:\nCPI24_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261347274288845081144962207220498432\nCPI0_2:\n\t.cell 3889966848\nCPI0_3:\n\t.cell 2355388027\nCPI0_4:\n\t.cell 2610082929\nCPI0_5:\n\t.cell 3028414799\nCPI0_6:\n\t.cell 3352728754\nCPI0_7:\n\t.cell 3696045500\nCPI0_8:\n\t.cell 3838832476\nCPI0_9:\n\t.cell 471478210\nCPI1_1:\nCPI15_1:\nCPI21_4:\nCPI22_5:\nCPI24_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI4_0:\nCPI7_0:\nCPI8_0:\nCPI9_0:\nCPI10_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI6_0:\nCPI8_1:\nCPI10_1:\nCPI18_0:\nCPI21_2:\nCPI23_1:\n\t.cell 18446744073709551615\nCPI6_1:\nCPI7_2:\nCPI12_0:\nCPI13_1:\nCPI14_1:\nCPI16_1:\nCPI17_0:\nCPI18_1:\nCPI19_0:\nCPI21_1:\nCPI22_1:\nCPI23_2:\nCPI26_0:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI7_1:\nCPI13_0:\nCPI14_0:\nCPI16_0:\nCPI21_0:\nCPI22_0:\nCPI23_0:\n\t.cell 18446744073709551616\nCPI9_1:\nCPI22_3:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI15_2:\nCPI21_5:\n\t.cell 2359171832497488308566583039230598432920310142807157606017675708463981604482\nCPI21_6:\nCPI24_2:\n\t.cell -30506184069872588939641675670792961235775538602014224903270929172308938277888\nCPI22_2:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI22_6:\n\t.cell 25306374910699740966389718991448819673365803839612186998943952333161732927533\n","bytecode":{"object":""},"methodIdentifiers":{"addEligibleVoter(address)":"dc4d2dbc","getHashedIDs()":"b481f14f","getLRSGroup()":"8c645e7b","getLRSPKs(bytes)":"e7dc2f00","getVoterIDs()":"1c1a2fc2","storeHashedID(string)":"c7d694b2","storeHashedIDAndPK(bytes,string)":"e4cfef5c","storeLRSPK(bytes,string)":"9b92b471"}},"irOptimized":"/// @use-src 0:\"contracts/Register.sol\"\nobject \"Register_248\" {\n    code {\n        /// @src 0:56:2132  \"contract Register {...\"\n        mstore(64, memoryguard(128))\n        if callvalue()\n        {\n            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        }\n        constructor_Register_248()\n        let _1 := allocate_unbounded()\n        codecopy(_1, dataoffset(\"Register_248_deployed\"), datasize(\"Register_248_deployed\"))\n        return(_1, datasize(\"Register_248_deployed\"))\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        /// @ast-id 32 @src 0:473:495  \"constructor() {...\"\n        function constructor_Register_248()\n        { }\n    }\n    /// @use-src 0:\"contracts/Register.sol\"\n    object \"Register_248_deployed\" {\n        code {\n            /// @src 0:56:2132  \"contract Register {...\"\n            mstore(64, memoryguard(128))\n            if iszero(lt(calldatasize(), 4))\n            {\n                let selector := shift_right_224_unsigned(calldataload(0))\n                switch selector\n                case 0x1c1a2fc2 {\n                    external_fun_getVoterIDs_179()\n                }\n                case 0x8c645e7b {\n                    external_fun_getLRSGroup_247()\n                }\n                case 0x9b92b471 { external_fun_storeLRSPK_196() }\n                case 0xb481f14f {\n                    external_fun_getHashedIDs_87()\n                }\n                case 0xc7d694b2 {\n                    external_fun_storeHashedID_47()\n                }\n                case 0xdc4d2dbc {\n                    external_fun_addEligibleVoter_134()\n                }\n                case 0xe4cfef5c {\n                    external_fun_storeHashedIDAndPK_119()\n                }\n                case 0xe7dc2f00 { external_fun_getLRSPKs_210() }\n                default { }\n            }\n            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            function shift_right_224_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode_tuple_(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function array_length_t_bytes_memory_ptr(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function round_up_to_mul_of_32(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_t_bytes_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of_32(length))\n            }\n            function abi_encodeUpdatedPos_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value0, pos)\n            }\n            function array_nextElement_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(value, pos) -> end\n            {\n                let length := array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n                let headStart := pos\n                let tail := add(pos, mul(length, 0x20))\n                let baseRef := array_dataslot_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value)\n                let srcPtr := baseRef\n                for { let i := 0 } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, sub(tail, headStart))\n                    let elementValue0 := mload(srcPtr)\n                    tail := abi_encodeUpdatedPos_t_bytes_memory_ptr_to_t_bytes_memory_ptr(elementValue0, tail)\n                    srcPtr := array_nextElement_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(srcPtr)\n                    pos := add(pos, 0x20)\n                }\n                pos := tail\n                end := pos\n            }\n            function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(value0, tail)\n            }\n            function external_fun_getVoterIDs_179()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode_tuple_(4, calldatasize())\n                let ret_0 := fun_getVoterIDs_179()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack(memPos, ret_0)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function array_length_t_string_memory_ptr(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_t_string_memory_ptr(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_t_string_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_string_memory_ptr(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of_32(length))\n            }\n            function abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(value0, pos)\n            }\n            function array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(value, pos) -> end\n            {\n                let length := array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n                let headStart := pos\n                let tail := add(pos, mul(length, 0x20))\n                let baseRef := array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr(value)\n                let srcPtr := baseRef\n                for { let i := 0 } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, sub(tail, headStart))\n                    let elementValue0 := mload(srcPtr)\n                    tail := abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr(elementValue0, tail)\n                    srcPtr := array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr(srcPtr)\n                    pos := add(pos, 0x20)\n                }\n                pos := tail\n                end := pos\n            }\n            function abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(value0, tail)\n            }\n            function external_fun_getLRSGroup_247()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode_tuple_(4, calldatasize())\n                let ret_0 := fun_getLRSGroup_247()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack(memPos, ret_0)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            { revert(0, 0) }\n            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            { revert(0, 0) }\n            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n            { revert(0, 0) }\n            function panic_error_0x41()\n            {\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_t_bytes_memory_ptr(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of_32(length)\n                size := add(size, 0x20)\n            }\n            function copy_calldata_to_memory_with_cleanup(src, dst, length)\n            {\n                calldatacopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function abi_decode_t_bytes_memory_ptr(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                let length := calldataload(offset)\n                array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n            }\n            function array_allocation_size_t_string_memory_ptr(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of_32(length)\n                size := add(size, 0x20)\n            }\n            function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function abi_decode_t_string_memory_ptr(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                let length := calldataload(offset)\n                array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n            }\n            function abi_decode_tuple_t_bytes_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                {\n                    let offset := calldataload(add(headStart, 0))\n                    if gt(offset, 0xffffffffffffffff)\n                    {\n                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    }\n                    value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n                }\n                {\n                    let offset := calldataload(add(headStart, 32))\n                    if gt(offset, 0xffffffffffffffff)\n                    {\n                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    }\n                    value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n                }\n            }\n            function abi_encode_tuple__to__fromStack(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_storeLRSPK_196()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0, param_1 := abi_decode_tuple_t_bytes_memory_ptrt_string_memory_ptr(4, calldatasize())\n                fun_storeLRSPK_196(param_0, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple__to__fromStack(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_getHashedIDs_87()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode_tuple_(4, calldatasize())\n                let ret_0 := fun_getHashedIDs_87()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack(memPos, ret_0)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                {\n                    let offset := calldataload(add(headStart, 0))\n                    if gt(offset, 0xffffffffffffffff)\n                    {\n                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    }\n                    value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n                }\n            }\n            function external_fun_storeHashedID_47()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0 := abi_decode_tuple_t_string_memory_ptr(4, calldatasize())\n                fun_storeHashedID_47(param_0)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple__to__fromStack(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_t_uint160(value) -> cleaned\n            {\n                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n            function cleanup_t_address(value) -> cleaned\n            {\n                cleaned := cleanup_t_uint160(value)\n            }\n            function validator_revert_t_address(value)\n            {\n                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_t_address(value)\n            }\n            function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                {\n                    let offset := 0\n                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n                }\n            }\n            function external_fun_addEligibleVoter_134()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0 := abi_decode_tuple_t_address(4, calldatasize())\n                fun_addEligibleVoter_134(param_0)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple__to__fromStack(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_storeHashedIDAndPK_119()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0, param_1 := abi_decode_tuple_t_bytes_memory_ptrt_string_memory_ptr(4, calldatasize())\n                fun_storeHashedIDAndPK_119(param_0, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple__to__fromStack(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                {\n                    let offset := calldataload(add(headStart, 0))\n                    if gt(offset, 0xffffffffffffffff)\n                    {\n                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    }\n                    value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n                }\n            }\n            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end\n            {\n                let length := array_length_t_string_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of_32(length))\n            }\n            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0, tail)\n            }\n            function external_fun_getLRSPKs_210()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0 := abi_decode_tuple_t_bytes_memory_ptr(4, calldatasize())\n                let ret_0 := fun_getLRSPKs_210(param_0)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function convert_array_t_array$_t_string_storage_$dyn_storage_to_t_array$_t_string_storage_$dyn_storage_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_t_array$_t_string_storage_$dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_t_array$_t_string_storage_$dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function array_dataslot_t_bytes_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function long_byte_array_index_access_no_checks(array, index) -> slot, offset\n            {\n                offset := sub(31, mod(index, 0x20))\n                let dataArea := array_dataslot_t_bytes_storage_ptr(array)\n                slot := add(dataArea, div(index, 0x20))\n            }\n            function storage_array_index_access_t_array$_t_string_storage_$dyn_storage_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_t_array$_t_string_storage_$dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_t_array$_t_string_storage_$dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function panic_error_0x00()\n            {\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n                mstore(4, 0x00)\n                revert(0, 0x24)\n            }\n            function panic_error_0x22()\n            {\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := div(data, 2)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n            }\n            function array_dataslot_t_string_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function divide_by_32_ceil(value) -> result\n            {\n                result := div(add(value, 31), 32)\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function cleanup_t_uint256(value) -> cleaned\n            { cleaned := value }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_t_uint256_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n            }\n            function prepare_store_t_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0)\n            {\n                let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n            }\n            function zero_value_for_split_t_uint256() -> ret\n            { ret := 0 }\n            function storage_set_to_zero_t_uint256(slot, offset)\n            {\n                let zero_0 := zero_value_for_split_t_uint256()\n                update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n            }\n            function clear_storage_range_t_bytes1(start, end)\n            {\n                for { } lt(start, end) { start := add(start, 1) }\n                {\n                    storage_set_to_zero_t_uint256(start, 0)\n                }\n            }\n            function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let dataArea := array_dataslot_t_string_storage(array)\n                    let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n                    if lt(startIndex, 32) { deleteStart := dataArea }\n                    clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function mask_bytes_dynamic(data, bytes) -> result\n            {\n                let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n                result := and(data, mask)\n            }\n            function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n            {\n                data := mask_bytes_dynamic(data, len)\n                used := or(data, mul(2, len))\n            }\n            function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n            {\n                let newLen := array_length_t_string_memory_ptr(src)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let oldLen := extract_byte_array_length(sload(slot))\n                clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n                let srcOffset := 0\n                srcOffset := 0x20\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(0x1f))\n                    let dstPtr := array_dataslot_t_string_storage(slot)\n                    let i := 0\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, mload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 32)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(src, srcOffset))\n                        sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                    }\n                    sstore(slot, add(mul(newLen, 2), 1))\n                }\n                default {\n                    let value := 0\n                    if newLen\n                    {\n                        value := mload(add(src, srcOffset))\n                    }\n                    sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            function update_storage_value_t_string_memory_ptr_to_t_string_storage(slot, offset, value_0)\n            {\n                if offset { panic_error_0x00() }\n                copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, value_0)\n            }\n            function array_push_from_t_string_memory_ptr_to_t_array$_t_string_storage_$dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_t_array$_t_string_storage_$dyn_storage_ptr(array, oldLen)\n                update_storage_value_t_string_memory_ptr_to_t_string_storage(slot, offset, value0)\n            }\n            /// @ast-id 47 @src 0:501:631  \"function storeHashedID(string memory _hashedID) external {...\"\n            function fun_storeHashedID_47(var__hashedID_34_mpos)\n            {\n                /// @src 0:568:577  \"hashedIDs\"\n                let _1_slot := 0x03\n                let expr_37_slot := _1_slot\n                /// @src 0:568:582  \"hashedIDs.push\"\n                let expr_39_self_slot := convert_array_t_array$_t_string_storage_$dyn_storage_to_t_array$_t_string_storage_$dyn_storage_ptr(expr_37_slot)\n                /// @src 0:583:592  \"_hashedID\"\n                let _2_mpos := var__hashedID_34_mpos\n                let expr_40_mpos := _2_mpos\n                /// @src 0:568:593  \"hashedIDs.push(_hashedID)\"\n                array_push_from_t_string_memory_ptr_to_t_array$_t_string_storage_$dyn_storage_ptr(expr_39_self_slot, expr_40_mpos)\n                /// @src 0:608:624  \"HashedIDStored()\"\n                let _3 := 0x05373e72b75e419b54c42d3c3a8b5fa03e10c0ea3375b2d3aa692ade48bd2e82\n                {\n                    let _4 := allocate_unbounded()\n                    let _5 := abi_encode_tuple__to__fromStack(_4)\n                    log1(_4, sub(_5, _4), _3)\n                }\n            }\n            /// @src 0:56:2132  \"contract Register {...\"\n            function zero_value_for_split_t_array$_t_string_memory_ptr_$dyn_memory_ptr() -> ret\n            { ret := 96 }\n            function array_length_t_array$_t_string_storage_$dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_allocation_size_t_array$_t_string_memory_ptr_$dyn_memory_ptr(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_t_array$_t_string_memory_ptr_$dyn_memory_ptr(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_t_array$_t_string_memory_ptr_$dyn_memory_ptr(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_t_string_memory_ptr() -> ret\n            { ret := 96 }\n            function zero_complex_memory_array_t_array$_t_string_memory_ptr_$dyn_memory_ptr(dataStart, dataSizeInBytes)\n            {\n                for { let i := 0 } lt(i, dataSizeInBytes) { i := add(i, 32) }\n                {\n                    mstore(add(dataStart, i), zero_value_for_t_string_memory_ptr())\n                }\n            }\n            function allocate_and_zero_memory_array_t_array$_t_string_memory_ptr_$dyn_memory_ptr(length) -> memPtr\n            {\n                memPtr := allocate_memory_array_t_array$_t_string_memory_ptr_$dyn_memory_ptr(length)\n                let dataStart := memPtr\n                let dataSize := array_allocation_size_t_array$_t_string_memory_ptr_$dyn_memory_ptr(length)\n                dataStart := add(dataStart, 32)\n                dataSize := sub(dataSize, 32)\n                zero_complex_memory_array_t_array$_t_string_memory_ptr_$dyn_memory_ptr(dataStart, dataSize)\n            }\n            function cleanup_t_rational_0_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function increment_t_uint256(value) -> ret\n            {\n                value := cleanup_t_uint256(value)\n                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n                ret := add(value, 1)\n            }\n            function array_dataslot_t_array$_t_string_storage_$dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_t_array$_t_string_storage_$dyn_storage(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_t_array$_t_string_storage_$dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_t_array$_t_string_storage_$dyn_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function memory_array_index_access_t_array$_t_string_memory_ptr_$dyn_memory_ptr(baseRef, index) -> addr\n            {\n                if iszero(lt(index, array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr(baseRef))) { panic_error_0x32() }\n                let offset := mul(index, 32)\n                offset := add(offset, 32)\n                addr := add(baseRef, offset)\n            }\n            function abi_encode_t_string_storage_to_t_string_memory_ptr(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_t_string_memory_ptr(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(0x20, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_t_string_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, i)\n                }\n            }\n            function abi_encodeUpdatedPos_t_string_storage_to_t_string_memory_ptr(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_t_string_storage_to_t_string_memory_ptr(value0, pos)\n            }\n            function copy_array_from_storage_to_memory_t_string_storage(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_t_string_storage_to_t_string_memory_ptr(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function convert_array_t_string_storage_to_t_string_memory_ptr(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_t_string_storage(value)\n            }\n            /// @ast-id 87 @src 0:637:904  \"function getHashedIDs() external view returns (string[] memory _hashedIDs) {...\"\n            function fun_getHashedIDs_87() -> var__hashedIDs_51_mpos\n            {\n                /// @src 0:684:710  \"string[] memory _hashedIDs\"\n                let zero_t_array$_t_string_memory_ptr_$dyn_memory_ptr_6_mpos := zero_value_for_split_t_array$_t_string_memory_ptr_$dyn_memory_ptr()\n                var__hashedIDs_51_mpos := zero_t_array$_t_string_memory_ptr_$dyn_memory_ptr_6_mpos\n                /// @src 0:739:748  \"hashedIDs\"\n                let _7_slot := 0x03\n                let expr_55_slot := _7_slot\n                /// @src 0:739:755  \"hashedIDs.length\"\n                let expr_56 := array_length_t_array$_t_string_storage_$dyn_storage(expr_55_slot)\n                /// @src 0:722:755  \"uint256 length = hashedIDs.length\"\n                let var_length_54 := expr_56\n                /// @src 0:791:797  \"length\"\n                let _8 := var_length_54\n                let expr_62 := _8\n                /// @src 0:778:798  \"new string[](length)\"\n                let expr_63_mpos := allocate_and_zero_memory_array_t_array$_t_string_memory_ptr_$dyn_memory_ptr(expr_62)\n                /// @src 0:765:798  \"_hashedIDs = new string[](length)\"\n                var__hashedIDs_51_mpos := expr_63_mpos\n                let _9_mpos := var__hashedIDs_51_mpos\n                let expr_64_mpos := _9_mpos\n                /// @src 0:808:898  \"for (uint256 i = 0; i < length; i++) {...\"\n                for {\n                    /// @src 0:825:826  \"0\"\n                    let expr_68 := 0x00\n                    /// @src 0:813:826  \"uint256 i = 0\"\n                    let var_i_67 := convert_t_rational_0_by_1_to_t_uint256(expr_68)\n                }\n                1\n                {\n                    /// @src 0:840:843  \"i++\"\n                    let _11 := var_i_67\n                    let _10 := increment_t_uint256(_11)\n                    var_i_67 := _10\n                    let expr_74 := _11\n                }\n                {\n                    /// @src 0:828:829  \"i\"\n                    let _12 := var_i_67\n                    let expr_70 := _12\n                    /// @src 0:832:838  \"length\"\n                    let _13 := var_length_54\n                    let expr_71 := _13\n                    /// @src 0:828:838  \"i < length\"\n                    let expr_72 := lt(cleanup_t_uint256(expr_70), cleanup_t_uint256(expr_71))\n                    if iszero(expr_72) { break }\n                    /// @src 0:875:884  \"hashedIDs\"\n                    let _14_slot := 0x03\n                    let expr_79_slot := _14_slot\n                    /// @src 0:885:886  \"i\"\n                    let _15 := var_i_67\n                    let expr_80 := _15\n                    /// @src 0:875:887  \"hashedIDs[i]\"\n                    let _16, _17 := storage_array_index_access_t_array$_t_string_storage_$dyn_storage(expr_79_slot, expr_80)\n                    let _18_slot := _16\n                    let expr_81_slot := _18_slot\n                    /// @src 0:859:869  \"_hashedIDs\"\n                    let _19_mpos := var__hashedIDs_51_mpos\n                    let expr_76_mpos := _19_mpos\n                    /// @src 0:870:871  \"i\"\n                    let _20 := var_i_67\n                    let expr_77 := _20\n                    /// @src 0:859:887  \"_hashedIDs[i] = hashedIDs[i]\"\n                    mstore(memory_array_index_access_t_array$_t_string_memory_ptr_$dyn_memory_ptr(expr_76_mpos, expr_77), convert_array_t_string_storage_to_t_string_memory_ptr(expr_81_slot))\n                    let _21_mpos := mload(memory_array_index_access_t_array$_t_string_memory_ptr_$dyn_memory_ptr(expr_76_mpos, expr_77))\n                    let expr_82_mpos := _21_mpos\n                }\n            }\n            /// @src 0:56:2132  \"contract Register {...\"\n            function convert_array_t_array$_t_bytes_storage_$dyn_storage_to_t_array$_t_bytes_storage_$dyn_storage_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_t_array$_t_bytes_storage_$dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_t_array$_t_bytes_storage_$dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_t_array$_t_bytes_storage_$dyn_storage_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_t_array$_t_bytes_storage_$dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_t_array$_t_bytes_storage_$dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function array_dataslot_t_bytes_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function clean_up_bytearray_end_slots_t_bytes_storage(array, len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let dataArea := array_dataslot_t_bytes_storage(array)\n                    let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n                    if lt(startIndex, 32) { deleteStart := dataArea }\n                    clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n                }\n            }\n            function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n            {\n                let newLen := array_length_t_bytes_memory_ptr(src)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let oldLen := extract_byte_array_length(sload(slot))\n                clean_up_bytearray_end_slots_t_bytes_storage(slot, oldLen, newLen)\n                let srcOffset := 0\n                srcOffset := 0x20\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(0x1f))\n                    let dstPtr := array_dataslot_t_bytes_storage(slot)\n                    let i := 0\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, mload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 32)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(src, srcOffset))\n                        sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                    }\n                    sstore(slot, add(mul(newLen, 2), 1))\n                }\n                default {\n                    let value := 0\n                    if newLen\n                    {\n                        value := mload(add(src, srcOffset))\n                    }\n                    sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            function update_storage_value_t_bytes_memory_ptr_to_t_bytes_storage(slot, offset, value_0)\n            {\n                if offset { panic_error_0x00() }\n                copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, value_0)\n            }\n            function array_push_from_t_bytes_memory_ptr_to_t_array$_t_bytes_storage_$dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_t_array$_t_bytes_storage_$dyn_storage_ptr(array, oldLen)\n                update_storage_value_t_bytes_memory_ptr_to_t_bytes_storage(slot, offset, value0)\n            }\n            function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end\n            {\n                let length := array_length_t_bytes_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, length)\n            }\n            function leftAlign_t_uint256(value) -> aligned\n            { aligned := value }\n            function abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value, pos)\n            {\n                mstore(pos, leftAlign_t_uint256(cleanup_t_uint256(value)))\n            }\n            function abi_encode_tuple_packed_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__nonPadded_inplace_fromStack(pos, value0, value1) -> end\n            {\n                pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0, pos)\n                abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value1, pos)\n                pos := add(pos, 32)\n                end := pos\n            }\n            function packed_hashed_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256_(var_1, var_2) -> hash\n            {\n                let pos := allocate_unbounded()\n                let end := abi_encode_tuple_packed_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__nonPadded_inplace_fromStack(pos, var_1, var_2)\n                hash := keccak256(pos, sub(end, pos))\n            }\n            function mapping_index_access_t_mapping$_t_bytes_memory_ptr_$_t_string_storage_$_of_t_bytes_memory_ptr(slot, key_0) -> dataSlot\n            {\n                dataSlot := packed_hashed_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256_(key_0, slot)\n            }\n            function update_storage_value_offset_0t_string_memory_ptr_to_t_string_storage(slot, value_0)\n            {\n                copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, value_0)\n            }\n            /// @ast-id 119 @src 0:910:1180  \"function storeHashedIDAndPK(bytes memory _hashedID, string memory _publicKey) external {...\"\n            function fun_storeHashedIDAndPK_119(var__hashedID_89_mpos, var__publicKey_91_mpos)\n            {\n                /// @src 0:1007:1021  \"hashedVoterIDs\"\n                let _22_slot := 0x01\n                let expr_94_slot := _22_slot\n                /// @src 0:1007:1026  \"hashedVoterIDs.push\"\n                let expr_96_self_slot := convert_array_t_array$_t_bytes_storage_$dyn_storage_to_t_array$_t_bytes_storage_$dyn_storage_ptr(expr_94_slot)\n                /// @src 0:1027:1036  \"_hashedID\"\n                let _23_mpos := var__hashedID_89_mpos\n                let expr_97_mpos := _23_mpos\n                /// @src 0:1007:1037  \"hashedVoterIDs.push(_hashedID)\"\n                array_push_from_t_bytes_memory_ptr_to_t_array$_t_bytes_storage_$dyn_storage_ptr(expr_96_self_slot, expr_97_mpos)\n                /// @src 0:1074:1084  \"_publicKey\"\n                let _24_mpos := var__publicKey_91_mpos\n                let expr_103_mpos := _24_mpos\n                /// @src 0:1047:1060  \"lrsPublicKeys\"\n                let _25_slot := 0x04\n                let expr_100_slot := _25_slot\n                /// @src 0:1061:1070  \"_hashedID\"\n                let _26_mpos := var__hashedID_89_mpos\n                let expr_101_mpos := _26_mpos\n                /// @src 0:1047:1071  \"lrsPublicKeys[_hashedID]\"\n                let _27 := mapping_index_access_t_mapping$_t_bytes_memory_ptr_$_t_string_storage_$_of_t_bytes_memory_ptr(expr_100_slot, expr_101_mpos)\n                /// @src 0:1047:1084  \"lrsPublicKeys[_hashedID] = _publicKey\"\n                update_storage_value_offset_0t_string_memory_ptr_to_t_string_storage(_27, expr_103_mpos)\n                let _28_slot := _27\n                let expr_104_slot := _28_slot\n                /// @src 0:1094:1097  \"lrs\"\n                let _29_slot := 0x02\n                let expr_106_slot := _29_slot\n                /// @src 0:1094:1102  \"lrs.push\"\n                let expr_108_self_slot := convert_array_t_array$_t_string_storage_$dyn_storage_to_t_array$_t_string_storage_$dyn_storage_ptr(expr_106_slot)\n                /// @src 0:1103:1113  \"_publicKey\"\n                let _30_mpos := var__publicKey_91_mpos\n                let expr_109_mpos := _30_mpos\n                /// @src 0:1094:1114  \"lrs.push(_publicKey)\"\n                array_push_from_t_string_memory_ptr_to_t_array$_t_string_storage_$dyn_storage_ptr(expr_108_self_slot, expr_109_mpos)\n                /// @src 0:1129:1145  \"HashedIDStored()\"\n                let _31 := 0x05373e72b75e419b54c42d3c3a8b5fa03e10c0ea3375b2d3aa692ade48bd2e82\n                {\n                    let _32 := allocate_unbounded()\n                    let _33 := abi_encode_tuple__to__fromStack(_32)\n                    log1(_32, sub(_33, _32), _31)\n                }\n                /// @src 0:1160:1173  \"LRSPKStored()\"\n                let _34 := 0xbc8e1c9823e80d9d9c77956951be8321234bbdc3da9d36c27af050365cc2bc00\n                {\n                    let _35 := allocate_unbounded()\n                    let _36 := abi_encode_tuple__to__fromStack(_35)\n                    log1(_35, sub(_36, _35), _34)\n                }\n            }\n            /// @src 0:56:2132  \"contract Register {...\"\n            function convert_array_t_array$_t_address_$dyn_storage_to_t_array$_t_address_$dyn_storage_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_t_array$_t_address_$dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_t_array$_t_address_$dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_t_array$_t_address_$dyn_storage_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_t_array$_t_address_$dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_t_array$_t_address_$dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function update_byte_slice_dynamic20(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffff)\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_t_uint160_to_t_uint160(value) -> converted\n            {\n                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n            }\n            function convert_t_uint160_to_t_address(value) -> converted\n            {\n                converted := convert_t_uint160_to_t_uint160(value)\n            }\n            function convert_t_address_to_t_address(value) -> converted\n            {\n                converted := convert_t_uint160_to_t_address(value)\n            }\n            function prepare_store_t_address(value) -> ret\n            { ret := value }\n            function update_storage_value_t_address_to_t_address(slot, offset, value_0)\n            {\n                let convertedValue_0 := convert_t_address_to_t_address(value_0)\n                sstore(slot, update_byte_slice_dynamic20(sload(slot), offset, prepare_store_t_address(convertedValue_0)))\n            }\n            function array_push_from_t_address_to_t_array$_t_address_$dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_t_array$_t_address_$dyn_storage_ptr(array, oldLen)\n                update_storage_value_t_address_to_t_address(slot, offset, value0)\n            }\n            /// @ast-id 134 @src 0:1186:1308  \"function addEligibleVoter(address _voter) external {...\"\n            function fun_addEligibleVoter_134(var__voter_121)\n            {\n                /// @src 0:1247:1261  \"eligibleVoters\"\n                let _37_slot := 0x00\n                let expr_124_slot := _37_slot\n                /// @src 0:1247:1266  \"eligibleVoters.push\"\n                let expr_126_self_slot := convert_array_t_array$_t_address_$dyn_storage_to_t_array$_t_address_$dyn_storage_ptr(expr_124_slot)\n                /// @src 0:1267:1273  \"_voter\"\n                let _38 := var__voter_121\n                let expr_127 := _38\n                /// @src 0:1247:1274  \"eligibleVoters.push(_voter)\"\n                array_push_from_t_address_to_t_array$_t_address_$dyn_storage_ptr(expr_126_self_slot, expr_127)\n                /// @src 0:1289:1301  \"VoterAdded()\"\n                let _39 := 0x37f2e68eb4253d5e5ca8b87be4331e07a5704b7873bf488b6e152cc5dc06702d\n                {\n                    let _40 := allocate_unbounded()\n                    let _41 := abi_encode_tuple__to__fromStack(_40)\n                    log1(_40, sub(_41, _40), _39)\n                }\n            }\n            /// @src 0:56:2132  \"contract Register {...\"\n            function zero_value_for_split_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr() -> ret\n            { ret := 96 }\n            function array_length_t_array$_t_bytes_storage_$dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_t_bytes_memory_ptr() -> ret\n            { ret := 96 }\n            function zero_complex_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(dataStart, dataSizeInBytes)\n            {\n                for { let i := 0 } lt(i, dataSizeInBytes) { i := add(i, 32) }\n                {\n                    mstore(add(dataStart, i), zero_value_for_t_bytes_memory_ptr())\n                }\n            }\n            function allocate_and_zero_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length) -> memPtr\n            {\n                memPtr := allocate_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length)\n                let dataStart := memPtr\n                let dataSize := array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length)\n                dataStart := add(dataStart, 32)\n                dataSize := sub(dataSize, 32)\n                zero_complex_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(dataStart, dataSize)\n            }\n            function array_dataslot_t_array$_t_bytes_storage_$dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_t_array$_t_bytes_storage_$dyn_storage(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_t_array$_t_bytes_storage_$dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_t_array$_t_bytes_storage_$dyn_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(baseRef, index) -> addr\n            {\n                if iszero(lt(index, array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(baseRef))) { panic_error_0x32() }\n                let offset := mul(index, 32)\n                offset := add(offset, 32)\n                addr := add(baseRef, offset)\n            }\n            function abi_encode_t_bytes_storage_to_t_bytes_memory_ptr(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(0x20, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_t_bytes_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, i)\n                }\n            }\n            function abi_encodeUpdatedPos_t_bytes_storage_to_t_bytes_memory_ptr(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_t_bytes_storage_to_t_bytes_memory_ptr(value0, pos)\n            }\n            function copy_array_from_storage_to_memory_t_bytes_storage(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_t_bytes_storage_to_t_bytes_memory_ptr(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function convert_array_t_bytes_storage_to_t_bytes_memory_ptr(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_t_bytes_storage(value)\n            }\n            /// @ast-id 179 @src 0:1314:1615  \"function getVoterIDs() external view returns(bytes[] memory) {...\"\n            function fun_getVoterIDs_179() -> var__138_mpos\n            {\n                /// @src 0:1359:1373  \"bytes[] memory\"\n                let zero_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_42_mpos := zero_value_for_split_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr()\n                var__138_mpos := zero_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_42_mpos\n                /// @src 0:1402:1416  \"hashedVoterIDs\"\n                let _43_slot := 0x01\n                let expr_142_slot := _43_slot\n                /// @src 0:1402:1423  \"hashedVoterIDs.length\"\n                let expr_143 := array_length_t_array$_t_bytes_storage_$dyn_storage(expr_142_slot)\n                /// @src 0:1385:1423  \"uint256 length = hashedVoterIDs.length\"\n                let var_length_141 := expr_143\n                /// @src 0:1472:1478  \"length\"\n                let _44 := var_length_141\n                let expr_153 := _44\n                /// @src 0:1460:1479  \"new bytes[](length)\"\n                let expr_154_mpos := allocate_and_zero_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_153)\n                /// @src 0:1433:1479  \"bytes[] memory _voterIDs = new bytes[](length)\"\n                let var__voterIDs_149_mpos := expr_154_mpos\n                /// @src 0:1489:1583  \"for (uint256 i = 0; i < length; i++) {...\"\n                for {\n                    /// @src 0:1506:1507  \"0\"\n                    let expr_158 := 0x00\n                    /// @src 0:1494:1507  \"uint256 i = 0\"\n                    let var_i_157 := convert_t_rational_0_by_1_to_t_uint256(expr_158)\n                }\n                1\n                {\n                    /// @src 0:1521:1524  \"i++\"\n                    let _46 := var_i_157\n                    let _45 := increment_t_uint256(_46)\n                    var_i_157 := _45\n                    let expr_164 := _46\n                }\n                {\n                    /// @src 0:1509:1510  \"i\"\n                    let _47 := var_i_157\n                    let expr_160 := _47\n                    /// @src 0:1513:1519  \"length\"\n                    let _48 := var_length_141\n                    let expr_161 := _48\n                    /// @src 0:1509:1519  \"i < length\"\n                    let expr_162 := lt(cleanup_t_uint256(expr_160), cleanup_t_uint256(expr_161))\n                    if iszero(expr_162) { break }\n                    /// @src 0:1555:1569  \"hashedVoterIDs\"\n                    let _49_slot := 0x01\n                    let expr_169_slot := _49_slot\n                    /// @src 0:1570:1571  \"i\"\n                    let _50 := var_i_157\n                    let expr_170 := _50\n                    /// @src 0:1555:1572  \"hashedVoterIDs[i]\"\n                    let _51, _52 := storage_array_index_access_t_array$_t_bytes_storage_$dyn_storage(expr_169_slot, expr_170)\n                    let _53_slot := _51\n                    let expr_171_slot := _53_slot\n                    /// @src 0:1540:1549  \"_voterIDs\"\n                    let _54_mpos := var__voterIDs_149_mpos\n                    let expr_166_mpos := _54_mpos\n                    /// @src 0:1550:1551  \"i\"\n                    let _55 := var_i_157\n                    let expr_167 := _55\n                    /// @src 0:1540:1572  \"_voterIDs[i] = hashedVoterIDs[i]\"\n                    mstore(memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_166_mpos, expr_167), convert_array_t_bytes_storage_to_t_bytes_memory_ptr(expr_171_slot))\n                    let _56_mpos := mload(memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_166_mpos, expr_167))\n                    let expr_172_mpos := _56_mpos\n                }\n                /// @src 0:1599:1608  \"_voterIDs\"\n                let _57_mpos := var__voterIDs_149_mpos\n                let expr_176_mpos := _57_mpos\n                /// @src 0:1592:1608  \"return _voterIDs\"\n                var__138_mpos := expr_176_mpos\n                leave\n            }\n            /// @ast-id 196 @src 0:1621:1783  \"function storeLRSPK (bytes memory _hashedID, string memory _publicKey) external {...\"\n            function fun_storeLRSPK_196(var__hashedID_181_mpos, var__publicKey_183_mpos)\n            {\n                /// @src 0:1738:1748  \"_publicKey\"\n                let _58_mpos := var__publicKey_183_mpos\n                let expr_189_mpos := _58_mpos\n                /// @src 0:1711:1724  \"lrsPublicKeys\"\n                let _59_slot := 0x04\n                let expr_186_slot := _59_slot\n                /// @src 0:1725:1734  \"_hashedID\"\n                let _60_mpos := var__hashedID_181_mpos\n                let expr_187_mpos := _60_mpos\n                /// @src 0:1711:1735  \"lrsPublicKeys[_hashedID]\"\n                let _61 := mapping_index_access_t_mapping$_t_bytes_memory_ptr_$_t_string_storage_$_of_t_bytes_memory_ptr(expr_186_slot, expr_187_mpos)\n                /// @src 0:1711:1748  \"lrsPublicKeys[_hashedID] = _publicKey\"\n                update_storage_value_offset_0t_string_memory_ptr_to_t_string_storage(_61, expr_189_mpos)\n                let _62_slot := _61\n                let expr_190_slot := _62_slot\n                /// @src 0:1763:1776  \"LRSPKStored()\"\n                let _63 := 0xbc8e1c9823e80d9d9c77956951be8321234bbdc3da9d36c27af050365cc2bc00\n                {\n                    let _64 := allocate_unbounded()\n                    let _65 := abi_encode_tuple__to__fromStack(_64)\n                    log1(_64, sub(_65, _64), _63)\n                }\n            }\n            /// @src 0:56:2132  \"contract Register {...\"\n            function zero_value_for_split_t_string_memory_ptr() -> ret\n            { ret := 96 }\n            /// @ast-id 210 @src 0:1789:1918  \"function getLRSPKs(bytes memory _hashedID) external view returns(string memory pk) {...\"\n            function fun_getLRSPKs_210(var__hashedID_198_mpos) -> var_pk_201_mpos\n            {\n                /// @src 0:1854:1870  \"string memory pk\"\n                let zero_t_string_memory_ptr_66_mpos := zero_value_for_split_t_string_memory_ptr()\n                var_pk_201_mpos := zero_t_string_memory_ptr_66_mpos\n                /// @src 0:1887:1900  \"lrsPublicKeys\"\n                let _67_slot := 0x04\n                let expr_204_slot := _67_slot\n                /// @src 0:1901:1910  \"_hashedID\"\n                let _68_mpos := var__hashedID_198_mpos\n                let expr_205_mpos := _68_mpos\n                /// @src 0:1887:1911  \"lrsPublicKeys[_hashedID]\"\n                let _69 := mapping_index_access_t_mapping$_t_bytes_memory_ptr_$_t_string_storage_$_of_t_bytes_memory_ptr(expr_204_slot, expr_205_mpos)\n                let _70_slot := _69\n                let expr_206_slot := _70_slot\n                /// @src 0:1882:1911  \"pk = lrsPublicKeys[_hashedID]\"\n                var_pk_201_mpos := convert_array_t_string_storage_to_t_string_memory_ptr(expr_206_slot)\n                let _71_mpos := var_pk_201_mpos\n                let expr_207_mpos := _71_mpos\n            }\n            /// @ast-id 247 @src 0:1924:2130  \"function getLRSGroup() external view returns(string[] memory _lrs) {...\"\n            function fun_getLRSGroup_247() -> var__lrs_214_mpos\n            {\n                /// @src 0:1969:1989  \"string[] memory _lrs\"\n                let zero_t_array$_t_string_memory_ptr_$dyn_memory_ptr_72_mpos := zero_value_for_split_t_array$_t_string_memory_ptr_$dyn_memory_ptr()\n                var__lrs_214_mpos := zero_t_array$_t_string_memory_ptr_$dyn_memory_ptr_72_mpos\n                /// @src 0:2021:2024  \"lrs\"\n                let _73_slot := 0x02\n                let expr_220_slot := _73_slot\n                /// @src 0:2021:2031  \"lrs.length\"\n                let expr_221 := array_length_t_array$_t_string_storage_$dyn_storage(expr_220_slot)\n                /// @src 0:2008:2032  \"new string[](lrs.length)\"\n                let expr_222_mpos := allocate_and_zero_memory_array_t_array$_t_string_memory_ptr_$dyn_memory_ptr(expr_221)\n                /// @src 0:2001:2032  \"_lrs = new string[](lrs.length)\"\n                var__lrs_214_mpos := expr_222_mpos\n                let _74_mpos := var__lrs_214_mpos\n                let expr_223_mpos := _74_mpos\n                /// @src 0:2042:2124  \"for (uint256 i = 0; i < lrs.length; i++) {...\"\n                for {\n                    /// @src 0:2059:2060  \"0\"\n                    let expr_227 := 0x00\n                    /// @src 0:2047:2060  \"uint256 i = 0\"\n                    let var_i_226 := convert_t_rational_0_by_1_to_t_uint256(expr_227)\n                }\n                1\n                {\n                    /// @src 0:2078:2081  \"i++\"\n                    let _76 := var_i_226\n                    let _75 := increment_t_uint256(_76)\n                    var_i_226 := _75\n                    let expr_234 := _76\n                }\n                {\n                    /// @src 0:2062:2063  \"i\"\n                    let _77 := var_i_226\n                    let expr_229 := _77\n                    /// @src 0:2066:2069  \"lrs\"\n                    let _78_slot := 0x02\n                    let expr_230_slot := _78_slot\n                    /// @src 0:2066:2076  \"lrs.length\"\n                    let expr_231 := array_length_t_array$_t_string_storage_$dyn_storage(expr_230_slot)\n                    /// @src 0:2062:2076  \"i < lrs.length\"\n                    let expr_232 := lt(cleanup_t_uint256(expr_229), cleanup_t_uint256(expr_231))\n                    if iszero(expr_232) { break }\n                    /// @src 0:2107:2110  \"lrs\"\n                    let _79_slot := 0x02\n                    let expr_239_slot := _79_slot\n                    /// @src 0:2111:2112  \"i\"\n                    let _80 := var_i_226\n                    let expr_240 := _80\n                    /// @src 0:2107:2113  \"lrs[i]\"\n                    let _81, _82 := storage_array_index_access_t_array$_t_string_storage_$dyn_storage(expr_239_slot, expr_240)\n                    let _83_slot := _81\n                    let expr_241_slot := _83_slot\n                    /// @src 0:2097:2101  \"_lrs\"\n                    let _84_mpos := var__lrs_214_mpos\n                    let expr_236_mpos := _84_mpos\n                    /// @src 0:2102:2103  \"i\"\n                    let _85 := var_i_226\n                    let expr_237 := _85\n                    /// @src 0:2097:2113  \"_lrs[i] = lrs[i]\"\n                    mstore(memory_array_index_access_t_array$_t_string_memory_ptr_$dyn_memory_ptr(expr_236_mpos, expr_237), convert_array_t_string_storage_to_t_string_memory_ptr(expr_241_slot))\n                    let _86_mpos := mload(memory_array_index_access_t_array$_t_string_memory_ptr_$dyn_memory_ptr(expr_236_mpos, expr_237))\n                    let expr_242_mpos := _86_mpos\n                }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220dec3ea70f1637dfb1ad2cf37820075f2469e6b4ec974d23c148f4f825d8e6f5a64736f6c63430008110033\"\n    }\n}\n","hash":"0100013f6abe422da0e80d484b0a9c7cd47ea0ab66c5c03c6bc0fd385a11a2ab","factoryDependencies":{}}}}}}