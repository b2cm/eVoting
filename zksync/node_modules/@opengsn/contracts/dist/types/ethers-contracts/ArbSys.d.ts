import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface ArbSysInterface extends utils.Interface {
    functions: {
        "arbBlockNumber()": FunctionFragment;
        "getStorageGasAvailable()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "arbBlockNumber" | "getStorageGasAvailable"): FunctionFragment;
    encodeFunctionData(functionFragment: "arbBlockNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "getStorageGasAvailable", values?: undefined): string;
    decodeFunctionResult(functionFragment: "arbBlockNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStorageGasAvailable", data: BytesLike): Result;
    events: {};
}
export interface ArbSys extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ArbSysInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        /**
         * Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)
         */
        arbBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;
        /**
         * get the caller's amount of available storage gas
         */
        getStorageGasAvailable(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    /**
     * Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)
     */
    arbBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
    /**
     * get the caller's amount of available storage gas
     */
    getStorageGasAvailable(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        /**
         * Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)
         */
        arbBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * get the caller's amount of available storage gas
         */
        getStorageGasAvailable(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        /**
         * Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)
         */
        arbBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * get the caller's amount of available storage gas
         */
        getStorageGasAvailable(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        /**
         * Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)
         */
        arbBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * get the caller's amount of available storage gas
         */
        getStorageGasAvailable(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
