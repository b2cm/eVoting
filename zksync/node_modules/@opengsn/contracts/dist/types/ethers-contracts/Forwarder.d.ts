import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export declare namespace IForwarder {
    type ForwardRequestStruct = {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
        validUntilTime: BigNumberish;
    };
    type ForwardRequestStructOutput = [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
    ] & {
        from: string;
        to: string;
        value: BigNumber;
        gas: BigNumber;
        nonce: BigNumber;
        data: string;
        validUntilTime: BigNumber;
    };
}
export interface ForwarderInterface extends utils.Interface {
    functions: {
        "EIP712_DOMAIN_TYPE()": FunctionFragment;
        "GENERIC_PARAMS()": FunctionFragment;
        "domains(bytes32)": FunctionFragment;
        "typeHashes(bytes32)": FunctionFragment;
        "getNonce(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": FunctionFragment;
        "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": FunctionFragment;
        "registerRequestType(string,string)": FunctionFragment;
        "registerDomainSeparator(string,string)": FunctionFragment;
        "_getEncoded((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "EIP712_DOMAIN_TYPE" | "GENERIC_PARAMS" | "domains" | "typeHashes" | "getNonce" | "supportsInterface" | "verify" | "execute" | "registerRequestType" | "registerDomainSeparator" | "_getEncoded"): FunctionFragment;
    encodeFunctionData(functionFragment: "EIP712_DOMAIN_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "GENERIC_PARAMS", values?: undefined): string;
    encodeFunctionData(functionFragment: "domains", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "typeHashes", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "verify", values: [
        IForwarder.ForwardRequestStruct,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "execute", values: [
        IForwarder.ForwardRequestStruct,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "registerRequestType", values: [string, string]): string;
    encodeFunctionData(functionFragment: "registerDomainSeparator", values: [string, string]): string;
    encodeFunctionData(functionFragment: "_getEncoded", values: [IForwarder.ForwardRequestStruct, BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "EIP712_DOMAIN_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "GENERIC_PARAMS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "domains", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "typeHashes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerRequestType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerDomainSeparator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_getEncoded", data: BytesLike): Result;
    events: {
        "DomainRegistered(bytes32,bytes)": EventFragment;
        "RequestTypeRegistered(bytes32,string)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DomainRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RequestTypeRegistered"): EventFragment;
}
export interface DomainRegisteredEventObject {
    domainSeparator: string;
    domainValue: string;
}
export type DomainRegisteredEvent = TypedEvent<[
    string,
    string
], DomainRegisteredEventObject>;
export type DomainRegisteredEventFilter = TypedEventFilter<DomainRegisteredEvent>;
export interface RequestTypeRegisteredEventObject {
    typeHash: string;
    typeStr: string;
}
export type RequestTypeRegisteredEvent = TypedEvent<[
    string,
    string
], RequestTypeRegisteredEventObject>;
export type RequestTypeRegisteredEventFilter = TypedEventFilter<RequestTypeRegisteredEvent>;
export interface Forwarder extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ForwarderInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<[string]>;
        GENERIC_PARAMS(overrides?: CallOverrides): Promise<[string]>;
        domains(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        /**
         * @param from The address of a sender.
         */
        getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        /**
         * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
         */
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        verify(req: IForwarder.ForwardRequestStruct, domainSeparator: BytesLike, requestTypeHash: BytesLike, suffixData: BytesLike, sig: BytesLike, overrides?: CallOverrides): Promise<[void]>;
        execute(req: IForwarder.ForwardRequestStruct, domainSeparator: BytesLike, requestTypeHash: BytesLike, suffixData: BytesLike, sig: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        /**
         * Register a new Request typehash.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.
         * @param typeName The name of the request type.
         * @param typeSuffix Any extra data after the generic params. Must contain add at least one param. The generic ForwardRequest type is always registered by the constructor.
         */
        registerRequestType(typeName: string, typeSuffix: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        /**
         * Register a new domain separator.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`. The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address. This method accepts the domain name and version to create and register the domain separator value.
         * @param name The domain's display name.
         * @param version The domain/protocol version.
         */
        registerDomainSeparator(name: string, version: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        _getEncoded(req: IForwarder.ForwardRequestStruct, requestTypeHash: BytesLike, suffixData: BytesLike, overrides?: CallOverrides): Promise<[string]>;
    };
    EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<string>;
    GENERIC_PARAMS(overrides?: CallOverrides): Promise<string>;
    domains(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    /**
     * @param from The address of a sender.
     */
    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;
    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    verify(req: IForwarder.ForwardRequestStruct, domainSeparator: BytesLike, requestTypeHash: BytesLike, suffixData: BytesLike, sig: BytesLike, overrides?: CallOverrides): Promise<void>;
    execute(req: IForwarder.ForwardRequestStruct, domainSeparator: BytesLike, requestTypeHash: BytesLike, suffixData: BytesLike, sig: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    /**
     * Register a new Request typehash.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.
     * @param typeName The name of the request type.
     * @param typeSuffix Any extra data after the generic params. Must contain add at least one param. The generic ForwardRequest type is always registered by the constructor.
     */
    registerRequestType(typeName: string, typeSuffix: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    /**
     * Register a new domain separator.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`. The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address. This method accepts the domain name and version to create and register the domain separator value.
     * @param name The domain's display name.
     * @param version The domain/protocol version.
     */
    registerDomainSeparator(name: string, version: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    _getEncoded(req: IForwarder.ForwardRequestStruct, requestTypeHash: BytesLike, suffixData: BytesLike, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<string>;
        GENERIC_PARAMS(overrides?: CallOverrides): Promise<string>;
        domains(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        /**
         * @param from The address of a sender.
         */
        getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
         */
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        verify(req: IForwarder.ForwardRequestStruct, domainSeparator: BytesLike, requestTypeHash: BytesLike, suffixData: BytesLike, sig: BytesLike, overrides?: CallOverrides): Promise<void>;
        execute(req: IForwarder.ForwardRequestStruct, domainSeparator: BytesLike, requestTypeHash: BytesLike, suffixData: BytesLike, sig: BytesLike, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            ret: string;
        }>;
        /**
         * Register a new Request typehash.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.
         * @param typeName The name of the request type.
         * @param typeSuffix Any extra data after the generic params. Must contain add at least one param. The generic ForwardRequest type is always registered by the constructor.
         */
        registerRequestType(typeName: string, typeSuffix: string, overrides?: CallOverrides): Promise<void>;
        /**
         * Register a new domain separator.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`. The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address. This method accepts the domain name and version to create and register the domain separator value.
         * @param name The domain's display name.
         * @param version The domain/protocol version.
         */
        registerDomainSeparator(name: string, version: string, overrides?: CallOverrides): Promise<void>;
        _getEncoded(req: IForwarder.ForwardRequestStruct, requestTypeHash: BytesLike, suffixData: BytesLike, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "DomainRegistered(bytes32,bytes)"(domainSeparator?: BytesLike | null, domainValue?: null): DomainRegisteredEventFilter;
        DomainRegistered(domainSeparator?: BytesLike | null, domainValue?: null): DomainRegisteredEventFilter;
        "RequestTypeRegistered(bytes32,string)"(typeHash?: BytesLike | null, typeStr?: null): RequestTypeRegisteredEventFilter;
        RequestTypeRegistered(typeHash?: BytesLike | null, typeStr?: null): RequestTypeRegisteredEventFilter;
    };
    estimateGas: {
        EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;
        GENERIC_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;
        domains(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * @param from The address of a sender.
         */
        getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
         */
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        verify(req: IForwarder.ForwardRequestStruct, domainSeparator: BytesLike, requestTypeHash: BytesLike, suffixData: BytesLike, sig: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        execute(req: IForwarder.ForwardRequestStruct, domainSeparator: BytesLike, requestTypeHash: BytesLike, suffixData: BytesLike, sig: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        /**
         * Register a new Request typehash.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.
         * @param typeName The name of the request type.
         * @param typeSuffix Any extra data after the generic params. Must contain add at least one param. The generic ForwardRequest type is always registered by the constructor.
         */
        registerRequestType(typeName: string, typeSuffix: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        /**
         * Register a new domain separator.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`. The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address. This method accepts the domain name and version to create and register the domain separator value.
         * @param name The domain's display name.
         * @param version The domain/protocol version.
         */
        registerDomainSeparator(name: string, version: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        _getEncoded(req: IForwarder.ForwardRequestStruct, requestTypeHash: BytesLike, suffixData: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        EIP712_DOMAIN_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        GENERIC_PARAMS(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        domains(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * @param from The address of a sender.
         */
        getNonce(from: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
         */
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(req: IForwarder.ForwardRequestStruct, domainSeparator: BytesLike, requestTypeHash: BytesLike, suffixData: BytesLike, sig: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        execute(req: IForwarder.ForwardRequestStruct, domainSeparator: BytesLike, requestTypeHash: BytesLike, suffixData: BytesLike, sig: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        /**
         * Register a new Request typehash.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.
         * @param typeName The name of the request type.
         * @param typeSuffix Any extra data after the generic params. Must contain add at least one param. The generic ForwardRequest type is always registered by the constructor.
         */
        registerRequestType(typeName: string, typeSuffix: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        /**
         * Register a new domain separator.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`. The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address. This method accepts the domain name and version to create and register the domain separator value.
         * @param name The domain's display name.
         * @param version The domain/protocol version.
         */
        registerDomainSeparator(name: string, version: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        _getEncoded(req: IForwarder.ForwardRequestStruct, requestTypeHash: BytesLike, suffixData: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
