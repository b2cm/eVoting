import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export declare namespace IForwarder {
    type ForwardRequestStruct = {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
        validUntilTime: BigNumberish;
    };
    type ForwardRequestStructOutput = [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
    ] & {
        from: string;
        to: string;
        value: BigNumber;
        gas: BigNumber;
        nonce: BigNumber;
        data: string;
        validUntilTime: BigNumber;
    };
}
export declare namespace GsnTypes {
    type RelayDataStruct = {
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        transactionCalldataGasUsed: BigNumberish;
        relayWorker: string;
        paymaster: string;
        forwarder: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
    };
    type RelayDataStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber
    ] & {
        maxFeePerGas: BigNumber;
        maxPriorityFeePerGas: BigNumber;
        transactionCalldataGasUsed: BigNumber;
        relayWorker: string;
        paymaster: string;
        forwarder: string;
        paymasterData: string;
        clientId: BigNumber;
    };
    type RelayRequestStruct = {
        request: IForwarder.ForwardRequestStruct;
        relayData: GsnTypes.RelayDataStruct;
    };
    type RelayRequestStructOutput = [
        IForwarder.ForwardRequestStructOutput,
        GsnTypes.RelayDataStructOutput
    ] & {
        request: IForwarder.ForwardRequestStructOutput;
        relayData: GsnTypes.RelayDataStructOutput;
    };
}
export interface TestRelayWorkerContractInterface extends utils.Interface {
    functions: {
        "relayCall(address,uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "relayCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "relayCall", values: [string, BigNumberish, GsnTypes.RelayRequestStruct, BytesLike]): string;
    decodeFunctionResult(functionFragment: "relayCall", data: BytesLike): Result;
    events: {};
}
export interface TestRelayWorkerContract extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestRelayWorkerContractInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        relayCall(hub: string, maxAcceptanceBudget: BigNumberish, relayRequest: GsnTypes.RelayRequestStruct, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
    };
    relayCall(hub: string, maxAcceptanceBudget: BigNumberish, relayRequest: GsnTypes.RelayRequestStruct, signature: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    callStatic: {
        relayCall(hub: string, maxAcceptanceBudget: BigNumberish, relayRequest: GsnTypes.RelayRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        relayCall(hub: string, maxAcceptanceBudget: BigNumberish, relayRequest: GsnTypes.RelayRequestStruct, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        relayCall(hub: string, maxAcceptanceBudget: BigNumberish, relayRequest: GsnTypes.RelayRequestStruct, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
    };
}
