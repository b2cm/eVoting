import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export declare namespace GsnTypes {
    type RelayDataStruct = {
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        transactionCalldataGasUsed: BigNumberish;
        relayWorker: string;
        paymaster: string;
        forwarder: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
    };
    type RelayDataStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber
    ] & {
        maxFeePerGas: BigNumber;
        maxPriorityFeePerGas: BigNumber;
        transactionCalldataGasUsed: BigNumber;
        relayWorker: string;
        paymaster: string;
        forwarder: string;
        paymasterData: string;
        clientId: BigNumber;
    };
    type RelayRequestStruct = {
        request: IForwarder.ForwardRequestStruct;
        relayData: GsnTypes.RelayDataStruct;
    };
    type RelayRequestStructOutput = [
        IForwarder.ForwardRequestStructOutput,
        GsnTypes.RelayDataStructOutput
    ] & {
        request: IForwarder.ForwardRequestStructOutput;
        relayData: GsnTypes.RelayDataStructOutput;
    };
}
export declare namespace IForwarder {
    type ForwardRequestStruct = {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
        validUntilTime: BigNumberish;
    };
    type ForwardRequestStructOutput = [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
    ] & {
        from: string;
        to: string;
        value: BigNumber;
        gas: BigNumber;
        nonce: BigNumber;
        data: string;
        validUntilTime: BigNumber;
    };
}
export declare namespace IPaymaster {
    type GasAndDataLimitsStruct = {
        acceptanceBudget: BigNumberish;
        preRelayedCallGasLimit: BigNumberish;
        postRelayedCallGasLimit: BigNumberish;
        calldataSizeLimit: BigNumberish;
    };
    type GasAndDataLimitsStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        acceptanceBudget: BigNumber;
        preRelayedCallGasLimit: BigNumber;
        postRelayedCallGasLimit: BigNumber;
        calldataSizeLimit: BigNumber;
    };
}
export interface TestPaymasterConfigurableMisbehaviorInterface extends utils.Interface {
    functions: {
        "CALLDATA_SIZE_LIMIT()": FunctionFragment;
        "FORWARDER_HUB_OVERHEAD()": FunctionFragment;
        "PAYMASTER_ACCEPTANCE_BUDGET()": FunctionFragment;
        "POST_RELAYED_CALL_GAS_LIMIT()": FunctionFragment;
        "PRE_RELAYED_CALL_GAS_LIMIT()": FunctionFragment;
        "deposit()": FunctionFragment;
        "expensiveGasLimits()": FunctionFragment;
        "getRelayHub()": FunctionFragment;
        "getTrustedForwarder()": FunctionFragment;
        "greedyAcceptanceBudget()": FunctionFragment;
        "outOfGasPre()": FunctionFragment;
        "owner()": FunctionFragment;
        "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": FunctionFragment;
        "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "returnInvalidErrorCode()": FunctionFragment;
        "revertPostRelayCall()": FunctionFragment;
        "revertPreRelayCall()": FunctionFragment;
        "revertPreRelayCallOnEvenBlocks()": FunctionFragment;
        "setRelayHub(address)": FunctionFragment;
        "setTrustedForwarder(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "versionPaymaster()": FunctionFragment;
        "withdrawAll(address)": FunctionFragment;
        "withdrawDuringPostRelayedCall()": FunctionFragment;
        "withdrawDuringPreRelayedCall()": FunctionFragment;
        "withdrawRelayHubDepositTo(uint256,address)": FunctionFragment;
        "setWithdrawDuringPostRelayedCall(bool)": FunctionFragment;
        "setWithdrawDuringPreRelayedCall(bool)": FunctionFragment;
        "setReturnInvalidErrorCode(bool)": FunctionFragment;
        "setRevertPostRelayCall(bool)": FunctionFragment;
        "setRevertPreRelayCall(bool)": FunctionFragment;
        "setRevertPreRelayCallOnEvenBlocks(bool)": FunctionFragment;
        "setOutOfGasPre(bool)": FunctionFragment;
        "setGreedyAcceptanceBudget(bool)": FunctionFragment;
        "setExpensiveGasLimits(bool)": FunctionFragment;
        "withdrawAllBalance()": FunctionFragment;
        "getGasAndDataLimits()": FunctionFragment;
        "setGasLimits(uint256,uint256,uint256)": FunctionFragment;
        "setTrustRecipientRevert(bool)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "CALLDATA_SIZE_LIMIT" | "FORWARDER_HUB_OVERHEAD" | "PAYMASTER_ACCEPTANCE_BUDGET" | "POST_RELAYED_CALL_GAS_LIMIT" | "PRE_RELAYED_CALL_GAS_LIMIT" | "deposit" | "expensiveGasLimits" | "getRelayHub" | "getTrustedForwarder" | "greedyAcceptanceBudget" | "outOfGasPre" | "owner" | "postRelayedCall" | "preRelayedCall" | "renounceOwnership" | "returnInvalidErrorCode" | "revertPostRelayCall" | "revertPreRelayCall" | "revertPreRelayCallOnEvenBlocks" | "setRelayHub" | "setTrustedForwarder" | "supportsInterface" | "transferOwnership" | "versionPaymaster" | "withdrawAll" | "withdrawDuringPostRelayedCall" | "withdrawDuringPreRelayedCall" | "withdrawRelayHubDepositTo" | "setWithdrawDuringPostRelayedCall" | "setWithdrawDuringPreRelayedCall" | "setReturnInvalidErrorCode" | "setRevertPostRelayCall" | "setRevertPreRelayCall" | "setRevertPreRelayCallOnEvenBlocks" | "setOutOfGasPre" | "setGreedyAcceptanceBudget" | "setExpensiveGasLimits" | "withdrawAllBalance" | "getGasAndDataLimits" | "setGasLimits" | "setTrustRecipientRevert"): FunctionFragment;
    encodeFunctionData(functionFragment: "CALLDATA_SIZE_LIMIT", values?: undefined): string;
    encodeFunctionData(functionFragment: "FORWARDER_HUB_OVERHEAD", values?: undefined): string;
    encodeFunctionData(functionFragment: "PAYMASTER_ACCEPTANCE_BUDGET", values?: undefined): string;
    encodeFunctionData(functionFragment: "POST_RELAYED_CALL_GAS_LIMIT", values?: undefined): string;
    encodeFunctionData(functionFragment: "PRE_RELAYED_CALL_GAS_LIMIT", values?: undefined): string;
    encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
    encodeFunctionData(functionFragment: "expensiveGasLimits", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRelayHub", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTrustedForwarder", values?: undefined): string;
    encodeFunctionData(functionFragment: "greedyAcceptanceBudget", values?: undefined): string;
    encodeFunctionData(functionFragment: "outOfGasPre", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "postRelayedCall", values: [BytesLike, boolean, BigNumberish, GsnTypes.RelayDataStruct]): string;
    encodeFunctionData(functionFragment: "preRelayedCall", values: [GsnTypes.RelayRequestStruct, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "returnInvalidErrorCode", values?: undefined): string;
    encodeFunctionData(functionFragment: "revertPostRelayCall", values?: undefined): string;
    encodeFunctionData(functionFragment: "revertPreRelayCall", values?: undefined): string;
    encodeFunctionData(functionFragment: "revertPreRelayCallOnEvenBlocks", values?: undefined): string;
    encodeFunctionData(functionFragment: "setRelayHub", values: [string]): string;
    encodeFunctionData(functionFragment: "setTrustedForwarder", values: [string]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "versionPaymaster", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawAll", values: [string]): string;
    encodeFunctionData(functionFragment: "withdrawDuringPostRelayedCall", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawDuringPreRelayedCall", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawRelayHubDepositTo", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "setWithdrawDuringPostRelayedCall", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setWithdrawDuringPreRelayedCall", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setReturnInvalidErrorCode", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setRevertPostRelayCall", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setRevertPreRelayCall", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setRevertPreRelayCallOnEvenBlocks", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setOutOfGasPre", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setGreedyAcceptanceBudget", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setExpensiveGasLimits", values: [boolean]): string;
    encodeFunctionData(functionFragment: "withdrawAllBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "getGasAndDataLimits", values?: undefined): string;
    encodeFunctionData(functionFragment: "setGasLimits", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setTrustRecipientRevert", values: [boolean]): string;
    decodeFunctionResult(functionFragment: "CALLDATA_SIZE_LIMIT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "FORWARDER_HUB_OVERHEAD", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PAYMASTER_ACCEPTANCE_BUDGET", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "POST_RELAYED_CALL_GAS_LIMIT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PRE_RELAYED_CALL_GAS_LIMIT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "expensiveGasLimits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRelayHub", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "greedyAcceptanceBudget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outOfGasPre", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "postRelayedCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preRelayedCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "returnInvalidErrorCode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revertPostRelayCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revertPreRelayCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revertPreRelayCallOnEvenBlocks", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRelayHub", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "versionPaymaster", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawDuringPostRelayedCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawDuringPreRelayedCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawRelayHubDepositTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWithdrawDuringPostRelayedCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWithdrawDuringPreRelayedCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReturnInvalidErrorCode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRevertPostRelayCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRevertPreRelayCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRevertPreRelayCallOnEvenBlocks", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOutOfGasPre", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGreedyAcceptanceBudget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpensiveGasLimits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawAllBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getGasAndDataLimits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGasLimits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTrustRecipientRevert", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "SampleRecipientPostCall(bool,uint256)": EventFragment;
        "SampleRecipientPreCall()": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SampleRecipientPostCall"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SampleRecipientPreCall"): EventFragment;
}
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface SampleRecipientPostCallEventObject {
    success: boolean;
    actualCharge: BigNumber;
}
export type SampleRecipientPostCallEvent = TypedEvent<[
    boolean,
    BigNumber
], SampleRecipientPostCallEventObject>;
export type SampleRecipientPostCallEventFilter = TypedEventFilter<SampleRecipientPostCallEvent>;
export interface SampleRecipientPreCallEventObject {
}
export type SampleRecipientPreCallEvent = TypedEvent<[
], SampleRecipientPreCallEventObject>;
export type SampleRecipientPreCallEventFilter = TypedEventFilter<SampleRecipientPreCallEvent>;
export interface TestPaymasterConfigurableMisbehavior extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestPaymasterConfigurableMisbehaviorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;
        FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<[BigNumber]>;
        PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<[BigNumber]>;
        POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;
        PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;
        deposit(overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        expensiveGasLimits(overrides?: CallOverrides): Promise<[boolean]>;
        /**
         */
        getRelayHub(overrides?: CallOverrides): Promise<[string]>;
        /**
         * :warning: **Warning** :warning: using incorrect Forwarder may cause the Paymaster to agreeing to pay for invalid transactions.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<[string]>;
        greedyAcceptanceBudget(overrides?: CallOverrides): Promise<[boolean]>;
        outOfGasPre(overrides?: CallOverrides): Promise<[boolean]>;
        /**
         * Returns the address of the current owner.
         */
        owner(overrides?: CallOverrides): Promise<[string]>;
        postRelayedCall(context: BytesLike, success: boolean, gasUseWithoutPost: BigNumberish, relayData: GsnTypes.RelayDataStruct, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        preRelayedCall(relayRequest: GsnTypes.RelayRequestStruct, signature: BytesLike, approvalData: BytesLike, maxPossibleGas: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        /**
         * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
         */
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        returnInvalidErrorCode(overrides?: CallOverrides): Promise<[boolean]>;
        revertPostRelayCall(overrides?: CallOverrides): Promise<[boolean]>;
        revertPreRelayCall(overrides?: CallOverrides): Promise<[boolean]>;
        revertPreRelayCallOnEvenBlocks(overrides?: CallOverrides): Promise<[boolean]>;
        /**
         * The owner of the Paymaster can change the instance of the RelayHub this Paymaster works with. :warning: **Warning** :warning: The deposit on the previous RelayHub must be withdrawn first.
         */
        setRelayHub(hub: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        /**
         * The owner of the Paymaster can change the instance of the Forwarder this Paymaster works with.the Recipients must trust this Forwarder as well in order for the configuration to remain functional.
         */
        setTrustedForwarder(forwarder: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        /**
         * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
         */
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        /**
         * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
         */
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        /**
         */
        versionPaymaster(overrides?: CallOverrides): Promise<[string]>;
        withdrawAll(destination: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        withdrawDuringPostRelayedCall(overrides?: CallOverrides): Promise<[boolean]>;
        withdrawDuringPreRelayedCall(overrides?: CallOverrides): Promise<[boolean]>;
        /**
         * Withdraw deposit from the RelayHub.
         * @param amount The amount to be subtracted from the sender.
         * @param target The target to which the amount will be transferred.
         */
        withdrawRelayHubDepositTo(amount: BigNumberish, target: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setWithdrawDuringPostRelayedCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setWithdrawDuringPreRelayedCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setReturnInvalidErrorCode(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setRevertPostRelayCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setRevertPreRelayCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setRevertPreRelayCallOnEvenBlocks(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setOutOfGasPre(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setGreedyAcceptanceBudget(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setExpensiveGasLimits(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        /**
         * leaving withdrawal public and unprotected
         */
        withdrawAllBalance(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        /**
         * Return the Gas Limits for Paymaster's functions and maximum msg.data length values for this Paymaster. This function allows different paymasters to have different properties without changes to the RelayHub.
         */
        getGasAndDataLimits(overrides?: CallOverrides): Promise<[IPaymaster.GasAndDataLimitsStructOutput]>;
        setGasLimits(acceptanceBudget: BigNumberish, preRelayedCallGasLimit: BigNumberish, postRelayedCallGasLimit: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setTrustRecipientRevert(on: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
    };
    CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;
    FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;
    PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;
    POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;
    PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;
    deposit(overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    expensiveGasLimits(overrides?: CallOverrides): Promise<boolean>;
    /**
     */
    getRelayHub(overrides?: CallOverrides): Promise<string>;
    /**
     * :warning: **Warning** :warning: using incorrect Forwarder may cause the Paymaster to agreeing to pay for invalid transactions.
     */
    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;
    greedyAcceptanceBudget(overrides?: CallOverrides): Promise<boolean>;
    outOfGasPre(overrides?: CallOverrides): Promise<boolean>;
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;
    postRelayedCall(context: BytesLike, success: boolean, gasUseWithoutPost: BigNumberish, relayData: GsnTypes.RelayDataStruct, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    preRelayedCall(relayRequest: GsnTypes.RelayRequestStruct, signature: BytesLike, approvalData: BytesLike, maxPossibleGas: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    returnInvalidErrorCode(overrides?: CallOverrides): Promise<boolean>;
    revertPostRelayCall(overrides?: CallOverrides): Promise<boolean>;
    revertPreRelayCall(overrides?: CallOverrides): Promise<boolean>;
    revertPreRelayCallOnEvenBlocks(overrides?: CallOverrides): Promise<boolean>;
    /**
     * The owner of the Paymaster can change the instance of the RelayHub this Paymaster works with. :warning: **Warning** :warning: The deposit on the previous RelayHub must be withdrawn first.
     */
    setRelayHub(hub: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    /**
     * The owner of the Paymaster can change the instance of the Forwarder this Paymaster works with.the Recipients must trust this Forwarder as well in order for the configuration to remain functional.
     */
    setTrustedForwarder(forwarder: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    /**
     */
    versionPaymaster(overrides?: CallOverrides): Promise<string>;
    withdrawAll(destination: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    withdrawDuringPostRelayedCall(overrides?: CallOverrides): Promise<boolean>;
    withdrawDuringPreRelayedCall(overrides?: CallOverrides): Promise<boolean>;
    /**
     * Withdraw deposit from the RelayHub.
     * @param amount The amount to be subtracted from the sender.
     * @param target The target to which the amount will be transferred.
     */
    withdrawRelayHubDepositTo(amount: BigNumberish, target: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setWithdrawDuringPostRelayedCall(val: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setWithdrawDuringPreRelayedCall(val: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setReturnInvalidErrorCode(val: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setRevertPostRelayCall(val: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setRevertPreRelayCall(val: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setRevertPreRelayCallOnEvenBlocks(val: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setOutOfGasPre(val: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setGreedyAcceptanceBudget(val: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setExpensiveGasLimits(val: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    /**
     * leaving withdrawal public and unprotected
     */
    withdrawAllBalance(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    /**
     * Return the Gas Limits for Paymaster's functions and maximum msg.data length values for this Paymaster. This function allows different paymasters to have different properties without changes to the RelayHub.
     */
    getGasAndDataLimits(overrides?: CallOverrides): Promise<IPaymaster.GasAndDataLimitsStructOutput>;
    setGasLimits(acceptanceBudget: BigNumberish, preRelayedCallGasLimit: BigNumberish, postRelayedCallGasLimit: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setTrustRecipientRevert(on: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    callStatic: {
        CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;
        FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;
        PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;
        POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;
        PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;
        deposit(overrides?: CallOverrides): Promise<void>;
        expensiveGasLimits(overrides?: CallOverrides): Promise<boolean>;
        /**
         */
        getRelayHub(overrides?: CallOverrides): Promise<string>;
        /**
         * :warning: **Warning** :warning: using incorrect Forwarder may cause the Paymaster to agreeing to pay for invalid transactions.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<string>;
        greedyAcceptanceBudget(overrides?: CallOverrides): Promise<boolean>;
        outOfGasPre(overrides?: CallOverrides): Promise<boolean>;
        /**
         * Returns the address of the current owner.
         */
        owner(overrides?: CallOverrides): Promise<string>;
        postRelayedCall(context: BytesLike, success: boolean, gasUseWithoutPost: BigNumberish, relayData: GsnTypes.RelayDataStruct, overrides?: CallOverrides): Promise<void>;
        preRelayedCall(relayRequest: GsnTypes.RelayRequestStruct, signature: BytesLike, approvalData: BytesLike, maxPossibleGas: BigNumberish, overrides?: CallOverrides): Promise<[string, boolean]>;
        /**
         * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
         */
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        returnInvalidErrorCode(overrides?: CallOverrides): Promise<boolean>;
        revertPostRelayCall(overrides?: CallOverrides): Promise<boolean>;
        revertPreRelayCall(overrides?: CallOverrides): Promise<boolean>;
        revertPreRelayCallOnEvenBlocks(overrides?: CallOverrides): Promise<boolean>;
        /**
         * The owner of the Paymaster can change the instance of the RelayHub this Paymaster works with. :warning: **Warning** :warning: The deposit on the previous RelayHub must be withdrawn first.
         */
        setRelayHub(hub: string, overrides?: CallOverrides): Promise<void>;
        /**
         * The owner of the Paymaster can change the instance of the Forwarder this Paymaster works with.the Recipients must trust this Forwarder as well in order for the configuration to remain functional.
         */
        setTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<void>;
        /**
         * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
         */
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        /**
         * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
         */
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        /**
         */
        versionPaymaster(overrides?: CallOverrides): Promise<string>;
        withdrawAll(destination: string, overrides?: CallOverrides): Promise<void>;
        withdrawDuringPostRelayedCall(overrides?: CallOverrides): Promise<boolean>;
        withdrawDuringPreRelayedCall(overrides?: CallOverrides): Promise<boolean>;
        /**
         * Withdraw deposit from the RelayHub.
         * @param amount The amount to be subtracted from the sender.
         * @param target The target to which the amount will be transferred.
         */
        withdrawRelayHubDepositTo(amount: BigNumberish, target: string, overrides?: CallOverrides): Promise<void>;
        setWithdrawDuringPostRelayedCall(val: boolean, overrides?: CallOverrides): Promise<void>;
        setWithdrawDuringPreRelayedCall(val: boolean, overrides?: CallOverrides): Promise<void>;
        setReturnInvalidErrorCode(val: boolean, overrides?: CallOverrides): Promise<void>;
        setRevertPostRelayCall(val: boolean, overrides?: CallOverrides): Promise<void>;
        setRevertPreRelayCall(val: boolean, overrides?: CallOverrides): Promise<void>;
        setRevertPreRelayCallOnEvenBlocks(val: boolean, overrides?: CallOverrides): Promise<void>;
        setOutOfGasPre(val: boolean, overrides?: CallOverrides): Promise<void>;
        setGreedyAcceptanceBudget(val: boolean, overrides?: CallOverrides): Promise<void>;
        setExpensiveGasLimits(val: boolean, overrides?: CallOverrides): Promise<void>;
        /**
         * leaving withdrawal public and unprotected
         */
        withdrawAllBalance(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Return the Gas Limits for Paymaster's functions and maximum msg.data length values for this Paymaster. This function allows different paymasters to have different properties without changes to the RelayHub.
         */
        getGasAndDataLimits(overrides?: CallOverrides): Promise<IPaymaster.GasAndDataLimitsStructOutput>;
        setGasLimits(acceptanceBudget: BigNumberish, preRelayedCallGasLimit: BigNumberish, postRelayedCallGasLimit: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setTrustRecipientRevert(on: boolean, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        "SampleRecipientPostCall(bool,uint256)"(success?: null, actualCharge?: null): SampleRecipientPostCallEventFilter;
        SampleRecipientPostCall(success?: null, actualCharge?: null): SampleRecipientPostCallEventFilter;
        "SampleRecipientPreCall()"(): SampleRecipientPreCallEventFilter;
        SampleRecipientPreCall(): SampleRecipientPreCallEventFilter;
    };
    estimateGas: {
        CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;
        FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;
        PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;
        POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;
        PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;
        deposit(overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        expensiveGasLimits(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         */
        getRelayHub(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * :warning: **Warning** :warning: using incorrect Forwarder may cause the Paymaster to agreeing to pay for invalid transactions.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;
        greedyAcceptanceBudget(overrides?: CallOverrides): Promise<BigNumber>;
        outOfGasPre(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Returns the address of the current owner.
         */
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        postRelayedCall(context: BytesLike, success: boolean, gasUseWithoutPost: BigNumberish, relayData: GsnTypes.RelayDataStruct, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        preRelayedCall(relayRequest: GsnTypes.RelayRequestStruct, signature: BytesLike, approvalData: BytesLike, maxPossibleGas: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        /**
         * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
         */
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        returnInvalidErrorCode(overrides?: CallOverrides): Promise<BigNumber>;
        revertPostRelayCall(overrides?: CallOverrides): Promise<BigNumber>;
        revertPreRelayCall(overrides?: CallOverrides): Promise<BigNumber>;
        revertPreRelayCallOnEvenBlocks(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * The owner of the Paymaster can change the instance of the RelayHub this Paymaster works with. :warning: **Warning** :warning: The deposit on the previous RelayHub must be withdrawn first.
         */
        setRelayHub(hub: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        /**
         * The owner of the Paymaster can change the instance of the Forwarder this Paymaster works with.the Recipients must trust this Forwarder as well in order for the configuration to remain functional.
         */
        setTrustedForwarder(forwarder: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        /**
         * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
         */
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
         */
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        /**
         */
        versionPaymaster(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawAll(destination: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        withdrawDuringPostRelayedCall(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawDuringPreRelayedCall(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * Withdraw deposit from the RelayHub.
         * @param amount The amount to be subtracted from the sender.
         * @param target The target to which the amount will be transferred.
         */
        withdrawRelayHubDepositTo(amount: BigNumberish, target: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setWithdrawDuringPostRelayedCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setWithdrawDuringPreRelayedCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setReturnInvalidErrorCode(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setRevertPostRelayCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setRevertPreRelayCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setRevertPreRelayCallOnEvenBlocks(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setOutOfGasPre(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setGreedyAcceptanceBudget(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setExpensiveGasLimits(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        /**
         * leaving withdrawal public and unprotected
         */
        withdrawAllBalance(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        /**
         * Return the Gas Limits for Paymaster's functions and maximum msg.data length values for this Paymaster. This function allows different paymasters to have different properties without changes to the RelayHub.
         */
        getGasAndDataLimits(overrides?: CallOverrides): Promise<BigNumber>;
        setGasLimits(acceptanceBudget: BigNumberish, preRelayedCallGasLimit: BigNumberish, postRelayedCallGasLimit: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setTrustRecipientRevert(on: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deposit(overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        expensiveGasLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         */
        getRelayHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * :warning: **Warning** :warning: using incorrect Forwarder may cause the Paymaster to agreeing to pay for invalid transactions.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        greedyAcceptanceBudget(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        outOfGasPre(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Returns the address of the current owner.
         */
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        postRelayedCall(context: BytesLike, success: boolean, gasUseWithoutPost: BigNumberish, relayData: GsnTypes.RelayDataStruct, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        preRelayedCall(relayRequest: GsnTypes.RelayRequestStruct, signature: BytesLike, approvalData: BytesLike, maxPossibleGas: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        /**
         * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
         */
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        returnInvalidErrorCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revertPostRelayCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revertPreRelayCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revertPreRelayCallOnEvenBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * The owner of the Paymaster can change the instance of the RelayHub this Paymaster works with. :warning: **Warning** :warning: The deposit on the previous RelayHub must be withdrawn first.
         */
        setRelayHub(hub: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        /**
         * The owner of the Paymaster can change the instance of the Forwarder this Paymaster works with.the Recipients must trust this Forwarder as well in order for the configuration to remain functional.
         */
        setTrustedForwarder(forwarder: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        /**
         * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
         */
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
         */
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        /**
         */
        versionPaymaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawAll(destination: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        withdrawDuringPostRelayedCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawDuringPreRelayedCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * Withdraw deposit from the RelayHub.
         * @param amount The amount to be subtracted from the sender.
         * @param target The target to which the amount will be transferred.
         */
        withdrawRelayHubDepositTo(amount: BigNumberish, target: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setWithdrawDuringPostRelayedCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setWithdrawDuringPreRelayedCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setReturnInvalidErrorCode(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setRevertPostRelayCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setRevertPreRelayCall(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setRevertPreRelayCallOnEvenBlocks(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setOutOfGasPre(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setGreedyAcceptanceBudget(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setExpensiveGasLimits(val: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        /**
         * leaving withdrawal public and unprotected
         */
        withdrawAllBalance(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        /**
         * Return the Gas Limits for Paymaster's functions and maximum msg.data length values for this Paymaster. This function allows different paymasters to have different properties without changes to the RelayHub.
         */
        getGasAndDataLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setGasLimits(acceptanceBudget: BigNumberish, preRelayedCallGasLimit: BigNumberish, postRelayedCallGasLimit: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setTrustRecipientRevert(on: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
    };
}
