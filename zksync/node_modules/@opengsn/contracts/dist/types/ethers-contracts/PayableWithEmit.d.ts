import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface PayableWithEmitInterface extends utils.Interface {
    functions: {
        "getTrustedForwarder()": FunctionFragment;
        "isTrustedForwarder(address)": FunctionFragment;
        "doSend(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getTrustedForwarder" | "isTrustedForwarder" | "doSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "getTrustedForwarder", values?: undefined): string;
    encodeFunctionData(functionFragment: "isTrustedForwarder", values: [string]): string;
    encodeFunctionData(functionFragment: "doSend", values: [string]): string;
    decodeFunctionResult(functionFragment: "getTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "doSend", data: BytesLike): Result;
    events: {
        "GasUsed(uint256,bool)": EventFragment;
        "Received(address,uint256,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "GasUsed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
}
export interface GasUsedEventObject {
    gasUsed: BigNumber;
    success: boolean;
}
export type GasUsedEvent = TypedEvent<[BigNumber, boolean], GasUsedEventObject>;
export type GasUsedEventFilter = TypedEventFilter<GasUsedEvent>;
export interface ReceivedEventObject {
    sender: string;
    value: BigNumber;
    gasleft: BigNumber;
}
export type ReceivedEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], ReceivedEventObject>;
export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;
export interface PayableWithEmit extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PayableWithEmitInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<[string] & {
            forwarder: string;
        }>;
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
         * @param forwarder The address of the Forwarder contract that is being used.
         */
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<[boolean]>;
        doSend(target: string, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
    };
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
     */
    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
     * @param forwarder The address of the Forwarder contract that is being used.
     */
    isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<boolean>;
    doSend(target: string, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    callStatic: {
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<string>;
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
         * @param forwarder The address of the Forwarder contract that is being used.
         */
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<boolean>;
        doSend(target: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "GasUsed(uint256,bool)"(gasUsed?: null, success?: null): GasUsedEventFilter;
        GasUsed(gasUsed?: null, success?: null): GasUsedEventFilter;
        "Received(address,uint256,uint256)"(sender?: null, value?: null, gasleft?: null): ReceivedEventFilter;
        Received(sender?: null, value?: null, gasleft?: null): ReceivedEventFilter;
    };
    estimateGas: {
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
         * @param forwarder The address of the Forwarder contract that is being used.
         */
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<BigNumber>;
        doSend(target: string, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
         * @param forwarder The address of the Forwarder contract that is being used.
         */
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        doSend(target: string, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
    };
}
