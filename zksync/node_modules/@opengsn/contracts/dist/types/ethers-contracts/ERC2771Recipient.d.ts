import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface ERC2771RecipientInterface extends utils.Interface {
    functions: {
        "getTrustedForwarder()": FunctionFragment;
        "isTrustedForwarder(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getTrustedForwarder" | "isTrustedForwarder"): FunctionFragment;
    encodeFunctionData(functionFragment: "getTrustedForwarder", values?: undefined): string;
    encodeFunctionData(functionFragment: "isTrustedForwarder", values: [string]): string;
    decodeFunctionResult(functionFragment: "getTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isTrustedForwarder", data: BytesLike): Result;
    events: {};
}
export interface ERC2771Recipient extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ERC2771RecipientInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<[string] & {
            forwarder: string;
        }>;
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
         * @param forwarder The address of the Forwarder contract that is being used.
         */
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<[boolean]>;
    };
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
     */
    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
     * @param forwarder The address of the Forwarder contract that is being used.
     */
    isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<string>;
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
         * @param forwarder The address of the Forwarder contract that is being used.
         */
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
         * @param forwarder The address of the Forwarder contract that is being used.
         */
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
         */
        getTrustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        /**
         * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
         * @param forwarder The address of the Forwarder contract that is being used.
         */
        isTrustedForwarder(forwarder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
