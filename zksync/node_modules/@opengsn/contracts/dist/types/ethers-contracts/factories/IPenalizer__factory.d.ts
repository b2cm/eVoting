import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IPenalizer, IPenalizerInterface } from "../IPenalizer";
export declare class IPenalizer__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "commitHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "readyBlockNumber";
            readonly type: "uint256";
        }];
        readonly name: "CommitAdded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "commitHash";
            readonly type: "bytes32";
        }];
        readonly name: "commit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "unsignedTx1";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature1";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "unsignedTx2";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature2";
            readonly type: "bytes";
        }, {
            readonly internalType: "contract IRelayHub";
            readonly name: "hub";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "randomValue";
            readonly type: "uint256";
        }];
        readonly name: "penalizeRepeatedNonce";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "unsignedTx";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }, {
            readonly internalType: "contract IRelayHub";
            readonly name: "hub";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "randomValue";
            readonly type: "uint256";
        }];
        readonly name: "penalizeIllegalTransaction";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "versionPenalizer";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPenalizeBlockDelay";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPenalizeBlockExpiration";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IPenalizerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IPenalizer;
}
