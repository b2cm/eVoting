import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PayableWithEmit, PayableWithEmitInterface } from "../PayableWithEmit";
type PayableWithEmitConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class PayableWithEmit__factory extends ContractFactory {
    constructor(...args: PayableWithEmitConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<PayableWithEmit>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): PayableWithEmit;
    connect(signer: Signer): PayableWithEmit__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061025f806100206000396000f3fe6080604052600436106100385760003560e01c8063572b6c05146100975780639bfcdaa1146100db578063ce1b815f146100f057600080fd5b36610092577f74cf3d18d0ddca79038197ad0dd2c7fa5005ef61a5d1ed190e8a8a437e2fcf10610066610118565b345a604080516001600160a01b03909416845260208401929092529082015260600160405180910390a1005b600080fd5b3480156100a357600080fd5b506100c66100b23660046101c8565b6000546001600160a01b0391821691161490565b60405190151581526020015b60405180910390f35b6100ee6100e93660046101c8565b61014c565b005b3480156100fc57600080fd5b506000546040516001600160a01b0390911681526020016100d2565b60006014361080159061013557506000546001600160a01b031633145b15610147575060131936013560601c90565b503390565b60005a6040519091506000906001600160a01b038416903480156108fc029184818181858888f19350505050905060005a90507f4bd28cc62c0f932efdc0c9c2f68341495ac3c9ac35941adda462fde163aa6c626101aa82856101ec565b6040805191825284151560208301520160405180910390a150505050565b6000602082840312156101da57600080fd5b81356101e581610211565b9392505050565b60008282101561020c57634e487b7160e01b600052601160045260246000fd5b500390565b6001600160a01b038116811461022657600080fd5b5056fea2646970667358221220c87470ef1bf1cb019ff1e2bcca67458de0739e2c8110f8a7dc82d564325bfe2564736f6c63430008070033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gasUsed";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly name: "GasUsed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gasleft";
            readonly type: "uint256";
        }];
        readonly name: "Received";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTrustedForwarder";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "forwarder";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "forwarder";
            readonly type: "address";
        }];
        readonly name: "isTrustedForwarder";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "doSend";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): PayableWithEmitInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PayableWithEmit;
}
export {};
