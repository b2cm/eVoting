import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IRelayRegistrar, IRelayRegistrarInterface } from "../IRelayRegistrar";
export declare class IRelayRegistrar__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "relayManager";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "relayHub";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32[3]";
            readonly name: "relayUrl";
            readonly type: "bytes32[3]";
        }];
        readonly name: "RelayServerRegistered";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "relayHub";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32[3]";
            readonly name: "url";
            readonly type: "bytes32[3]";
        }];
        readonly name: "registerRelayServer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCreationBlock";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRelayRegistrationMaxAge";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "setRelayRegistrationMaxAge";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "relayHub";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "relayManager";
            readonly type: "address";
        }];
        readonly name: "getRelayInfo";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "lastSeenBlockNumber";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint40";
                readonly name: "lastSeenTimestamp";
                readonly type: "uint40";
            }, {
                readonly internalType: "uint32";
                readonly name: "firstSeenBlockNumber";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint40";
                readonly name: "firstSeenTimestamp";
                readonly type: "uint40";
            }, {
                readonly internalType: "bytes32[3]";
                readonly name: "urlParts";
                readonly type: "bytes32[3]";
            }, {
                readonly internalType: "address";
                readonly name: "relayManager";
                readonly type: "address";
            }];
            readonly internalType: "struct IRelayRegistrar.RelayInfo";
            readonly name: "info";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "relayHub";
            readonly type: "address";
        }];
        readonly name: "readRelayInfos";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "lastSeenBlockNumber";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint40";
                readonly name: "lastSeenTimestamp";
                readonly type: "uint40";
            }, {
                readonly internalType: "uint32";
                readonly name: "firstSeenBlockNumber";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint40";
                readonly name: "firstSeenTimestamp";
                readonly type: "uint40";
            }, {
                readonly internalType: "bytes32[3]";
                readonly name: "urlParts";
                readonly type: "bytes32[3]";
            }, {
                readonly internalType: "address";
                readonly name: "relayManager";
                readonly type: "address";
            }];
            readonly internalType: "struct IRelayRegistrar.RelayInfo[]";
            readonly name: "info";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "relayHub";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "oldestBlockNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "oldestBlockTimestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "maxCount";
            readonly type: "uint256";
        }];
        readonly name: "readRelayInfosInRange";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "lastSeenBlockNumber";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint40";
                readonly name: "lastSeenTimestamp";
                readonly type: "uint40";
            }, {
                readonly internalType: "uint32";
                readonly name: "firstSeenBlockNumber";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint40";
                readonly name: "firstSeenTimestamp";
                readonly type: "uint40";
            }, {
                readonly internalType: "bytes32[3]";
                readonly name: "urlParts";
                readonly type: "bytes32[3]";
            }, {
                readonly internalType: "address";
                readonly name: "relayManager";
                readonly type: "address";
            }];
            readonly internalType: "struct IRelayRegistrar.RelayInfo[]";
            readonly name: "info";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IRelayRegistrarInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IRelayRegistrar;
}
