/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TestRecipientInterface extends utils.Interface {
  functions: {
    "getTrustedForwarder()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "paymaster()": FunctionFragment;
    "testRevert()": FunctionFragment;
    "setWithdrawDuringRelayedCall(address)": FunctionFragment;
    "recipientRevert()": FunctionFragment;
    "emitMessage(string)": FunctionFragment;
    "withdrawAllBalance()": FunctionFragment;
    "dontEmitMessage(string)": FunctionFragment;
    "emitMessageNoParams()": FunctionFragment;
    "checkReturnValues(uint256,bool)": FunctionFragment;
    "checkNoReturnValues(bool)": FunctionFragment;
    "withdrawFromSingletonWhitelistPaymaster(address)": FunctionFragment;
    "withdrawBalance(uint256)": FunctionFragment;
    "captureTheFlag()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getTrustedForwarder"
      | "isTrustedForwarder"
      | "paymaster"
      | "testRevert"
      | "setWithdrawDuringRelayedCall"
      | "recipientRevert"
      | "emitMessage"
      | "withdrawAllBalance"
      | "dontEmitMessage"
      | "emitMessageNoParams"
      | "checkReturnValues"
      | "checkNoReturnValues"
      | "withdrawFromSingletonWhitelistPaymaster"
      | "withdrawBalance"
      | "captureTheFlag"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "paymaster", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testRevert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawDuringRelayedCall",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientRevert",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "emitMessage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawAllBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dontEmitMessage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitMessageNoParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkReturnValues",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkNoReturnValues",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromSingletonWhitelistPaymaster",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "captureTheFlag",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paymaster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testRevert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawDuringRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dontEmitMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitMessageNoParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkReturnValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNoReturnValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromSingletonWhitelistPaymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "captureTheFlag",
    data: BytesLike
  ): Result;

  events: {
    "Reverting(string)": EventFragment;
    "SampleRecipientEmitted(string,address,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Reverting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SampleRecipientEmitted"): EventFragment;
}

export interface RevertingEventObject {
  message: string;
}
export type RevertingEvent = TypedEvent<[string], RevertingEventObject>;

export type RevertingEventFilter = TypedEventFilter<RevertingEvent>;

export interface SampleRecipientEmittedEventObject {
  message: string;
  realSender: string;
  msgSender: string;
  origin: string;
  msgValue: BigNumber;
  gasLeft: BigNumber;
  balance: BigNumber;
}
export type SampleRecipientEmittedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  SampleRecipientEmittedEventObject
>;

export type SampleRecipientEmittedEventFilter =
  TypedEventFilter<SampleRecipientEmittedEvent>;

export interface TestRecipient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestRecipientInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
     */
    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<[string] & { forwarder: string }>;

    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
     * @param forwarder The address of the Forwarder contract that is being used.
     */
    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    paymaster(overrides?: CallOverrides): Promise<[string]>;

    testRevert(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWithdrawDuringRelayedCall(
      _paymaster: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recipientRevert(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitMessage(
      message: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAllBalance(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    dontEmitMessage(
      message: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emitMessageNoParams(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkReturnValues(
      len: BigNumberish,
      doRevert: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checkNoReturnValues(
      doRevert: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    withdrawFromSingletonWhitelistPaymaster(
      singletonPaymaster: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawBalance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    captureTheFlag(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
   */
  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  /**
   * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
   * @param forwarder The address of the Forwarder contract that is being used.
   */
  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  paymaster(overrides?: CallOverrides): Promise<string>;

  testRevert(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWithdrawDuringRelayedCall(
    _paymaster: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recipientRevert(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitMessage(
    message: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAllBalance(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  dontEmitMessage(
    message: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emitMessageNoParams(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkReturnValues(
    len: BigNumberish,
    doRevert: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  checkNoReturnValues(
    doRevert: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  withdrawFromSingletonWhitelistPaymaster(
    singletonPaymaster: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawBalance(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  captureTheFlag(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
     */
    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
     * @param forwarder The address of the Forwarder contract that is being used.
     */
    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    paymaster(overrides?: CallOverrides): Promise<string>;

    testRevert(overrides?: CallOverrides): Promise<void>;

    setWithdrawDuringRelayedCall(
      _paymaster: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recipientRevert(overrides?: CallOverrides): Promise<void>;

    emitMessage(message: string, overrides?: CallOverrides): Promise<string>;

    withdrawAllBalance(overrides?: CallOverrides): Promise<void>;

    dontEmitMessage(message: string, overrides?: CallOverrides): Promise<void>;

    emitMessageNoParams(overrides?: CallOverrides): Promise<void>;

    checkReturnValues(
      len: BigNumberish,
      doRevert: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    checkNoReturnValues(
      doRevert: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromSingletonWhitelistPaymaster(
      singletonPaymaster: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBalance(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    captureTheFlag(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Reverting(string)"(message?: null): RevertingEventFilter;
    Reverting(message?: null): RevertingEventFilter;

    "SampleRecipientEmitted(string,address,address,address,uint256,uint256,uint256)"(
      message?: null,
      realSender?: null,
      msgSender?: null,
      origin?: null,
      msgValue?: null,
      gasLeft?: null,
      balance?: null
    ): SampleRecipientEmittedEventFilter;
    SampleRecipientEmitted(
      message?: null,
      realSender?: null,
      msgSender?: null,
      origin?: null,
      msgValue?: null,
      gasLeft?: null,
      balance?: null
    ): SampleRecipientEmittedEventFilter;
  };

  estimateGas: {
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
     */
    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
     * @param forwarder The address of the Forwarder contract that is being used.
     */
    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymaster(overrides?: CallOverrides): Promise<BigNumber>;

    testRevert(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setWithdrawDuringRelayedCall(
      _paymaster: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    recipientRevert(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitMessage(
      message: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAllBalance(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    dontEmitMessage(
      message: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emitMessageNoParams(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkReturnValues(
      len: BigNumberish,
      doRevert: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkNoReturnValues(
      doRevert: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFromSingletonWhitelistPaymaster(
      singletonPaymaster: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawBalance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    captureTheFlag(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
     */
    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
     * @param forwarder The address of the Forwarder contract that is being used.
     */
    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testRevert(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWithdrawDuringRelayedCall(
      _paymaster: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recipientRevert(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitMessage(
      message: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAllBalance(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    dontEmitMessage(
      message: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emitMessageNoParams(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkReturnValues(
      len: BigNumberish,
      doRevert: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkNoReturnValues(
      doRevert: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFromSingletonWhitelistPaymaster(
      singletonPaymaster: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawBalance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    captureTheFlag(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
