/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IForwarder {
  export type ForwardRequestStruct = {
    from: string;
    to: string;
    value: BigNumberish;
    gas: BigNumberish;
    nonce: BigNumberish;
    data: BytesLike;
    validUntilTime: BigNumberish;
  };

  export type ForwardRequestStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    from: string;
    to: string;
    value: BigNumber;
    gas: BigNumber;
    nonce: BigNumber;
    data: string;
    validUntilTime: BigNumber;
  };
}

export declare namespace GsnTypes {
  export type RelayDataStruct = {
    maxFeePerGas: BigNumberish;
    maxPriorityFeePerGas: BigNumberish;
    transactionCalldataGasUsed: BigNumberish;
    relayWorker: string;
    paymaster: string;
    forwarder: string;
    paymasterData: BytesLike;
    clientId: BigNumberish;
  };

  export type RelayDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    maxFeePerGas: BigNumber;
    maxPriorityFeePerGas: BigNumber;
    transactionCalldataGasUsed: BigNumber;
    relayWorker: string;
    paymaster: string;
    forwarder: string;
    paymasterData: string;
    clientId: BigNumber;
  };

  export type RelayRequestStruct = {
    request: IForwarder.ForwardRequestStruct;
    relayData: GsnTypes.RelayDataStruct;
  };

  export type RelayRequestStructOutput = [
    IForwarder.ForwardRequestStructOutput,
    GsnTypes.RelayDataStructOutput
  ] & {
    request: IForwarder.ForwardRequestStructOutput;
    relayData: GsnTypes.RelayDataStructOutput;
  };
}

export interface TestUtilInterface extends utils.Interface {
  functions: {
    "libRelayRequestName()": FunctionFragment;
    "libRelayRequestType()": FunctionFragment;
    "libRelayRequestTypeHash()": FunctionFragment;
    "libRelayRequestSuffix()": FunctionFragment;
    "callForwarderVerify(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes)": FunctionFragment;
    "callForwarderVerifyAndCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes)": FunctionFragment;
    "splitRequest(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))": FunctionFragment;
    "libDomainSeparator(address)": FunctionFragment;
    "libGetChainID()": FunctionFragment;
    "_ecrecover(string,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "libRelayRequestName"
      | "libRelayRequestType"
      | "libRelayRequestTypeHash"
      | "libRelayRequestSuffix"
      | "callForwarderVerify"
      | "callForwarderVerifyAndCall"
      | "splitRequest"
      | "libDomainSeparator"
      | "libGetChainID"
      | "_ecrecover"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "libRelayRequestName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "libRelayRequestType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "libRelayRequestTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "libRelayRequestSuffix",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callForwarderVerify",
    values: [GsnTypes.RelayRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callForwarderVerifyAndCall",
    values: [GsnTypes.RelayRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "splitRequest",
    values: [GsnTypes.RelayRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "libDomainSeparator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "libGetChainID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_ecrecover",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "libRelayRequestName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libRelayRequestType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libRelayRequestTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libRelayRequestSuffix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callForwarderVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callForwarderVerifyAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libGetChainID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_ecrecover", data: BytesLike): Result;

  events: {
    "Called(bool,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Called"): EventFragment;
}

export interface CalledEventObject {
  success: boolean;
  error: string;
}
export type CalledEvent = TypedEvent<[boolean, string], CalledEventObject>;

export type CalledEventFilter = TypedEventFilter<CalledEvent>;

export interface TestUtil extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestUtilInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    libRelayRequestName(overrides?: CallOverrides): Promise<[string]>;

    libRelayRequestType(overrides?: CallOverrides): Promise<[string]>;

    libRelayRequestTypeHash(overrides?: CallOverrides): Promise<[string]>;

    libRelayRequestSuffix(overrides?: CallOverrides): Promise<[string]>;

    callForwarderVerify(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    callForwarderVerifyAndCall(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    splitRequest(
      relayRequest: GsnTypes.RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<[string, string] & { typeHash: string; suffixData: string }>;

    libDomainSeparator(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    libGetChainID(overrides?: CallOverrides): Promise<[BigNumber]>;

    _ecrecover(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  libRelayRequestName(overrides?: CallOverrides): Promise<string>;

  libRelayRequestType(overrides?: CallOverrides): Promise<string>;

  libRelayRequestTypeHash(overrides?: CallOverrides): Promise<string>;

  libRelayRequestSuffix(overrides?: CallOverrides): Promise<string>;

  callForwarderVerify(
    relayRequest: GsnTypes.RelayRequestStruct,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callForwarderVerifyAndCall(
    relayRequest: GsnTypes.RelayRequestStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  splitRequest(
    relayRequest: GsnTypes.RelayRequestStruct,
    overrides?: CallOverrides
  ): Promise<[string, string] & { typeHash: string; suffixData: string }>;

  libDomainSeparator(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<string>;

  libGetChainID(overrides?: CallOverrides): Promise<BigNumber>;

  _ecrecover(
    message: string,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    libRelayRequestName(overrides?: CallOverrides): Promise<string>;

    libRelayRequestType(overrides?: CallOverrides): Promise<string>;

    libRelayRequestTypeHash(overrides?: CallOverrides): Promise<string>;

    libRelayRequestSuffix(overrides?: CallOverrides): Promise<string>;

    callForwarderVerify(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    callForwarderVerifyAndCall(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    splitRequest(
      relayRequest: GsnTypes.RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<[string, string] & { typeHash: string; suffixData: string }>;

    libDomainSeparator(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<string>;

    libGetChainID(overrides?: CallOverrides): Promise<BigNumber>;

    _ecrecover(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Called(bool,bytes)"(success?: null, error?: null): CalledEventFilter;
    Called(success?: null, error?: null): CalledEventFilter;
  };

  estimateGas: {
    libRelayRequestName(overrides?: CallOverrides): Promise<BigNumber>;

    libRelayRequestType(overrides?: CallOverrides): Promise<BigNumber>;

    libRelayRequestTypeHash(overrides?: CallOverrides): Promise<BigNumber>;

    libRelayRequestSuffix(overrides?: CallOverrides): Promise<BigNumber>;

    callForwarderVerify(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callForwarderVerifyAndCall(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    splitRequest(
      relayRequest: GsnTypes.RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    libDomainSeparator(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    libGetChainID(overrides?: CallOverrides): Promise<BigNumber>;

    _ecrecover(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    libRelayRequestName(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    libRelayRequestType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    libRelayRequestTypeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    libRelayRequestSuffix(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callForwarderVerify(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callForwarderVerifyAndCall(
      relayRequest: GsnTypes.RelayRequestStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    splitRequest(
      relayRequest: GsnTypes.RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    libDomainSeparator(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    libGetChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _ecrecover(
      message: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
