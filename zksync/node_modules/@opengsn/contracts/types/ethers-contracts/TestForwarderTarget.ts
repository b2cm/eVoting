/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TestForwarderTargetInterface extends utils.Interface {
  functions: {
    "getTrustedForwarder()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "emitMessage(string)": FunctionFragment;
    "publicMsgSender()": FunctionFragment;
    "publicMsgData()": FunctionFragment;
    "mustReceiveEth(uint256)": FunctionFragment;
    "testRevert()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getTrustedForwarder"
      | "isTrustedForwarder"
      | "emitMessage"
      | "publicMsgSender"
      | "publicMsgData"
      | "mustReceiveEth"
      | "testRevert"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "emitMessage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "publicMsgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicMsgData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mustReceiveEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicMsgData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mustReceiveEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testRevert", data: BytesLike): Result;

  events: {
    "Reverting(string)": EventFragment;
    "TestForwarderMessage(string,bytes,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Reverting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestForwarderMessage"): EventFragment;
}

export interface RevertingEventObject {
  message: string;
}
export type RevertingEvent = TypedEvent<[string], RevertingEventObject>;

export type RevertingEventFilter = TypedEventFilter<RevertingEvent>;

export interface TestForwarderMessageEventObject {
  message: string;
  realMsgData: string;
  realSender: string;
  msgSender: string;
  origin: string;
}
export type TestForwarderMessageEvent = TypedEvent<
  [string, string, string, string, string],
  TestForwarderMessageEventObject
>;

export type TestForwarderMessageEventFilter =
  TypedEventFilter<TestForwarderMessageEvent>;

export interface TestForwarderTarget extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestForwarderTargetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
     */
    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<[string] & { forwarder: string }>;

    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
     * @param forwarder The address of the Forwarder contract that is being used.
     */
    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    emitMessage(
      message: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    publicMsgSender(overrides?: CallOverrides): Promise<[string]>;

    publicMsgData(overrides?: CallOverrides): Promise<[string]>;

    mustReceiveEth(
      value: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    testRevert(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
   */
  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  /**
   * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
   * @param forwarder The address of the Forwarder contract that is being used.
   */
  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  emitMessage(
    message: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  publicMsgSender(overrides?: CallOverrides): Promise<string>;

  publicMsgData(overrides?: CallOverrides): Promise<string>;

  mustReceiveEth(
    value: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  testRevert(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
     */
    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
     * @param forwarder The address of the Forwarder contract that is being used.
     */
    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emitMessage(message: string, overrides?: CallOverrides): Promise<void>;

    publicMsgSender(overrides?: CallOverrides): Promise<string>;

    publicMsgData(overrides?: CallOverrides): Promise<string>;

    mustReceiveEth(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevert(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Reverting(string)"(message?: null): RevertingEventFilter;
    Reverting(message?: null): RevertingEventFilter;

    "TestForwarderMessage(string,bytes,address,address,address)"(
      message?: null,
      realMsgData?: null,
      realSender?: null,
      msgSender?: null,
      origin?: null
    ): TestForwarderMessageEventFilter;
    TestForwarderMessage(
      message?: null,
      realMsgData?: null,
      realSender?: null,
      msgSender?: null,
      origin?: null
    ): TestForwarderMessageEventFilter;
  };

  estimateGas: {
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
     */
    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
     * @param forwarder The address of the Forwarder contract that is being used.
     */
    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emitMessage(
      message: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    publicMsgSender(overrides?: CallOverrides): Promise<BigNumber>;

    publicMsgData(overrides?: CallOverrides): Promise<BigNumber>;

    mustReceiveEth(
      value: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    testRevert(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.
     */
    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.
     * @param forwarder The address of the Forwarder contract that is being used.
     */
    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emitMessage(
      message: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    publicMsgSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicMsgData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mustReceiveEth(
      value: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    testRevert(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
