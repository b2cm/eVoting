/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TestRelayHubForRegistrarInterface extends utils.Interface {
  functions: {
    "isStaked(address)": FunctionFragment;
    "setRelayManagerStaked(address,bool)": FunctionFragment;
    "verifyCanRegister(address)": FunctionFragment;
    "verifyRelayManagerStaked(address)": FunctionFragment;
    "onRelayServerRegistered(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isStaked"
      | "setRelayManagerStaked"
      | "verifyCanRegister"
      | "verifyRelayManagerStaked"
      | "onRelayServerRegistered"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "isStaked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRelayManagerStaked",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCanRegister",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRelayManagerStaked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onRelayServerRegistered",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "isStaked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRelayManagerStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCanRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRelayManagerStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRelayServerRegistered",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestRelayHubForRegistrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestRelayHubForRegistrarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isStaked(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    setRelayManagerStaked(
      relayManager: string,
      _isStaked: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    verifyCanRegister(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    verifyRelayManagerStaked(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    onRelayServerRegistered(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  isStaked(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setRelayManagerStaked(
    relayManager: string,
    _isStaked: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  verifyCanRegister(
    relayManager: string,
    overrides?: CallOverrides
  ): Promise<void>;

  verifyRelayManagerStaked(
    relayManager: string,
    overrides?: CallOverrides
  ): Promise<void>;

  onRelayServerRegistered(
    relayManager: string,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    isStaked(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setRelayManagerStaked(
      relayManager: string,
      _isStaked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyCanRegister(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyRelayManagerStaked(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onRelayServerRegistered(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    isStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setRelayManagerStaked(
      relayManager: string,
      _isStaked: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    verifyCanRegister(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyRelayManagerStaked(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onRelayServerRegistered(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRelayManagerStaked(
      relayManager: string,
      _isStaked: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    verifyCanRegister(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyRelayManagerStaked(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onRelayServerRegistered(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
