/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IRelayRegistrar {
  export type RelayInfoStruct = {
    lastSeenBlockNumber: BigNumberish;
    lastSeenTimestamp: BigNumberish;
    firstSeenBlockNumber: BigNumberish;
    firstSeenTimestamp: BigNumberish;
    urlParts: [BytesLike, BytesLike, BytesLike];
    relayManager: string;
  };

  export type RelayInfoStructOutput = [
    number,
    number,
    number,
    number,
    [string, string, string],
    string
  ] & {
    lastSeenBlockNumber: number;
    lastSeenTimestamp: number;
    firstSeenBlockNumber: number;
    firstSeenTimestamp: number;
    urlParts: [string, string, string];
    relayManager: string;
  };
}

export interface RelayRegistrarInterface extends utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "getCreationBlock()": FunctionFragment;
    "getRelayRegistrationMaxAge()": FunctionFragment;
    "setRelayRegistrationMaxAge(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "registerRelayServer(address,bytes32[3])": FunctionFragment;
    "getRelayInfo(address,address)": FunctionFragment;
    "readRelayInfos(address)": FunctionFragment;
    "readRelayInfosInRange(address,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "getCreationBlock"
      | "getRelayRegistrationMaxAge"
      | "setRelayRegistrationMaxAge"
      | "supportsInterface"
      | "registerRelayServer"
      | "getRelayInfo"
      | "readRelayInfos"
      | "readRelayInfosInRange"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayRegistrationMaxAge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayRegistrationMaxAge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRelayServer",
    values: [string, [BytesLike, BytesLike, BytesLike]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "readRelayInfos",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "readRelayInfosInRange",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayRegistrationMaxAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayRegistrationMaxAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRelayServer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readRelayInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readRelayInfosInRange",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RelayServerRegistered(address,address,bytes32[3])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayServerRegistered"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RelayServerRegisteredEventObject {
  relayManager: string;
  relayHub: string;
  relayUrl: [string, string, string];
}
export type RelayServerRegisteredEvent = TypedEvent<
  [string, string, [string, string, string]],
  RelayServerRegisteredEventObject
>;

export type RelayServerRegisteredEventFilter =
  TypedEventFilter<RelayServerRegisteredEvent>;

export interface RelayRegistrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelayRegistrarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     */
    getCreationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     */
    getRelayRegistrationMaxAge(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Change the maximum relay registration age.
     */
    setRelayRegistrationMaxAge(
      _relayRegistrationMaxAge: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * This function is called by Relay Servers in order to register or to update their registration.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     * @param url The URL of the Relay Server that is listening to the clients' requests.
     */
    registerRelayServer(
      relayHub: string,
      url: [BytesLike, BytesLike, BytesLike],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     * @param relayManager An address of a Relay Manager.
     */
    getRelayInfo(
      relayHub: string,
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<[IRelayRegistrar.RelayInfoStructOutput]>;

    /**
     * Read relay info of registered Relay Server from an on-chain storage.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     */
    readRelayInfos(
      relayHub: string,
      overrides?: CallOverrides
    ): Promise<
      [IRelayRegistrar.RelayInfoStructOutput[]] & {
        info: IRelayRegistrar.RelayInfoStructOutput[];
      }
    >;

    /**
     * Read relay info of registered Relay Server from an on-chain storage.
     * @param maxCount The maximum amount of relays to be returned by this function.
     * @param oldestBlockNumber The latest block number in which a Relay Server may be registered.
     * @param oldestBlockTimestamp The latest block timestamp in which a Relay Server may be registered.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     */
    readRelayInfosInRange(
      relayHub: string,
      oldestBlockNumber: BigNumberish,
      oldestBlockTimestamp: BigNumberish,
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IRelayRegistrar.RelayInfoStructOutput[]] & {
        info: IRelayRegistrar.RelayInfoStructOutput[];
      }
    >;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   */
  getCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   */
  getRelayRegistrationMaxAge(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Change the maximum relay registration age.
   */
  setRelayRegistrationMaxAge(
    _relayRegistrationMaxAge: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * This function is called by Relay Servers in order to register or to update their registration.
   * @param relayHub The address of the `RelayHub` contract for which this action is performed.
   * @param url The URL of the Relay Server that is listening to the clients' requests.
   */
  registerRelayServer(
    relayHub: string,
    url: [BytesLike, BytesLike, BytesLike],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * @param relayHub The address of the `RelayHub` contract for which this action is performed.
   * @param relayManager An address of a Relay Manager.
   */
  getRelayInfo(
    relayHub: string,
    relayManager: string,
    overrides?: CallOverrides
  ): Promise<IRelayRegistrar.RelayInfoStructOutput>;

  /**
   * Read relay info of registered Relay Server from an on-chain storage.
   * @param relayHub The address of the `RelayHub` contract for which this action is performed.
   */
  readRelayInfos(
    relayHub: string,
    overrides?: CallOverrides
  ): Promise<IRelayRegistrar.RelayInfoStructOutput[]>;

  /**
   * Read relay info of registered Relay Server from an on-chain storage.
   * @param maxCount The maximum amount of relays to be returned by this function.
   * @param oldestBlockNumber The latest block number in which a Relay Server may be registered.
   * @param oldestBlockTimestamp The latest block timestamp in which a Relay Server may be registered.
   * @param relayHub The address of the `RelayHub` contract for which this action is performed.
   */
  readRelayInfosInRange(
    relayHub: string,
    oldestBlockNumber: BigNumberish,
    oldestBlockTimestamp: BigNumberish,
    maxCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IRelayRegistrar.RelayInfoStructOutput[]>;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     */
    getCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     */
    getRelayRegistrationMaxAge(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Change the maximum relay registration age.
     */
    setRelayRegistrationMaxAge(
      _relayRegistrationMaxAge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * This function is called by Relay Servers in order to register or to update their registration.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     * @param url The URL of the Relay Server that is listening to the clients' requests.
     */
    registerRelayServer(
      relayHub: string,
      url: [BytesLike, BytesLike, BytesLike],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     * @param relayManager An address of a Relay Manager.
     */
    getRelayInfo(
      relayHub: string,
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<IRelayRegistrar.RelayInfoStructOutput>;

    /**
     * Read relay info of registered Relay Server from an on-chain storage.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     */
    readRelayInfos(
      relayHub: string,
      overrides?: CallOverrides
    ): Promise<IRelayRegistrar.RelayInfoStructOutput[]>;

    /**
     * Read relay info of registered Relay Server from an on-chain storage.
     * @param maxCount The maximum amount of relays to be returned by this function.
     * @param oldestBlockNumber The latest block number in which a Relay Server may be registered.
     * @param oldestBlockTimestamp The latest block timestamp in which a Relay Server may be registered.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     */
    readRelayInfosInRange(
      relayHub: string,
      oldestBlockNumber: BigNumberish,
      oldestBlockTimestamp: BigNumberish,
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IRelayRegistrar.RelayInfoStructOutput[]>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RelayServerRegistered(address,address,bytes32[3])"(
      relayManager?: string | null,
      relayHub?: string | null,
      relayUrl?: null
    ): RelayServerRegisteredEventFilter;
    RelayServerRegistered(
      relayManager?: string | null,
      relayHub?: string | null,
      relayUrl?: null
    ): RelayServerRegisteredEventFilter;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     */
    getCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     */
    getRelayRegistrationMaxAge(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Change the maximum relay registration age.
     */
    setRelayRegistrationMaxAge(
      _relayRegistrationMaxAge: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function is called by Relay Servers in order to register or to update their registration.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     * @param url The URL of the Relay Server that is listening to the clients' requests.
     */
    registerRelayServer(
      relayHub: string,
      url: [BytesLike, BytesLike, BytesLike],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     * @param relayManager An address of a Relay Manager.
     */
    getRelayInfo(
      relayHub: string,
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Read relay info of registered Relay Server from an on-chain storage.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     */
    readRelayInfos(
      relayHub: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Read relay info of registered Relay Server from an on-chain storage.
     * @param maxCount The maximum amount of relays to be returned by this function.
     * @param oldestBlockNumber The latest block number in which a Relay Server may be registered.
     * @param oldestBlockTimestamp The latest block timestamp in which a Relay Server may be registered.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     */
    readRelayInfosInRange(
      relayHub: string,
      oldestBlockNumber: BigNumberish,
      oldestBlockTimestamp: BigNumberish,
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     */
    getCreationBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     */
    getRelayRegistrationMaxAge(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Change the maximum relay registration age.
     */
    setRelayRegistrationMaxAge(
      _relayRegistrationMaxAge: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function is called by Relay Servers in order to register or to update their registration.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     * @param url The URL of the Relay Server that is listening to the clients' requests.
     */
    registerRelayServer(
      relayHub: string,
      url: [BytesLike, BytesLike, BytesLike],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     * @param relayManager An address of a Relay Manager.
     */
    getRelayInfo(
      relayHub: string,
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Read relay info of registered Relay Server from an on-chain storage.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     */
    readRelayInfos(
      relayHub: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Read relay info of registered Relay Server from an on-chain storage.
     * @param maxCount The maximum amount of relays to be returned by this function.
     * @param oldestBlockNumber The latest block number in which a Relay Server may be registered.
     * @param oldestBlockTimestamp The latest block timestamp in which a Relay Server may be registered.
     * @param relayHub The address of the `RelayHub` contract for which this action is performed.
     */
    readRelayInfosInRange(
      relayHub: string,
      oldestBlockNumber: BigNumberish,
      oldestBlockTimestamp: BigNumberish,
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
