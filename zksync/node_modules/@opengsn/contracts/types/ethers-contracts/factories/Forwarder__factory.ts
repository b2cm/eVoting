/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Forwarder, ForwarderInterface } from "../Forwarder";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "domainSeparator",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "domainValue",
        type: "bytes",
      },
    ],
    name: "DomainRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "typeHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "typeStr",
        type: "string",
      },
    ],
    name: "RequestTypeRegistered",
    type: "event",
  },
  {
    inputs: [],
    name: "EIP712_DOMAIN_TYPE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GENERIC_PARAMS",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "domains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "typeHashes",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "validUntilTime",
            type: "uint256",
          },
        ],
        internalType: "struct IForwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "domainSeparator",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "requestTypeHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "suffixData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "validUntilTime",
            type: "uint256",
          },
        ],
        internalType: "struct IForwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "domainSeparator",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "requestTypeHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "suffixData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "ret",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "typeName",
        type: "string",
      },
      {
        internalType: "string",
        name: "typeSuffix",
        type: "string",
      },
    ],
    name: "registerRequestType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
    ],
    name: "registerDomainSeparator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "validUntilTime",
            type: "uint256",
          },
        ],
        internalType: "struct IForwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "requestTypeHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "suffixData",
        type: "bytes",
      },
    ],
    name: "_getEncoded",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060006040518060a00160405280606181526020016200159660619139604051602001620000409190620000c8565b60408051601f1981840301815291905290506200005d8162000064565b5062000174565b8051602080830191909120600081815291829052604091829020805460ff19166001179055905181907f64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb20290620000bc9085906200010c565b60405180910390a25050565b6e08cdee4eec2e4c8a4cae2eacae6e85608b1b815260008251620000f481600f85016020870162000141565b602960f81b600f939091019283015250601001919050565b60208152600082518060208401526200012d81604085016020870162000141565b601f01601f19169190910160400192915050565b60005b838110156200015e57818101518382015260200162000144565b838111156200016e576000848401525b50505050565b61141280620001846000396000f3fe6080604052600436106100a05760003560e01c8063ad9f99c711610064578063ad9f99c714610199578063c3f28abd146101b9578063c722f177146101ce578063d9210be5146101fe578063e024dc7f1461021e578063e2b62f2d1461023f57600080fd5b806301ffc9a7146100ac578063066a310c146100e157806321fe98df146101035780632d0335ab146101335780639c7b45921461017757600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100cc6100c7366004610eeb565b61025f565b60405190151581526020015b60405180910390f35b3480156100ed57600080fd5b506100f6610296565b6040516100d891906111c5565b34801561010f57600080fd5b506100cc61011e366004610ed2565b60006020819052908152604090205460ff1681565b34801561013f57600080fd5b5061016961014e366004610ea2565b6001600160a01b031660009081526002602052604090205490565b6040519081526020016100d8565b34801561018357600080fd5b50610197610192366004610f15565b6102b2565b005b3480156101a557600080fd5b506101976101b4366004610f81565b6103a9565b3480156101c557600080fd5b506100f66103ca565b3480156101da57600080fd5b506100cc6101e9366004610ed2565b60016020526000908152604090205460ff1681565b34801561020a57600080fd5b50610197610219366004610f15565b6103e6565b61023161022c366004610f81565b6104e9565b6040516100d89291906111a2565b34801561024b57600080fd5b506100f661025a366004611029565b610747565b60006001600160e01b031982166309788f9960e21b148061029057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6040518060a001604052806061815260200161132a6061913981565b6000469050600060405180608001604052806052815260200161138b605291398051906020012086866040516102e99291906110fe565b604051809103902085856040516103019291906110fe565b6040805191829003822060208301949094528101919091526060810191909152608081018390523060a082015260c00160408051601f198184030181528282528051602080830191909120600081815260019283905293909320805460ff1916909117905592509081907f4bc68689cbe89a4a6333a3ab0a70093874da3e5bfb71e93102027f3f073687d8906103989085906111c5565b60405180910390a250505050505050565b6103b2876107e1565b6103c18787878787878761085e565b50505050505050565b60405180608001604052806052815260200161138b6052913981565b60005b8381101561049457600085858381811061040557610405611313565b909101356001600160f81b031916915050600560fb1b81148015906104385750602960f81b6001600160f81b0319821614155b6104815760405162461bcd60e51b81526020600482015260156024820152744657443a20696e76616c696420747970656e616d6560581b60448201526064015b60405180910390fd5b508061048c816112cc565b9150506103e9565b50600084846040518060a001604052806061815260200161132a6061913985856040516020016104c8959493929190611150565b60405160208183030381529060405290506104e281610a30565b5050505050565b600060606104fc8989898989898961085e565b61050589610a92565b60c089013515806105195750428960c00135115b61055c5760405162461bcd60e51b81526020600482015260146024820152731195d10e881c995c5d595cdd08195e1c1a5c995960621b6044820152606401610478565b600060408a01351561056d5750619c405b600061057c60a08c018c6111fc565b61058960208e018e610ea2565b60405160200161059b9392919061110e565b60408051601f1981840301815291905290506105bb8260608d0135611243565b60405a6105c990603f61127d565b6105d3919061125b565b10156106195760405162461bcd60e51b81526020600482015260156024820152744657443a20696e73756666696369656e742067617360581b6044820152606401610478565b61062960408c0160208d01610ea2565b6001600160a01b03168b606001358c604001358360405161064a9190611134565b600060405180830381858888f193505050503d8060008114610688576040519150601f19603f3d011682016040523d82523d6000602084013e61068d565b606091505b506040805180820190915260208082527f6578656375746520726573756c743a20737563636573733a202573207265743a9082015291955093506106d19085610b16565b6106da83610b5f565b60408b0135158015906106ed5750600047115b15610739576106ff60208c018c610ea2565b6001600160a01b03166108fc479081150290604051600060405180830381858888f19350505050158015610737573d6000803e3d6000fd5b505b505097509795505050505050565b6060836107576020870187610ea2565b6001600160a01b03166107706040880160208901610ea2565b6001600160a01b03166040880135606089013560808a013561079560a08c018c6111fc565b6040516107a39291906110fe565b6040519081900381206107c89796959493929160c08e0135908c908c906020016110ac565b6040516020818303038152906040529050949350505050565b6080810135600260006107f76020850185610ea2565b6001600160a01b03166001600160a01b03168152602001908152602001600020541461085b5760405162461bcd60e51b815260206004820152601360248201527208cae887440dcdedcc6ca40dad2e6dac2e8c6d606b1b6044820152606401610478565b50565b60008681526001602052604090205460ff166108bc5760405162461bcd60e51b815260206004820152601d60248201527f4657443a20756e7265676973746572656420646f6d61696e207365702e0000006044820152606401610478565b60008581526020819052604090205460ff1661091a5760405162461bcd60e51b815260206004820152601a60248201527f4657443a20756e726567697374657265642074797065686173680000000000006044820152606401610478565b60008661092989888888610747565b805160209182012060405161095593920161190160f01b81526002810192909252602282015260420190565b60408051601f19818403018152919052805160209091012090503215806109da57506109846020890189610ea2565b6001600160a01b03166109cf84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050610ba29050565b6001600160a01b0316145b610a265760405162461bcd60e51b815260206004820152601760248201527f4657443a207369676e6174757265206d69736d617463680000000000000000006044820152606401610478565b5050505050505050565b8051602080830191909120600081815291829052604091829020805460ff19166001179055905181907f64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb20290610a869085906111c5565b60405180910390a25050565b608081013560026000610aa86020850185610ea2565b6001600160a01b0316815260208101919091526040016000908120805491610acf836112cc565b919050551461085b5760405162461bcd60e51b815260206004820152601360248201527208cae887440dcdedcc6ca40dad2e6dac2e8c6d606b1b6044820152606401610478565b610b5b8282604051602401610b2c9291906111d8565b60408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052610bc6565b5050565b61085b81604051602401610b7391906111c5565b60408051601f198184030181529190526020810180516001600160e01b03166305f3bfab60e11b179052610bc6565b6000806000610bb18585610bcf565b91509150610bbe81610c15565b509392505050565b61085b81610d63565b600080825160411415610c065760208301516040840151606085015160001a610bfa87828585610d84565b94509450505050610c0e565b506000905060025b9250929050565b6000816004811115610c2957610c296112fd565b1415610c325750565b6001816004811115610c4657610c466112fd565b1415610c945760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610478565b6002816004811115610ca857610ca86112fd565b1415610cf65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610478565b6003816004811115610d0a57610d0a6112fd565b141561085b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610478565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610dbb5750600090506003610e3f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610e0f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e3857600060019250925050610e3f565b9150600090505b94509492505050565b60008083601f840112610e5a57600080fd5b50813567ffffffffffffffff811115610e7257600080fd5b602083019150836020828501011115610c0e57600080fd5b600060e08284031215610e9c57600080fd5b50919050565b600060208284031215610eb457600080fd5b81356001600160a01b0381168114610ecb57600080fd5b9392505050565b600060208284031215610ee457600080fd5b5035919050565b600060208284031215610efd57600080fd5b81356001600160e01b031981168114610ecb57600080fd5b60008060008060408587031215610f2b57600080fd5b843567ffffffffffffffff80821115610f4357600080fd5b610f4f88838901610e48565b90965094506020870135915080821115610f6857600080fd5b50610f7587828801610e48565b95989497509550505050565b600080600080600080600060a0888a031215610f9c57600080fd5b873567ffffffffffffffff80821115610fb457600080fd5b610fc08b838c01610e8a565b985060208a0135975060408a0135965060608a0135915080821115610fe457600080fd5b610ff08b838c01610e48565b909650945060808a013591508082111561100957600080fd5b506110168a828b01610e48565b989b979a50959850939692959293505050565b6000806000806060858703121561103f57600080fd5b843567ffffffffffffffff8082111561105757600080fd5b61106388838901610e8a565b9550602087013594506040870135915080821115610f6857600080fd5b6000815180845261109881602086016020860161129c565b601f01601f19169290920160200192915050565b8a81528960208201528860408201528760608201528660808201528560a08201528460c08201528360e082015260006101008385828501376000929093019092019081529a9950505050505050505050565b8183823760009101908152919050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b6000825161114681846020870161129c565b9190910192915050565b84868237600085820160008152600560fb1b81528551611177816001840160208a0161129c565b600b60fa1b600192909101918201528385600283013760009301600201928352509095945050505050565b82151581526040602082015260006111bd6040830184611080565b949350505050565b602081526000610ecb6020830184611080565b6040815260006111eb6040830185611080565b905082151560208301529392505050565b6000808335601e1984360301811261121357600080fd5b83018035915067ffffffffffffffff82111561122e57600080fd5b602001915036819003821315610c0e57600080fd5b60008219821115611256576112566112e7565b500190565b60008261127857634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611297576112976112e7565b500290565b60005b838110156112b757818101518382015260200161129f565b838111156112c6576000848401525b50505050565b60006000198214156112e0576112e06112e7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c54696d65454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a264697066735822122009100d8d3aba57752af240d06365270b68687d681fc803fca825897c4af3e1d964736f6c63430008070033616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c54696d65";

type ForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Forwarder__factory extends ContractFactory {
  constructor(...args: ForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<Forwarder> {
    return super.deploy(overrides || {}) as Promise<Forwarder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Forwarder {
    return super.attach(address) as Forwarder;
  }
  override connect(signer: Signer): Forwarder__factory {
    return super.connect(signer) as Forwarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ForwarderInterface {
    return new utils.Interface(_abi) as ForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Forwarder {
    return new Contract(address, _abi, signerOrProvider) as Forwarder;
  }
}
