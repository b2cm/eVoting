/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IPenalizer, IPenalizerInterface } from "../IPenalizer";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "readyBlockNumber",
        type: "uint256",
      },
    ],
    name: "CommitAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commitHash",
        type: "bytes32",
      },
    ],
    name: "commit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "unsignedTx1",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature1",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "unsignedTx2",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature2",
        type: "bytes",
      },
      {
        internalType: "contract IRelayHub",
        name: "hub",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "randomValue",
        type: "uint256",
      },
    ],
    name: "penalizeRepeatedNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "unsignedTx",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "contract IRelayHub",
        name: "hub",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "randomValue",
        type: "uint256",
      },
    ],
    name: "penalizeIllegalTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "versionPenalizer",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPenalizeBlockDelay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPenalizeBlockExpiration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPenalizer__factory {
  static readonly abi = _abi;
  static createInterface(): IPenalizerInterface {
    return new utils.Interface(_abi) as IPenalizerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPenalizer {
    return new Contract(address, _abi, signerOrProvider) as IPenalizer;
  }
}
