/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestRecipient, TestRecipientInterface } from "../TestRecipient";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Reverting",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "realSender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "origin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "msgValue",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gasLeft",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "SampleRecipientEmitted",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "getTrustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paymaster",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
  {
    inputs: [],
    name: "testRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_paymaster",
        type: "address",
      },
    ],
    name: "setWithdrawDuringRelayedCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "recipientRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "emitMessage",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAllBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "dontEmitMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "emitMessageNoParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "len",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "doRevert",
        type: "bool",
      },
    ],
    name: "checkReturnValues",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "doRevert",
        type: "bool",
      },
    ],
    name: "checkNoReturnValues",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "singletonPaymaster",
        type: "address",
      },
    ],
    name: "withdrawFromSingletonWhitelistPaymaster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "captureTheFlag",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610ae1380380610ae183398101604081905261002f91610050565b600080546001600160a01b0319166001600160a01b03831617905550610080565b60006020828403121561006257600080fd5b81516001600160a01b038116811461007957600080fd5b9392505050565b610a528061008f6000396000f3fe6080604052600436106100ec5760003560e01c8063a26388bb1161008a578063ce1b815f11610059578063ce1b815f1461028c578063da76d5cd146102aa578063dc59c90f146102c8578063de6e56f6146102dd576100f3565b8063a26388bb14610223578063b51fab0a14610238578063b973c5a614610257578063c095ad3c1461026c576100f3565b80633b17eadc116100c65780633b17eadc14610172578063572b6c051461018757806360e3e7fe146101c65780638db93e3d146101e6576100f3565b806316e4cbf914610105578063239e26f2146101425780632ac0df2614610152576100f3565b366100f357005b60001960018190556002819055600355005b34801561011157600080fd5b50600454610125906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014e57600080fd5b505b005b6101656101603660046107a5565b6102fd565b6040516101399190610901565b34801561017e57600080fd5b506101506103a3565b34801561019357600080fd5b506101b66101a23660046106f4565b6000546001600160a01b0391821691161490565b6040519015158152602001610139565b3480156101d257600080fd5b506101506101e13660046106f4565b61041f565b3480156101f257600080fd5b506101506102013660046106f4565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b34801561022f57600080fd5b5061015061047c565b34801561024457600080fd5b50610150610253366004610733565b5050565b34801561026357600080fd5b50610150610524565b34801561027857600080fd5b50610150610287366004610718565b61056c565b34801561029857600080fd5b506000546001600160a01b0316610125565b3480156102b657600080fd5b506101506102c5366004610856565b50565b3480156102d457600080fd5b50610150610577565b3480156102e957600080fd5b506101656102f8366004610888565b610617565b606060005a6004549091506001600160a01b03161561031e5761031e6103a3565b7f757e1fd4f3cac236f4594151fa8cb2b3f650fe76098389e524823b76ccbaaf41836103486106ab565b33323486476040516103609796959493929190610914565b60405180910390a1505060408051808201909152601881527f656d69744d6573736167652072657475726e2076616c756500000000000000006020820152919050565b6004805460408051630ec5fab760e21b815290516001600160a01b0390921692633b17eadc9282820192602092908290030181600087803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c5919061086f565b60405163da76d5cd60e01b8152600160048201526001600160a01b0382169063da76d5cd90602401600060405180830381600087803b15801561046157600080fd5b505af1158015610475573d6000803e3d6000fd5b5050505050565b30156104bd5760405162461bcd60e51b815260206004820152600b60248201526a185b1dd85e5cc819985a5b60aa1b60448201526064015b60405180910390fd5b7f3f110cf99894407239c5fa1bf0523ea12b54ef6eb3e88be600b6a7f0ff76eb0e60405161051a906020808252818101527f696620796f7520736565207468697320726576657274206661696c65642e2e2e604082015260600190565b60405180910390a1565b60405162461bcd60e51b815260206004820181905260248201527f74686973206d6574686f64207265766572747320636f6e73697374656e746c7960448201526064016104b4565b80156102c557600080fd5b7f757e1fd4f3cac236f4594151fa8cb2b3f650fe76098389e524823b76ccbaaf416105a06106ab565b333260005a6040805160e08082526019908201527f4d6574686f642077697468206e6f20706172616d6574657273000000000000006101008201526001600160a01b03968716602082015294861690850152939091166060830152608082015260a08101919091524760c08201526101200161051a565b606060006040518060c00160405280608f815260200161098e608f9139905083815110156106805760405162461bcd60e51b8152602060048201526016602482015275696e76616c6964206c656e3a20746f6f206c6172676560501b60448201526064016104b4565b8381528083156106a35760405162461bcd60e51b81526004016104b49190610901565b509392505050565b6000601436108015906106c857506000546001600160a01b031633145b156106da575060131936013560601c90565b503390565b803580151581146106ef57600080fd5b919050565b60006020828403121561070657600080fd5b813561071181610978565b9392505050565b60006020828403121561072a57600080fd5b610711826106df565b6000806020838503121561074657600080fd5b823567ffffffffffffffff8082111561075e57600080fd5b818501915085601f83011261077257600080fd5b81358181111561078157600080fd5b86602082850101111561079357600080fd5b60209290920196919550909350505050565b6000602082840312156107b757600080fd5b813567ffffffffffffffff808211156107cf57600080fd5b818401915084601f8301126107e357600080fd5b8135818111156107f5576107f5610962565b604051601f8201601f19908116603f0116810190838211818310171561081d5761081d610962565b8160405282815287602084870101111561083657600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561086857600080fd5b5035919050565b60006020828403121561088157600080fd5b5051919050565b6000806040838503121561089b57600080fd5b823591506108ab602084016106df565b90509250929050565b6000815180845260005b818110156108da576020818501810151868301820152016108be565b818111156108ec576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061071160208301846108b4565b60e08152600061092760e083018a6108b4565b6001600160a01b039889166020840152968816604083015250939095166060840152608083019190915260a082015260c00191909152919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146102c557600080fdfe746869732069732061206c6f6e67206d65737361676520746861742077652061726520676f696e6720746f2072657475726e206120736d616c6c20706172742066726f6d2e20776520646f6e2774207573652061206c6f6f702073696e63652077652077616e74206120666978656420676173207573616765206f6620746865206d6574686f6420697473656c662ea26469706673582212205fbfc43f0c3292a29eca3738870a7964ee7b1dcf4e8f9d7bed00d0c9ef61b30064736f6c63430008070033";

type TestRecipientConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestRecipientConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestRecipient__factory extends ContractFactory {
  constructor(...args: TestRecipientConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    forwarder: string,
    overrides?: Overrides & { from?: string }
  ): Promise<TestRecipient> {
    return super.deploy(forwarder, overrides || {}) as Promise<TestRecipient>;
  }
  override getDeployTransaction(
    forwarder: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(forwarder, overrides || {});
  }
  override attach(address: string): TestRecipient {
    return super.attach(address) as TestRecipient;
  }
  override connect(signer: Signer): TestRecipient__factory {
    return super.connect(signer) as TestRecipient__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestRecipientInterface {
    return new utils.Interface(_abi) as TestRecipientInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestRecipient {
    return new Contract(address, _abi, signerOrProvider) as TestRecipient;
  }
}
