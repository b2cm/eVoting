declare const _exports: {
    alterAt: (i: any) => (f: any) => (xs: any) => any;
    catMaybes: (a: any) => any;
    concatMap: (b: any) => (a: any) => any;
    delete: (dictEq: any) => (v1: any) => (v2: any) => any;
    deleteAt: (i: any) => (l: any) => any;
    deleteBy: (v: any) => (v1: any) => (v2: any) => any;
    difference: (dictEq: any) => (xs: any) => (ys: any) => any;
    dropWhile: (p: any) => (xs: any) => any;
    elemIndex: (dictEq: any) => (x: any) => (xs: any) => any;
    elemLastIndex: (dictEq: any) => (x: any) => (xs: any) => any;
    filterM: (dictMonad: any) => (p: any) => (xs: any) => any;
    findIndex: (f: any) => (xs: any) => any;
    findLastIndex: (f: any) => (xs: any) => any;
    foldM: (dictMonad: any) => (f: any) => (a: any) => (xs: any) => any;
    fromFoldable: (dictFoldable: any) => (xs: any) => any[];
    group: (dictEq: any) => (xs: any) => any;
    "group'": (dictOrd: any) => ($69: any) => any;
    groupBy: (op: any) => (__copy_xs: any) => any;
    head: (xs: any) => any;
    index: (xs: any) => (i: any) => any;
    init: (xs: any) => any;
    insert: (dictOrd: any) => (x: any) => (ys: any) => any;
    insertAt: (i: any) => (a: any) => (l: any) => any;
    insertBy: (cmp: any) => (x: any) => (ys: any) => any;
    intersect: (dictEq: any) => (xs: any) => (ys: any) => any;
    intersectBy: (eq: any) => (xs: any) => (ys: any) => any;
    last: (xs: any) => any;
    many: (dictAlternative: any) => (dictLazy: any) => (v: any) => any;
    mapMaybe: (f: any) => (a: any) => any;
    mapWithIndex: (f: any) => (xs: any) => any[];
    modifyAt: (i: any) => (f: any) => (xs: any) => any;
    nub: (dictEq: any) => (xs: any) => any;
    nubBy: (eq: any) => (xs: any) => any;
    null: (xs: any) => boolean;
    singleton: (a: any) => any[];
    some: (dictAlternative: any) => (dictLazy: any) => (v: any) => any;
    sort: (dictOrd: any) => (xs: any) => any;
    sortBy: (comp: any) => (xs: any) => any;
    span: (p: any) => (__copy_xs: any) => {
        init: any;
        rest: any;
    };
    tail: (xs: any) => any;
    takeWhile: (p: any) => (xs: any) => any;
    toUnfoldable: (dictUnfoldable: any) => any;
    uncons: (xs: any) => any;
    union: (dictEq: any) => (xs: any) => (ys: any) => any;
    unionBy: (eq: any) => (xs: any) => (ys: any) => any;
    unzip: (xs: any) => any;
    updateAt: (i: any) => (a: any) => (l: any) => any;
    zip: (xs: any) => (ys: any) => any[];
    zipWithA: (dictApplicative: any) => (f: any) => (xs: any) => (ys: any) => any;
    concat: (xss: any) => any[];
    cons: (e: any) => (l: any) => any[];
    drop: (n: any) => (l: any) => any;
    filter: (f: any) => (xs: any) => any;
    length: (xs: any) => any;
    partition: (f: any) => (xs: any) => {
        yes: any[];
        no: any[];
    };
    range: (start: any) => (end: any) => any[];
    reverse: (l: any) => any;
    slice: (s: any) => (e: any) => (l: any) => any;
    snoc: (l: any) => (e: any) => any;
    take: (n: any) => (l: any) => any;
    zipWith: (f: any) => (xs: any) => (ys: any) => any[];
};
export = _exports;
