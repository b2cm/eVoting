{"id":"2f56cb336dbe736ae910875ad2413514","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"contracts/Register.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Register {\n    address[] private eligibleVoters;\n    address[] public voters;\n    bytes[] private votersHashedIDs;\n    bytes[] private lrs;\n    string[] private hashedIDs;\n    mapping(bytes => bytes) private lrsPublicKeys; // hashedID => lrsPublicKey (Linkable Ring Signature pk)\n    uint256 private registrationStart;\n    uint256 private registrationEnd;\n    address public admin;\n    string public sessionID;\n\n    event HashedIDStored();\n    event VoterAdded();\n    event LRSPKStored();\n    event RegistrationPeriodSet();\n    event SessionIDSet();\n\n    struct VoterData {\n        bytes pubKey;\n        bytes hashedId;\n    }\n\n    VoterData[] public voterData;\n\n    modifier onlyAdmin () {\n        require(msg.sender == admin, 'Not the admin');\n\n        _;\n    }\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    function setSessionID(string memory _id) external {\n        sessionID = _id;\n        emit SessionIDSet();\n    }\n\n    // This function is yet not secure because it can be called by anyone.\n    // This function should be called just by the verifier contranct (proof of correct membership) deployed on L1.\n    function addVoter(address _voter) external {\n        voters.push(_voter);\n        emit VoterAdded();\n    }\n\n    function setRegistrationPeriod(uint256 _start, uint256 _end) external onlyAdmin {\n        require(_start < _end, 'The registration cannot end before it even starts');\n        require(_start >= block.timestamp && _end > block.timestamp, 'The registration can not take place in the past.');\n\n        registrationStart = _start;\n        registrationEnd = _end;\n\n        emit RegistrationPeriodSet();\n    }\n\n    function isRegistrationOpen() public view returns (bool isOpen) {\n        isOpen = (registrationEnd > block.timestamp && registrationStart < block.timestamp);\n    }\n\n\n    function getHashedIDs() external view returns (bytes[] memory _hashedIDs) {\n        uint256 length = votersHashedIDs.length;\n        _hashedIDs = new bytes[](length);\n        for (uint256 i = 0; i < length; i++) {\n            _hashedIDs[i] = votersHashedIDs[i];\n        }\n    }\n\n    function storeVoterData(bytes memory _hashedID, bytes memory _publicKey) external {\n        //require(isRegistrationOpen(), 'Registration has not started yet or has already ended');\n        votersHashedIDs.push(_hashedID);\n        lrsPublicKeys[_hashedID] = _publicKey;\n        lrs.push(_publicKey);\n        VoterData memory data = VoterData(_publicKey, _hashedID);\n        voterData.push(data);\n        emit HashedIDStored();\n        emit LRSPKStored();\n    }\n\n    function getVoterData() public view returns(VoterData[] memory ) {\n        return voterData;\n    }\n\n\n    function getLRSGroup() external view returns(bytes[] memory _lrs) {\n        _lrs = new bytes[](lrs.length);\n        for (uint256 i = 0; i < lrs.length; i++) {\n            _lrs[i] = lrs[i];\n        }\n    }\n\n    function addEligibleVoter(address _voter) external {\n        eligibleVoters.push(_voter);\n        emit VoterAdded();\n    }\n\n\n}"}},"settings":{"optimizer":{"enabled":false,"mode":"z"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":null,"formattedMessage":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are checking for 'block.timestamp' in your code, which might lead to  │\n│ unexpected behavior. Due to the nature of the zkEVM, the timestamp of a block actually refers to │\n│ the timestamp of the whole batch that will be sent to L1 (meaning, the timestamp of this batch   │\n│ started being processed).                                                                        │\n│ We will provide a custom method to access the L2 block timestamp from the smart contract code in │\n│ the future.                                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> contracts/Register.sol\n","message":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are checking for 'block.timestamp' in your code, which might lead to  │\n│ unexpected behavior. Due to the nature of the zkEVM, the timestamp of a block actually refers to │\n│ the timestamp of the whole batch that will be sent to L1 (meaning, the timestamp of this batch   │\n│ started being processed).                                                                        │\n│ We will provide a custom method to access the L2 block timestamp from the smart contract code in │\n│ the future.                                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘","severity":"warning","sourceLocation":{"file":"0","start":1500,"end":1515},"type":"Warning"},{"component":"general","errorCode":null,"formattedMessage":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are checking for 'block.timestamp' in your code, which might lead to  │\n│ unexpected behavior. Due to the nature of the zkEVM, the timestamp of a block actually refers to │\n│ the timestamp of the whole batch that will be sent to L1 (meaning, the timestamp of this batch   │\n│ started being processed).                                                                        │\n│ We will provide a custom method to access the L2 block timestamp from the smart contract code in │\n│ the future.                                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> contracts/Register.sol\n","message":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are checking for 'block.timestamp' in your code, which might lead to  │\n│ unexpected behavior. Due to the nature of the zkEVM, the timestamp of a block actually refers to │\n│ the timestamp of the whole batch that will be sent to L1 (meaning, the timestamp of this batch   │\n│ started being processed).                                                                        │\n│ We will provide a custom method to access the L2 block timestamp from the smart contract code in │\n│ the future.                                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘","severity":"warning","sourceLocation":{"file":"0","start":1526,"end":1541},"type":"Warning"},{"component":"general","errorCode":null,"formattedMessage":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are checking for 'block.timestamp' in your code, which might lead to  │\n│ unexpected behavior. Due to the nature of the zkEVM, the timestamp of a block actually refers to │\n│ the timestamp of the whole batch that will be sent to L1 (meaning, the timestamp of this batch   │\n│ started being processed).                                                                        │\n│ We will provide a custom method to access the L2 block timestamp from the smart contract code in │\n│ the future.                                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> contracts/Register.sol\n","message":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are checking for 'block.timestamp' in your code, which might lead to  │\n│ unexpected behavior. Due to the nature of the zkEVM, the timestamp of a block actually refers to │\n│ the timestamp of the whole batch that will be sent to L1 (meaning, the timestamp of this batch   │\n│ started being processed).                                                                        │\n│ We will provide a custom method to access the L2 block timestamp from the smart contract code in │\n│ the future.                                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘","severity":"warning","sourceLocation":{"file":"0","start":1817,"end":1832},"type":"Warning"},{"component":"general","errorCode":null,"formattedMessage":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are checking for 'block.timestamp' in your code, which might lead to  │\n│ unexpected behavior. Due to the nature of the zkEVM, the timestamp of a block actually refers to │\n│ the timestamp of the whole batch that will be sent to L1 (meaning, the timestamp of this batch   │\n│ started being processed).                                                                        │\n│ We will provide a custom method to access the L2 block timestamp from the smart contract code in │\n│ the future.                                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n--> contracts/Register.sol\n","message":"\n┌──────────────────────────────────────────────────────────────────────────────────────────────────┐\n│ Warning: It looks like you are checking for 'block.timestamp' in your code, which might lead to  │\n│ unexpected behavior. Due to the nature of the zkEVM, the timestamp of a block actually refers to │\n│ the timestamp of the whole batch that will be sent to L1 (meaning, the timestamp of this batch   │\n│ started being processed).                                                                        │\n│ We will provide a custom method to access the L2 block timestamp from the smart contract code in │\n│ the future.                                                                                      │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘","severity":"warning","sourceLocation":{"file":"0","start":1856,"end":1871},"type":"Warning"}],"version":"0.8.17","long_version":"0.8.17+commit.8df45f5f.Emscripten.clang","zk_version":"1.3.8","sources":{"contracts/Register.sol":{"id":0,"ast":{"nodeType":"SourceUnit","name":null,"src":"31:3045:0","memberName":null,"functionName":null,"AST":null,"nodes":[{"nodeType":"PragmaDirective","name":null,"src":"31:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ContractDefinition","name":"Register","src":"56:3020:0","memberName":null,"functionName":null,"AST":null,"nodes":[{"nodeType":"VariableDeclaration","name":"eligibleVoters","src":"80:32:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"voters","src":"118:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"votersHashedIDs","src":"147:31:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"lrs","src":"184:19:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"hashedIDs","src":"209:26:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"lrsPublicKeys","src":"241:45:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"registrationStart","src":"349:33:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"registrationEnd","src":"388:31:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"admin","src":"425:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"sessionID","src":"451:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EventDefinition","name":"HashedIDStored","src":"481:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EventDefinition","name":"VoterAdded","src":"509:19:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EventDefinition","name":"LRSPKStored","src":"533:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EventDefinition","name":"RegistrationPeriodSet","src":"558:30:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EventDefinition","name":"SessionIDSet","src":"593:21:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"StructDefinition","name":"VoterData","src":"620:70:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":[{"nodeType":"VariableDeclaration","name":"pubKey","src":"647:12:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"hashedId","src":"669:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"voterData","src":"696:28:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ModifierDefinition","name":"onlyAdmin","src":"731:96:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"753:74:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"763:45:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"763:45:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"BinaryOperation","name":null,"src":"771:19:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"MemberAccess","name":null,"src":"771:10:0","memberName":"sender","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"msg","src":"771:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"Identifier","name":"admin","src":"785:5:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"Literal","name":null,"src":"792:15:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":"Not the admin","initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"require","src":"763:7:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"PlaceholderStatement","name":null,"src":"819:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"","src":"833:49:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"847:35:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"857:18:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"857:18:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"admin","src":"857:5:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"MemberAccess","name":null,"src":"865:10:0","memberName":"sender","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"msg","src":"865:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"setSessionID","src":"888:111:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"938:61:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"948:15:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"948:15:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"sessionID","src":"948:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"Identifier","name":"_id","src":"960:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EmitStatement","name":null,"src":"973:19:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":{"nodeType":"FunctionCall","name":null,"src":"978:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"SessionIDSet","src":"978:12:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"addVoter","src":"1195:106:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"1238:63:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"1248:19:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"1248:19:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"_voter","src":"1260:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"MemberAccess","name":null,"src":"1248:11:0","memberName":"push","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"voters","src":"1248:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EmitStatement","name":null,"src":"1277:17:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":{"nodeType":"FunctionCall","name":null,"src":"1282:12:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"VoterAdded","src":"1282:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"setRegistrationPeriod","src":"1307:402:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"1387:322:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"1397:75:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"1397:75:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"BinaryOperation","name":null,"src":"1405:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"Identifier","name":"_start","src":"1405:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"Identifier","name":"_end","src":"1414:4:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"Literal","name":null,"src":"1420:51:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":"The registration cannot end before it even starts","initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"require","src":"1397:7:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ExpressionStatement","name":null,"src":"1482:112:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"1482:112:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"BinaryOperation","name":null,"src":"1490:51:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"BinaryOperation","name":null,"src":"1490:25:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"Identifier","name":"_start","src":"1490:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"MemberAccess","name":null,"src":"1500:15:0","memberName":"timestamp","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"block","src":"1500:5:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"BinaryOperation","name":null,"src":"1519:22:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"Identifier","name":"_end","src":"1519:4:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"MemberAccess","name":null,"src":"1526:15:0","memberName":"timestamp","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"block","src":"1526:5:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"Literal","name":null,"src":"1543:50:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":"The registration can not take place in the past.","initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"require","src":"1482:7:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ExpressionStatement","name":null,"src":"1605:26:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"1605:26:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"registrationStart","src":"1605:17:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"Identifier","name":"_start","src":"1625:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ExpressionStatement","name":null,"src":"1641:22:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"1641:22:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"registrationEnd","src":"1641:15:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"Identifier","name":"_end","src":"1659:4:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EmitStatement","name":null,"src":"1674:28:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":{"nodeType":"FunctionCall","name":null,"src":"1679:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"RegistrationPeriodSet","src":"1679:21:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"isRegistrationOpen","src":"1715:164:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"1779:100:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"1789:83:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"1789:83:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"isOpen","src":"1789:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"TupleExpression","name":null,"src":"1798:74:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":[{"nodeType":"BinaryOperation","name":null,"src":"1799:72:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"BinaryOperation","name":null,"src":"1799:33:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"Identifier","name":"registrationEnd","src":"1799:15:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"MemberAccess","name":null,"src":"1817:15:0","memberName":"timestamp","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"block","src":"1817:5:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"BinaryOperation","name":null,"src":"1836:35:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"Identifier","name":"registrationStart","src":"1836:17:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"MemberAccess","name":null,"src":"1856:15:0","memberName":"timestamp","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"block","src":"1856:5:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"getHashedIDs","src":"1886:277:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"1960:203:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"VariableDeclarationStatement","name":null,"src":"1970:39:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":[{"nodeType":"VariableDeclaration","name":"length","src":"1970:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":{"nodeType":"MemberAccess","name":null,"src":"1987:22:0","memberName":"length","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"votersHashedIDs","src":"1987:15:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ExpressionStatement","name":null,"src":"2019:32:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"2019:32:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"_hashedIDs","src":"2019:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"FunctionCall","name":null,"src":"2032:19:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"length","src":"2044:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"NewExpression","name":null,"src":"2032:11:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ForStatement","name":null,"src":"2061:96:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"2098:59:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"2112:34:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"2112:34:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"IndexAccess","name":null,"src":"2112:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"_hashedIDs","src":"2112:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"i","src":"2123:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"IndexAccess","name":null,"src":"2128:18:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"votersHashedIDs","src":"2128:15:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"i","src":"2144:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":{"nodeType":"BinaryOperation","name":null,"src":"2081:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"Identifier","name":"i","src":"2081:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"Identifier","name":"length","src":"2085:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"initializationExpression":{"nodeType":"VariableDeclarationStatement","name":null,"src":"2066:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":[{"nodeType":"VariableDeclaration","name":"i","src":"2066:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":{"nodeType":"Literal","name":null,"src":"2078:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":"0","initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":{"nodeType":"ExpressionStatement","name":null,"src":"2093:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"UnaryOperation","name":null,"src":"2093:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":{"nodeType":"Identifier","name":"i","src":"2093:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"storeVoterData","src":"2169:460:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"2251:378:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"2359:31:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"2359:31:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"_hashedID","src":"2380:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"MemberAccess","name":null,"src":"2359:20:0","memberName":"push","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"votersHashedIDs","src":"2359:15:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ExpressionStatement","name":null,"src":"2400:37:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"2400:37:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"IndexAccess","name":null,"src":"2400:24:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"lrsPublicKeys","src":"2400:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"_hashedID","src":"2414:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"Identifier","name":"_publicKey","src":"2427:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ExpressionStatement","name":null,"src":"2447:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"2447:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"_publicKey","src":"2456:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"MemberAccess","name":null,"src":"2447:8:0","memberName":"push","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"lrs","src":"2447:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclarationStatement","name":null,"src":"2477:56:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":[{"nodeType":"VariableDeclaration","name":"data","src":"2477:21:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":{"nodeType":"FunctionCall","name":null,"src":"2501:32:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"_publicKey","src":"2511:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"Identifier","name":"_hashedID","src":"2523:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"VoterData","src":"2501:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ExpressionStatement","name":null,"src":"2543:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"2543:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"data","src":"2558:4:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"MemberAccess","name":null,"src":"2543:14:0","memberName":"push","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"voterData","src":"2543:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EmitStatement","name":null,"src":"2573:21:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":{"nodeType":"FunctionCall","name":null,"src":"2578:16:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"HashedIDStored","src":"2578:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EmitStatement","name":null,"src":"2604:18:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":{"nodeType":"FunctionCall","name":null,"src":"2609:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"LRSPKStored","src":"2609:11:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"getVoterData","src":"2635:98:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"2700:33:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"Return","name":null,"src":"2710:16:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"voterData","src":"2717:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"getLRSGroup","src":"2740:204:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"2806:138:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"2816:30:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"2816:30:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"_lrs","src":"2816:4:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"FunctionCall","name":null,"src":"2823:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"MemberAccess","name":null,"src":"2835:10:0","memberName":"length","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"lrs","src":"2835:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"NewExpression","name":null,"src":"2823:11:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ForStatement","name":null,"src":"2856:82:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"2897:41:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"2911:16:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"2911:16:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"IndexAccess","name":null,"src":"2911:7:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"_lrs","src":"2911:4:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"i","src":"2916:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"IndexAccess","name":null,"src":"2921:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":{"nodeType":"Identifier","name":"lrs","src":"2921:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"indexExpression":{"nodeType":"Identifier","name":"i","src":"2925:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":{"nodeType":"BinaryOperation","name":null,"src":"2876:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":{"nodeType":"Identifier","name":"i","src":"2876:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightExpression":{"nodeType":"MemberAccess","name":null,"src":"2880:10:0","memberName":"length","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"lrs","src":"2880:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"initializationExpression":{"nodeType":"VariableDeclarationStatement","name":null,"src":"2861:13:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":[{"nodeType":"VariableDeclaration","name":"i","src":"2861:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":{"nodeType":"Literal","name":null,"src":"2873:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":"0","initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":{"nodeType":"ExpressionStatement","name":null,"src":"2892:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"UnaryOperation","name":null,"src":"2892:3:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":{"nodeType":"Identifier","name":"i","src":"2892:1:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"addEligibleVoter","src":"2950:122:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"3001:71:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"3011:27:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"FunctionCall","name":null,"src":"3011:27:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[{"nodeType":"Identifier","name":"_voter","src":"3031:6:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"MemberAccess","name":null,"src":"3011:19:0","memberName":"push","functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"eligibleVoters","src":"3011:14:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"EmitStatement","name":null,"src":"3048:17:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":{"nodeType":"FunctionCall","name":null,"src":"3053:12:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":[],"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"VoterAdded","src":"3053:10:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}}},"contracts":{"contracts/Register.sol":{"Register":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[],"name":"HashedIDStored","type":"event"},{"anonymous":false,"inputs":[],"name":"LRSPKStored","type":"event"},{"anonymous":false,"inputs":[],"name":"RegistrationPeriodSet","type":"event"},{"anonymous":false,"inputs":[],"name":"SessionIDSet","type":"event"},{"anonymous":false,"inputs":[],"name":"VoterAdded","type":"event"},{"inputs":[{"internalType":"address","name":"_voter","type":"address"}],"name":"addEligibleVoter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_voter","type":"address"}],"name":"addVoter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getHashedIDs","outputs":[{"internalType":"bytes[]","name":"_hashedIDs","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLRSGroup","outputs":[{"internalType":"bytes[]","name":"_lrs","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVoterData","outputs":[{"components":[{"internalType":"bytes","name":"pubKey","type":"bytes"},{"internalType":"bytes","name":"hashedId","type":"bytes"}],"internalType":"struct Register.VoterData[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isRegistrationOpen","outputs":[{"internalType":"bool","name":"isOpen","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"sessionID","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_start","type":"uint256"},{"internalType":"uint256","name":"_end","type":"uint256"}],"name":"setRegistrationPeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_id","type":"string"}],"name":"setSessionID","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_hashedID","type":"bytes"},{"internalType":"bytes","name":"_publicKey","type":"bytes"}],"name":"storeVoterData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"voterData","outputs":[{"internalType":"bytes","name":"pubKey","type":"bytes"},{"internalType":"bytes","name":"hashedId","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"voters","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"metadata":{"optimizer_settings":"MzB3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HashedIDStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LRSPKStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RegistrationPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SessionIDSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VoterAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"addEligibleVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"addVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHashedIDs\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_hashedIDs\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLRSGroup\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_lrs\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoterData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"hashedId\",\"type\":\"bytes\"}],\"internalType\":\"struct Register.VoterData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistrationOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sessionID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setRegistrationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"setSessionID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_hashedID\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"storeVoterData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voterData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"hashedId\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Register.sol\":\"Register\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Register.sol\":{\"keccak256\":\"0x8f67f105db54b9600ae98ac3163b373fc47581fd4b599cf2c8284393a29a4e5b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb0ba11aaec3875923f558013c2006fc3a6363ba619f9e14abe52c541349fae9\",\"dweb:/ipfs/QmNRDaykPHZJxuUfe5BokhAcjiC8hoMRs5rnjhiQnS3kKn\"]}},\"version\":1}","zk_version":"1.3.8"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"Register.sol:Register\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[1]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@calldatasize]\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_1\n\tadd\tstack[@calldatasize], r0, r1\n\tsub.s!\t4, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_2[0], r1, r2\n\tjump.eq\t@.BB0_42\n\tsub.s!\t@CPI0_3[0], r1, r2\n\tjump.eq\t@.BB0_20\n\tsub.s!\t@CPI0_4[0], r1, r2\n\tjump.eq\t@.BB0_22\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.eq\t@.BB0_24\n\tsub.s!\t@CPI0_6[0], r1, r2\n\tjump.eq\t@.BB0_26\n\tsub.s!\t@CPI0_7[0], r1, r2\n\tjump.eq\t@.BB0_28\n\tsub.s!\t@CPI0_8[0], r1, r2\n\tjump.eq\t@.BB0_30\n\tsub.s!\t@CPI0_9[0], r1, r2\n\tjump.eq\t@.BB0_32\n\tsub.s!\t@CPI0_10[0], r1, r2\n\tjump.eq\t@.BB0_34\n\tsub.s!\t@CPI0_11[0], r1, r2\n\tjump.eq\t@.BB0_36\n\tsub.s!\t@CPI0_12[0], r1, r2\n\tjump.eq\t@.BB0_38\n\tsub.s!\t@CPI0_13[0], r1, r2\n\tjump.eq\t@.BB0_40\n\tsub.s!\t@CPI0_14[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_getVoterData_252, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @abi_encode_tuple_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tnear_call\tr0, @constructor_Register_305, @DEFAULT_UNWIND\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t256, r0, r1\n\tadd\t64, r0, r2\n\tadd\t@CPI0_1[0], r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_42:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_string_memory_ptr, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_setSessionID_81, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr0, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_20:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_uint256, @DEFAULT_UNWIND\n\tnear_call\tr0, @getter_fun_voterData_47, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tadd\tr2, r0, r4\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\tr3, r0, r2\n\tadd\tr4, r0, r3\n\tnear_call\tr0, @abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_22:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_isRegistrationOpen_156, @DEFAULT_UNWIND\n\tsub.s!\t0, r1, r1\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_24:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_uint256t_uint256, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_setRegistrationPeriod_137, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr0, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_26:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_getLRSGroup_289, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_30:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_, @DEFAULT_UNWIND\n\tnear_call\tr0, @getter_fun_sessionID_28, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_32:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptr, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_storeVoterData_242, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr0, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_34:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_uint256, @DEFAULT_UNWIND\n\tnear_call\tr0, @getter_fun_voters_7, @DEFAULT_UNWIND\n\tand\t@CPI0_15[0], r1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_36:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_address, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_addEligibleVoter_304, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr0, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_38:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_t_address, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_addVoter_96, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr0, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_40:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_, @DEFAULT_UNWIND\n\tadd\t8, r0, r1\n\tsload\tr1, r1\n\tand\t@CPI0_15[0], r1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_28:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tnear_call\tr0, @abi_decode_tuple_, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_getHashedIDs_196, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tadd\tr0, r0, r3\n\tnear_call\tr0, @__exit_return, @DEFAULT_UNWIND\n.BB0_2:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end0:\n\n__keccak256:\n.func_begin1:\n\tadd\t@CPI1_0[0], r0, r3\n\tsub.s!\t@CPI1_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI1_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI1_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_2\n\tld\tr1, r1\n\tret\n.BB1_2:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end1:\n\n__system_request:\n.func_begin2:\n\tadd\t@CPI2_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI2_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI2_1[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB2_2\n\tld\tr1, r1\n\tret\n.BB2_2:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end2:\n\n__exit_return:\n.func_begin3:\n\tadd\t@CPI3_0[0], r0, r4\n\tsub.s!\t@CPI3_0[0], r1, r5\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tadd\tr1, r3, r1\n\tsub.s!\t@CPI3_0[0], r2, r3\n\tadd.ge\tr4, r0, r2\n\tshl.s\t96, r2, r2\n\tadd\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end3:\n\n__exit_revert:\n.func_begin4:\n\tadd\t@CPI4_0[0], r0, r3\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nconstructor_Register_305:\n.func_begin5:\n\tcontext.caller\tr1\n\tand\t@CPI5_0[0], r1, r1\n\tadd\t8, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI5_1[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tret\n.func_end5:\n\nabi_decode_tuple_:\n.func_begin6:\n\tsub.s\t4, r1, r1\n\tsub.s\t1, r0, r2\n\tadd\t@CPI6_0[0], r0, r3\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.gt\tr3, r0, r2\n\tand\t@CPI6_0[0], r1, r1\n\tsub.s!\t@CPI6_0[0], r1, r4\n\tadd.ge\t0, r0, r3\n\txor\t@CPI6_0[0], r1, r1\n\tsub.s!\t@CPI6_0[0], r1, r1\n\tadd\tr2, r0, r1\n\tadd.eq\tr3, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB6_1\n\tret\n.BB6_1:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end6:\n\nabi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr:\n.func_begin7:\n\tld.1\tr1, r3\n\tst.1.inc\tr2, r3, r2\n\tadd\tr0, r0, r4\n.BB7_1:\n\tsub!\tr4, r3, r5\n\tjump.ge\t@.BB7_3\n\tadd\tr4, r2, r5\n\tadd\t32, r4, r4\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tjump\t@.BB7_1\n.BB7_3:\n\tadd\tr3, r2, r1\n\tst.1\tr1, r0\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\tr1, r2, r1\n\tret\n.func_end7:\n\nabi_encode_tuple_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr__fromStack:\n.func_begin8:\n\tnop\tstack+=[9]\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r3\n\tadd\tr2, r0, stack-[9]\n\tld.1\tr2, r2\n\tst.1\tr3, r2\n\tadd\t64, r1, r3\n\tadd\tr2, r0, stack-[3]\n\tshl.s\t5, r2, r1\n\tadd\tr1, r3, r4\n\tadd\t64, r0, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\tr3, r0, stack-[2]\n\tadd\tr3, r0, stack-[8]\n\tadd\tr0, r0, r2\n.BB8_1:\n\tadd\tstack-[3], r0, r1\n\tsub!\tr2, r1, r1\n\tjump.ge\t@.BB8_3\n\tadd\tstack-[2], r0, r1\n\tsub\tr4, r1, r1\n\tadd\tr2, r0, stack-[7]\n\tadd\tstack-[8], r0, r2\n\tst.1.inc\tr2, r1, r2\n\tadd\tr2, r0, stack-[8]\n\tadd\tstack-[9], r0, r1\n\tadd\t32, r1, r1\n\tadd\tr1, r0, stack-[9]\n\tld.1\tr1, r1\n\tld.1.inc\tr1, r1, r2\n\tadd\tr2, r0, stack-[6]\n\tadd\tstack-[1], r0, r2\n\tst.1.inc\tr4, r2, r2\n\tadd\tr2, r0, stack-[5]\n\tadd\t64, r4, r2\n\tadd\tr4, r0, stack-[4]\n\tnear_call\tr0, @abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tadd\tstack-[4], r0, r1\n\tsub\tr2, r1, r3\n\tadd\tstack-[6], r0, r1\n\tld.1\tr1, r1\n\tadd\tstack-[5], r0, r4\n\tst.1\tr4, r3\n\tnear_call\tr0, @abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r2\n\tadd\t1, r2, r2\n\tadd\tr1, r0, r4\n\tjump\t@.BB8_1\n.BB8_3:\n\tadd\tr4, r0, r1\n\tret\n.func_end8:\n\nabi_decode_tuple_t_uint256:\n.func_begin9:\n\tsub.s\t4, r1, r1\n\tadd\t@CPI9_0[0], r0, r2\n\tsub.s!\t31, r1, r3\n\tadd\t0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI9_0[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.ge\t0, r0, r2\n\tsub.s!\t@CPI9_0[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB9_1\n\tadd\t4, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tret\n.BB9_1:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end9:\n\nextract_byte_array_length:\n.func_begin10:\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.eq\tr3, r0, r1\n\tsub.s!\t31, r1, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\tand\t1, r3, r3\n\tsub!\tr2, r3, r2\n\tjump.ne\t@.BB10_1\n\tret\n.BB10_1:\n\tadd\t@CPI10_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end10:\n\ncopy_array_from_storage_to_memory_t_bytes_storage:\n.func_begin11:\n\tnop\tstack+=[3]\n\tadd\tr1, r0, stack-[1]\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[2]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[3]\n\tnear_call\tr0, @extract_byte_array_length, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r2\n\tadd\tstack-[3], r0, r5\n\tadd\tr1, r0, r3\n\tst.1.inc\tr5, r3, r4\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB11_2\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\tr4, r1\n\tsub.s!\t0, r3, r1\n\tadd\t32, r0, r2\n\tadd.eq\t0, r0, r2\n.BB11_5:\n\tadd\t63, r2, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI11_0[0], r1, r3\n\tjump.gt\t@.BB11_7\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB11_7\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tret\n.BB11_2:\n\tadd\tstack-[1], r0, r1\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[2]\n\tadd\tr4, r0, stack-[1]\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r7\n\tadd\tstack-[2], r0, r6\n\tadd\tstack-[3], r0, r5\n\tadd\tr0, r0, r2\n.BB11_3:\n\tsub!\tr2, r6, r3\n\tjump.ge\t@.BB11_5\n\tadd\tr2, r7, r3\n\tsload\tr1, r4\n\tst.1\tr3, r4\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tjump\t@.BB11_3\n.BB11_7:\n\tadd\t@CPI11_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end11:\n\ngetter_fun_voterData_47:\n.func_begin12:\n\tnop\tstack+=[1]\n\tadd\t10, r0, r3\n\tsload\tr3, r2\n\tadd\tr1, r0, stack-[1]\n\tsub!\tr2, r1, r2\n\tjump.le\t@.BB12_1\n\tst.1\t0, r3\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tshl.s\t1, r2, r2\n\tadd\tr1, r2, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @copy_array_from_storage_to_memory_t_bytes_storage, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tadd\t1, r2, r2\n\tadd\tr1, r0, stack-[1]\n\tadd\tr2, r0, r1\n\tnear_call\tr0, @copy_array_from_storage_to_memory_t_bytes_storage, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tadd\tstack-[1], r0, r1\n\tret\n.BB12_1:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end12:\n\nabi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack:\n.func_begin13:\n\tnop\tstack+=[3]\n\tadd\tr3, r0, stack-[3]\n\tadd\tr2, r0, r3\n\tadd\tr1, r0, stack-[1]\n\tadd\t64, r0, r2\n\tst.1.inc\tr1, r2, r2\n\tadd\tr2, r0, stack-[2]\n\tadd\t64, r1, r2\n\tadd\tr3, r0, r1\n\tnear_call\tr0, @abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tadd\tstack-[1], r0, r1\n\tsub\tr2, r1, r1\n\tadd\tstack-[2], r0, r3\n\tst.1\tr3, r1\n\tadd\tstack-[3], r0, r1\n\tnear_call\tr0, @abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tret\n.func_end13:\n\nabi_decode_tuple_t_uint256t_uint256:\n.func_begin14:\n\tsub.s\t4, r1, r1\n\tadd\t@CPI14_0[0], r0, r2\n\tsub.s!\t63, r1, r3\n\tadd\t0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI14_0[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.ge\t0, r0, r2\n\tsub.s!\t@CPI14_0[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB14_1\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tptr.add.s\t4, r2, r1\n\tld\tr1, r1\n\tptr.add.s\t36, r2, r2\n\tld\tr2, r2\n\tret\n.BB14_1:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end14:\n\nabi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack:\n.func_begin15:\n\tnop\tstack+=[5]\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r3\n\tadd\tr2, r0, stack-[5]\n\tld.1\tr2, r2\n\tst.1\tr3, r2\n\tadd\t64, r1, r3\n\tadd\tr2, r0, stack-[2]\n\tshl.s\t5, r2, r1\n\tadd\tr1, r3, r2\n\tadd\tr3, r0, stack-[1]\n\tadd\tr3, r0, stack-[4]\n\tadd\tr0, r0, r3\n.BB15_1:\n\tadd\tstack-[2], r0, r1\n\tsub!\tr3, r1, r1\n\tjump.ge\t@.BB15_3\n\tadd\tstack-[1], r0, r1\n\tsub\tr2, r1, r1\n\tadd\tr3, r0, stack-[3]\n\tadd\tstack-[4], r0, r3\n\tst.1.inc\tr3, r1, r3\n\tadd\tr3, r0, stack-[4]\n\tadd\tstack-[5], r0, r1\n\tadd\t32, r1, r1\n\tadd\tr1, r0, stack-[5]\n\tld.1\tr1, r1\n\tnear_call\tr0, @abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r3\n\tadd\t1, r3, r3\n\tadd\tr1, r0, r2\n\tjump\t@.BB15_1\n.BB15_3:\n\tadd\tr2, r0, r1\n\tret\n.func_end15:\n\ngetter_fun_sessionID_28:\n.func_begin16:\n\tnop\tstack+=[3]\n\tadd\t9, r0, r1\n\tadd\tr1, r0, stack-[1]\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[2]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[3]\n\tnear_call\tr0, @extract_byte_array_length, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r2\n\tadd\tstack-[3], r0, r5\n\tadd\tr1, r0, r3\n\tst.1.inc\tr5, r3, r4\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB16_2\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\tr4, r1\n\tsub.s!\t0, r3, r1\n\tadd\t32, r0, r2\n\tadd.eq\t0, r0, r2\n.BB16_5:\n\tadd\t63, r2, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI16_0[0], r1, r3\n\tjump.gt\t@.BB16_7\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB16_7\n\tst.1\t64, r1\n\tadd\tr5, r0, r1\n\tret\n.BB16_2:\n\tadd\tstack-[1], r0, r1\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[2]\n\tadd\tr4, r0, stack-[1]\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r7\n\tadd\tstack-[2], r0, r6\n\tadd\tstack-[3], r0, r5\n\tadd\tr0, r0, r2\n.BB16_3:\n\tsub!\tr2, r6, r3\n\tjump.ge\t@.BB16_5\n\tadd\tr2, r7, r3\n\tsload\tr1, r4\n\tst.1\tr3, r4\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tjump\t@.BB16_3\n.BB16_7:\n\tadd\t@CPI16_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end16:\n\nabi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack:\n.func_begin17:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1\tr2, r3\n\tst.1\tr4, r3\n\tadd\t64, r1, r1\n\tadd\tr0, r0, r4\n.BB17_1:\n\tsub!\tr4, r3, r5\n\tjump.ge\t@.BB17_3\n\tadd\tr4, r1, r5\n\tadd\t32, r4, r4\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tjump\t@.BB17_1\n.BB17_3:\n\tadd\tr3, r1, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tret\n.func_end17:\n\nallocate_memory:\n.func_begin18:\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tld.1\t64, r1\n\tadd\tr1, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t@CPI18_0[0], r2, r4\n\tjump.gt\t@.BB18_2\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB18_2\n\tst.1\t64, r2\n\tret\n.BB18_2:\n\tadd\t@CPI18_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end18:\n\nabi_decode_t_bytes_memory_ptr:\n.func_begin19:\n\tnop\tstack+=[3]\n\tadd\t31, r1, r6\n\tadd\t@CPI19_0[0], r0, r3\n\tsub!\tr6, r2, r4\n\tadd\t0, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t@CPI19_0[0], r2, r5\n\tand\t@CPI19_0[0], r6, r7\n\tsub!\tr7, r5, r6\n\tadd.le\t0, r0, r3\n\txor\tr7, r5, r5\n\tsub.s!\t@CPI19_0[0], r5, r5\n\tadd.ne\tr4, r0, r3\n\tsub.s!\t0, r3, r3\n\tjump.eq\t@.BB19_1\n\tadd\tr2, r0, stack-[3]\n\tptr.add\tstack[@ptr_calldata], r1, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI19_1[0], r3, r2\n\tjump.ge\t@.BB19_3\n\tadd\t32, r1, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t63, r3, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\tr3, r0, stack-[2]\n\tnear_call\tr0, @allocate_memory, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r5\n\tadd\tstack-[2], r0, r9\n\tst.1.inc\tr1, r9, r2\n\tadd\tr9, r5, r3\n\tadd\tstack-[3], r0, r4\n\tsub!\tr3, r4, r3\n\tjump.gt\t@.BB19_1\n\tand\t31, r9, r3\n\tptr.add\tstack[@ptr_calldata], r5, r4\n\tshr.s!\t5, r9, r5\n\tjump.eq\t@.BB19_10\n\tadd\tr0, r0, r6\n.BB19_7:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr4, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB19_7\n.BB19_10:\n\tsub.s!\t0, r3, r6\n\tjump.eq\t@.BB19_9\n\tshl.s\t5, r5, r5\n\tptr.add\tr4, r5, r4\n\tadd\tr2, r5, r5\n\tshl.s\t3, r3, r3\n\tld.1\tr5, r6\n\tshl\tr6, r3, r6\n\tshr\tr6, r3, r6\n\tld\tr4, r4\n\tsub\t256, r3, r3\n\tshr\tr4, r3, r4\n\tshl\tr4, r3, r3\n\tor\tr3, r6, r3\n\tst.1\tr5, r3\n.BB19_9:\n\tadd\tr2, r9, r2\n\tst.1\tr2, r0\n\tret\n.BB19_1:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB19_3:\n\tadd\t@CPI19_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end19:\n\nabi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptr:\n.func_begin20:\n\tnop\tstack+=[2]\n\tadd\tr1, r0, r5\n\tsub.s\t4, r5, r1\n\tadd\t@CPI20_0[0], r0, r2\n\tsub.s!\t63, r1, r3\n\tadd\t0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI20_0[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.ge\t0, r0, r2\n\tsub.s!\t@CPI20_0[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB20_1\n\tadd\t4, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI20_1[0], r1, r2\n\tjump.gt\t@.BB20_1\n\tadd\t4, r1, r1\n\tadd\tr5, r0, r2\n\tadd\tr5, r0, stack-[2]\n\tnear_call\tr0, @abi_decode_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r2\n\tadd\tr1, r0, stack-[1]\n\tadd\t36, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI20_1[0], r1, r3\n\tjump.gt\t@.BB20_1\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_t_bytes_memory_ptr, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tadd\tstack-[1], r0, r1\n\tret\n.BB20_1:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end20:\n\ngetter_fun_voters_7:\n.func_begin21:\n\tnop\tstack+=[1]\n\tadd\t1, r0, r3\n\tsload\tr3, r2\n\tadd\tr1, r0, stack-[1]\n\tsub!\tr2, r1, r2\n\tjump.le\t@.BB21_1\n\tst.1\t0, r3\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tadd\tr1, r2, r1\n\tsload\tr1, r1\n\tand\t@CPI21_0[0], r1, r1\n\tret\n.BB21_1:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end21:\n\nabi_decode_tuple_t_address:\n.func_begin22:\n\tsub.s\t4, r1, r1\n\tadd\t@CPI22_0[0], r0, r2\n\tsub.s!\t31, r1, r3\n\tadd\t0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI22_0[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.ge\t0, r0, r2\n\tsub.s!\t@CPI22_0[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB22_1\n\tadd\t4, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI22_1[0], r1, r2\n\tjump.gt\t@.BB22_1\n\tret\n.BB22_1:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end22:\n\nabi_decode_tuple_t_string_memory_ptr:\n.func_begin23:\n\tnop\tstack+=[3]\n\tsub.s\t4, r1, r4\n\tadd\t@CPI23_0[0], r0, r2\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI23_0[0], r4, r5\n\tsub.s!\t0, r5, r4\n\tadd.ge\t0, r0, r2\n\tsub.s!\t@CPI23_0[0], r5, r4\n\tadd.ne\tr3, r0, r2\n\tsub.s!\t0, r2, r2\n\tjump.eq\t@.BB23_1\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tptr.add.s\t4, r2, r3\n\tld\tr3, r8\n\tsub.s!\t@CPI23_1[0], r8, r3\n\tjump.gt\t@.BB23_1\n\tadd\t35, r8, r3\n\tadd\t@CPI23_0[0], r0, r4\n\tsub!\tr3, r1, r5\n\tadd\t0, r0, r5\n\tadd.ge\tr4, r0, r5\n\tand\t@CPI23_0[0], r1, r6\n\tand\t@CPI23_0[0], r3, r3\n\tsub!\tr3, r6, r7\n\tadd.ge\t0, r0, r4\n\txor\tr3, r6, r3\n\tsub.s!\t@CPI23_0[0], r3, r3\n\tadd\tr5, r0, r3\n\tadd.eq\tr4, r0, r3\n\tsub.s!\t0, r3, r3\n\tjump.ne\t@.BB23_1\n\tadd\tr1, r0, stack-[3]\n\tadd\t4, r8, r3\n\tptr.add\tr2, r3, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI23_2[0], r3, r2\n\tjump.ge\t@.BB23_5\n\tadd\t36, r8, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t63, r3, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\tr3, r0, stack-[2]\n\tnear_call\tr0, @allocate_memory, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r5\n\tadd\tstack-[2], r0, r9\n\tst.1.inc\tr1, r9, r2\n\tadd\tr9, r5, r3\n\tadd\tstack-[3], r0, r4\n\tsub!\tr3, r4, r3\n\tjump.gt\t@.BB23_1\n\tand\t31, r9, r3\n\tptr.add\tstack[@ptr_calldata], r5, r4\n\tshr.s!\t5, r9, r5\n\tjump.eq\t@.BB23_12\n\tadd\tr0, r0, r6\n.BB23_9:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr4, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB23_9\n.BB23_12:\n\tsub.s!\t0, r3, r6\n\tjump.eq\t@.BB23_11\n\tshl.s\t5, r5, r5\n\tptr.add\tr4, r5, r4\n\tadd\tr2, r5, r5\n\tshl.s\t3, r3, r3\n\tld.1\tr5, r6\n\tshl\tr6, r3, r6\n\tshr\tr6, r3, r6\n\tld\tr4, r4\n\tsub\t256, r3, r3\n\tshr\tr4, r3, r4\n\tshl\tr4, r3, r3\n\tor\tr3, r6, r3\n\tst.1\tr5, r3\n.BB23_11:\n\tadd\tr2, r9, r2\n\tst.1\tr2, r0\n\tret\n.BB23_1:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB23_5:\n\tadd\t@CPI23_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end23:\n\nfun_setSessionID_81:\n.func_begin24:\n\tnop\tstack+=[5]\n\tadd\tr1, r0, stack-[3]\n\tld.1.inc\tr1, r1, r2\n\tadd\tr2, r0, stack-[2]\n\tadd\tr1, r0, stack-[5]\n\tsub.s!\t@CPI24_0[0], r1, r1\n\tjump.ge\t@.BB24_1\n\tadd\t9, r0, r1\n\tadd\tr1, r0, stack-[4]\n\tsload\tr1, r1\n\tnear_call\tr0, @extract_byte_array_length, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tsub.s!\t32, r2, r1\n\tadd\tstack-[5], r0, r4\n\tjump.lt\t@.BB24_6\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\tr2, r0, stack-[1]\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r4\n\tadd\t31, r4, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r4, r3\n\tadd\tr2, r0, r3\n\tadd.lt\t0, r0, r3\n\tadd\tstack-[1], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tadd\tr1, r3, r1\n.BB24_4:\n\tsub!\tr1, r2, r3\n\tjump.ge\t@.BB24_6\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tjump\t@.BB24_4\n.BB24_6:\n\tsub.s!\t32, r4, r1\n\tjump.lt\t@.BB24_13\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr2, r0, stack-[2]\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r7\n\tadd\tstack-[5], r0, r5\n\tsub.s\t32, r0, r2\n\tand\tr5, r2, r2\n\tadd\tr0, r0, r3\n\tadd\tstack-[3], r0, r6\n.BB24_8:\n\tsub!\tr3, r2, r4\n\tadd\tr7, r6, r4\n\tjump.ge\t@.BB24_10\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r3, r3\n\tadd\t32, r7, r7\n\tadd\t1, r1, r1\n\tjump\t@.BB24_8\n.BB24_13:\n\tsub.s!\t0, r4, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB24_15\n\tadd\tstack-[2], r0, r1\n\tld.1\tr1, r1\n.BB24_15:\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r4, r1\n\tjump\t@.BB24_16\n.BB24_10:\n\tsub!\tr2, r5, r2\n\tjump.ge\t@.BB24_12\n\tshl.s\t3, r5, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tld.1\tr4, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB24_12:\n\tadd\t1, r0, r1\n\tshl.s\t1, r5, r2\n.BB24_16:\n\tor\tr2, r1, r1\n\tadd\tstack-[4], r0, r2\n\tsstore\tr2, r1\n\tld.1\t64, r1\n\tadd\t@CPI24_1[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI24_1[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI24_1[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI24_2[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI24_3[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB24_17\n\tret\n.BB24_1:\n\tadd\t@CPI24_4[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB24_17:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end24:\n\narray_push_from_t_address_to_t_array$_t_address_$dyn_storage_ptr:\n.func_begin25:\n\tnop\tstack+=[2]\n\tsload\tr1, r4\n\tsub.s!\t@CPI25_0[0], r4, r3\n\tjump.ge\t@.BB25_1\n\tadd\tr2, r0, stack-[2]\n\tadd\t1, r4, r2\n\tsstore\tr1, r2\n\tsload\tr1, r2\n\tadd\tr4, r0, stack-[1]\n\tsub!\tr2, r4, r2\n\tjump.le\t@.BB25_3\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tadd\tr1, r2, r1\n\tsload\tr1, r2\n\tand\t@CPI25_2[0], r2, r2\n\tadd\tstack-[2], r0, r3\n\tand\t@CPI25_3[0], r3, r3\n\tor\tr2, r3, r2\n\tsstore\tr1, r2\n\tret\n.BB25_1:\n\tadd\t@CPI25_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB25_3:\n\tadd\t@CPI25_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end25:\n\nfun_addVoter_96:\n.func_begin26:\n\tnop\tstack+=[1]\n\tadd\tr1, r0, r2\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[1]\n\tnear_call\tr0, @array_push_from_t_address_to_t_array$_t_address_$dyn_storage_ptr, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\t@CPI26_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI26_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI26_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI26_1[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t@CPI26_2[0], r0, r4\n\tadd\tstack-[1], r0, r3\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB26_1\n\tret\n.BB26_1:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end26:\n\nabi_encode_tuple_t_stringliteral_dbd6a98282231e156411b592fc7f2369149974f37de9b40c285caf65601a5540__to_t_string_memory_ptr__fromStack:\n.func_begin27:\n\tadd\t64, r1, r2\n\tadd\t@CPI27_0[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r1, r2\n\tadd\t13, r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r0, r2\n\tst.1\tr1, r2\n\tadd\t96, r1, r1\n\tret\n.func_end27:\n\nabi_encode_tuple_t_stringliteral_effe876d15a3de6a4d7d4f75b52b0128a512c3a20375aeab7881ac2396d073f4__to_t_string_memory_ptr__fromStack:\n.func_begin28:\n\tadd\t96, r1, r2\n\tadd\t@CPI28_0[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tadd\t@CPI28_1[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r1, r2\n\tadd\t49, r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r0, r2\n\tst.1\tr1, r2\n\tadd\t128, r1, r1\n\tret\n.func_end28:\n\nabi_encode_tuple_t_stringliteral_e6dd7fe6725a3af46e079e3654e4a4f02867cb617fac607c908d38367608f23d__to_t_string_memory_ptr__fromStack:\n.func_begin29:\n\tadd\t96, r1, r2\n\tadd\t@CPI29_0[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tadd\t@CPI29_1[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r1, r2\n\tadd\t48, r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r0, r2\n\tst.1\tr1, r2\n\tadd\t128, r1, r1\n\tret\n.func_end29:\n\nfun_setRegistrationPeriod_137:\n.func_begin30:\n\tnop\tstack+=[2]\n\tadd\t8, r0, r3\n\tsload\tr3, r4\n\tcontext.caller\tr3\n\txor\tr4, r3, r3\n\tand!\t@CPI30_0[0], r3, r3\n\tjump.ne\t@.BB30_1\n\tadd\tr2, r0, stack-[2]\n\tsub!\tr1, r2, r2\n\tadd\tr1, r0, stack-[1]\n\tjump.ge\t@.BB30_3\n\tadd\t@CPI30_2[0], r0, r1\n\tst.2\t0, r1\n\tnear_call\tr0, @__system_request, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tsub!\tr1, r2, r1\n\tadd\tstack-[2], r0, r2\n\tjump.gt\t@.BB30_6\n\tadd\t@CPI30_2[0], r0, r1\n\tst.2\t0, r1\n\tnear_call\tr0, @__system_request, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r3\n\tsub!\tr1, r3, r1\n\tjump.ge\t@.BB30_6\n\tadd\t6, r0, r1\n\tadd\tstack-[1], r0, r2\n\tsstore\tr1, r2\n\tadd\t7, r0, r1\n\tsstore\tr1, r3\n\tld.1\t64, r1\n\tadd\t@CPI30_3[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI30_3[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI30_3[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI30_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI30_5[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB30_8\n\tret\n.BB30_6:\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[2]\n\tadd\t@CPI30_1[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tnear_call\tr0, @abi_encode_tuple_t_stringliteral_e6dd7fe6725a3af46e079e3654e4a4f02867cb617fac607c908d38367608f23d__to_t_string_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB30_1:\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[2]\n\tadd\t@CPI30_1[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tnear_call\tr0, @abi_encode_tuple_t_stringliteral_dbd6a98282231e156411b592fc7f2369149974f37de9b40c285caf65601a5540__to_t_string_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB30_3:\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[2]\n\tadd\t@CPI30_1[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tnear_call\tr0, @abi_encode_tuple_t_stringliteral_effe876d15a3de6a4d7d4f75b52b0128a512c3a20375aeab7881ac2396d073f4__to_t_string_memory_ptr__fromStack, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r3\n\tsub\tr1, r3, r2\n\tadd\tr3, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB30_8:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end30:\n\nfun_isRegistrationOpen_156:\n.func_begin31:\n\tnop\tstack+=[1]\n\tadd\t7, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t@CPI31_0[0], r0, r1\n\tst.2\t0, r1\n\tnear_call\tr0, @__system_request, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tsub!\tr2, r1, r1\n\tadd\tr0, r0, r1\n\tjump.le\t@.BB31_2\n\tadd\t6, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t@CPI31_0[0], r0, r1\n\tst.2\t0, r1\n\tnear_call\tr0, @__system_request, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tsub!\tr2, r1, r1\n\tadd\t0, r0, r1\n\tadd.lt\t1, r0, r1\n.BB31_2:\n\tand\t1, r1, r1\n\tret\n.func_end31:\n\nallocate_and_zero_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr:\n.func_begin32:\n\tnop\tstack+=[2]\n\tadd\tr1, r0, r2\n\tsub.s!\t@CPI32_0[0], r2, r1\n\tjump.ge\t@.BB32_1\n\tshl.s\t5, r2, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t32, r1, r1\n\tadd\tr2, r0, stack-[2]\n\tnear_call\tr0, @allocate_memory, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r6\n\tadd\tstack-[1], r0, r5\n\tadd\t96, r0, r2\n\tadd\tr1, r0, r4\n\tadd\tr0, r0, r3\n.BB32_3:\n\tst.1\tr4, r6\n\tsub!\tr3, r5, r4\n\tjump.ge\t@.BB32_5\n\tadd\t32, r3, r3\n\tadd\tr3, r1, r4\n\tadd\tr2, r0, r6\n\tjump\t@.BB32_3\n.BB32_5:\n\tret\n.BB32_1:\n\tadd\t@CPI32_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end32:\n\nstorage_array_index_access_t_array$_t_bytes_storage_$dyn_storage:\n.func_begin33:\n\tnop\tstack+=[1]\n\tsload\tr1, r3\n\tadd\tr2, r0, stack-[1]\n\tsub!\tr3, r2, r2\n\tjump.le\t@.BB33_1\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tadd\tr1, r2, r1\n\tadd\tr0, r0, r2\n\tret\n.BB33_1:\n\tadd\t@CPI33_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end33:\n\nfun_getHashedIDs_196:\n.func_begin34:\n\tnop\tstack+=[5]\n\tadd\t2, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[3]\n\tnear_call\tr0, @allocate_and_zero_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tadd\t32, r3, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\tr0, r0, r2\n\tadd\tr3, r0, stack-[4]\n.BB34_1:\n\tadd\tstack-[3], r0, r1\n\tsub!\tr2, r1, r1\n\tjump.ge\t@.BB34_2\n\tadd\tstack-[2], r0, r1\n\tadd\tr2, r0, stack-[5]\n\tnear_call\tr0, @storage_array_index_access_t_array$_t_bytes_storage_$dyn_storage, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r3\n\tadd\tstack-[4], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r3, r2\n\tjump.le\t@.BB34_4\n\tnear_call\tr0, @copy_array_from_storage_to_memory_t_bytes_storage, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r3\n\tadd\tstack-[5], r0, r5\n\tshl.s\t5, r5, r2\n\tadd\tstack-[1], r0, r4\n\tadd\tr4, r2, r2\n\tst.1\tr2, r1\n\tadd\t1, r5, r1\n\tld.1\tr3, r2\n\tsub!\tr2, r5, r2\n\tadd\tr1, r0, r2\n\tjump.gt\t@.BB34_1\n.BB34_4:\n\tadd\t@CPI34_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB34_2:\n\tadd\tr3, r0, r1\n\tret\n.func_end34:\n\ncopy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage:\n.func_begin35:\n\tnop\tstack+=[5]\n\tadd\tr2, r0, stack-[3]\n\tld.1.inc\tr2, r2, r3\n\tadd\tr3, r0, stack-[2]\n\tadd\tr2, r0, stack-[5]\n\tsub.s!\t@CPI35_0[0], r2, r2\n\tjump.ge\t@.BB35_1\n\tadd\tr1, r0, stack-[4]\n\tsload\tr1, r1\n\tnear_call\tr0, @extract_byte_array_length, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tsub.s!\t32, r2, r1\n\tadd\tstack-[5], r0, r5\n\tjump.lt\t@.BB35_6\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\tr2, r0, stack-[1]\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd\tr2, r0, r3\n\tadd.lt\t0, r0, r3\n\tadd\tstack-[1], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tadd\tr1, r3, r1\n.BB35_4:\n\tsub!\tr1, r2, r3\n\tjump.ge\t@.BB35_6\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tjump\t@.BB35_4\n.BB35_6:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB35_14\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr2, r0, stack-[2]\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r7\n\tadd\tstack-[5], r0, r5\n\tsub.s\t32, r0, r2\n\tand\tr5, r2, r2\n\tadd\tr0, r0, r3\n\tadd\tstack-[3], r0, r6\n.BB35_9:\n\tsub!\tr3, r2, r4\n\tadd\tr7, r6, r4\n\tjump.ge\t@.BB35_11\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r3, r3\n\tadd\t32, r7, r7\n\tadd\t1, r1, r1\n\tjump\t@.BB35_9\n.BB35_14:\n\tsub.s!\t0, r5, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[4], r0, r4\n\tjump.eq\t@.BB35_16\n\tadd\tstack-[2], r0, r1\n\tld.1\tr1, r1\n.BB35_16:\n\tshl.s\t3, r5, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r5, r1\n\tjump\t@.BB35_7\n.BB35_11:\n\tsub!\tr2, r5, r2\n\tjump.ge\t@.BB35_13\n\tshl.s\t3, r5, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tld.1\tr4, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB35_13:\n\tadd\t1, r0, r1\n\tshl.s\t1, r5, r2\n\tadd\tstack-[4], r0, r4\n.BB35_7:\n\tor\tr2, r1, r1\n\tsstore\tr4, r1\n\tret\n.BB35_1:\n\tadd\t@CPI35_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end35:\n\narray_push_from_t_bytes_memory_ptr_to_t_array$_t_bytes_storage_$dyn_storage_ptr:\n.func_begin36:\n\tnop\tstack+=[2]\n\tsload\tr1, r4\n\tsub.s!\t@CPI36_0[0], r4, r3\n\tjump.ge\t@.BB36_1\n\tadd\tr2, r0, stack-[2]\n\tadd\t1, r4, r2\n\tsstore\tr1, r2\n\tsload\tr1, r2\n\tadd\tr4, r0, stack-[1]\n\tsub!\tr2, r4, r2\n\tjump.le\t@.BB36_3\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tadd\tr1, r2, r1\n\tadd\tstack-[2], r0, r2\n\tnear_call\tr0, @copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage, @DEFAULT_UNWIND\n\tret\n.BB36_1:\n\tadd\t@CPI36_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB36_3:\n\tadd\t@CPI36_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end36:\n\nfun_storeVoterData_242:\n.func_begin37:\n\tnop\tstack+=[3]\n\tadd\tr2, r0, stack-[3]\n\tadd\tr1, r0, r2\n\tadd\tr2, r0, stack-[2]\n\tadd\t2, r0, r1\n\tnear_call\tr0, @array_push_from_t_bytes_memory_ptr_to_t_array$_t_bytes_storage_$dyn_storage_ptr, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r6\n\tld.1\tr6, r2\n\tld.1\t64, r1\n\tadd\tr0, r0, r3\n.BB37_1:\n\tsub!\tr3, r2, r4\n\tjump.ge\t@.BB37_3\n\tadd\tr3, r1, r4\n\tadd\t32, r3, r3\n\tadd\tr3, r6, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tjump\t@.BB37_1\n.BB37_3:\n\tadd\tr2, r1, r3\n\tadd\t5, r0, r4\n\tst.1\tr3, r4\n\tadd\t32, r2, r2\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r2\n\tnear_call\tr0, @copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage, @DEFAULT_UNWIND\n\tadd\t3, r0, r1\n\tadd\tstack-[3], r0, r2\n\tnear_call\tr0, @array_push_from_t_bytes_memory_ptr_to_t_array$_t_bytes_storage_$dyn_storage_ptr, @DEFAULT_UNWIND\n\tld.1\t64, r3\n\tsub.s!\t@CPI37_0[0], r3, r1\n\tjump.ge\t@.BB37_4\n\tadd\t64, r3, r1\n\tst.1\t64, r1\n\tadd\tstack-[3], r0, r1\n\tst.1.inc\tr3, r1, r4\n\tadd\tstack-[2], r0, r1\n\tst.1\tr4, r1\n\tadd\t10, r0, r1\n\tsload\tr1, r5\n\tsub.s!\t@CPI37_1[0], r5, r2\n\tjump.gt\t@.BB37_4\n\tadd\tr4, r0, stack-[2]\n\tadd\tr3, r0, stack-[3]\n\tadd\t1, r5, r2\n\tsstore\tr1, r2\n\tsload\tr1, r2\n\tadd\tr5, r0, stack-[1]\n\tsub!\tr2, r5, r2\n\tjump.le\t@.BB37_7\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tshl.s\t1, r2, r2\n\tadd\tr1, r2, r3\n\tadd\tr3, r0, stack-[1]\n\tadd\tstack-[3], r0, r1\n\tld.1\tr1, r2\n\tadd\tr3, r0, r1\n\tnear_call\tr0, @copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r1\n\tadd\t1, r1, r1\n\tadd\tstack-[2], r0, r2\n\tld.1\tr2, r2\n\tnear_call\tr0, @copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage, @DEFAULT_UNWIND\n\tadd\t@CPI37_3[0], r0, r1\n\tld.1\t64, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI37_3[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI37_3[0], r2, r4\n\tadd.lt\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI37_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI37_5[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB37_9\n\tld.1\t64, r1\n\tadd\t@CPI37_3[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI37_3[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI37_3[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI37_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI37_6[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB37_9\n\tret\n.BB37_4:\n\tadd\t@CPI37_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB37_9:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB37_7:\n\tadd\t@CPI37_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end37:\n\nfun_getVoterData_252:\n.func_begin38:\n\tnop\tstack+=[7]\n\tadd\t10, r0, r1\n\tadd\tr1, r0, stack-[7]\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[2]\n\tsub.s!\t@CPI38_0[0], r1, r1\n\tjump.ge\t@.BB38_1\n\tadd\tstack-[2], r0, r1\n\tshl.s\t5, r1, r1\n\tadd\t32, r1, r1\n\tnear_call\tr0, @allocate_memory, @DEFAULT_UNWIND\n\tadd\tr1, r0, stack-[1]\n\tadd\tstack-[2], r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__keccak256, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tadd\tstack-[1], r0, r3\n\tadd\tr0, r0, r4\n.BB38_3:\n\tadd\tstack-[2], r0, r1\n\tsub!\tr4, r1, r1\n\tjump.ge\t@.BB38_6\n\tadd\tr4, r0, stack-[4]\n\tadd\tr3, r0, stack-[5]\n\tld.1\t64, r3\n\tsub.s!\t@CPI38_1[0], r3, r1\n\tjump.gt\t@.BB38_1\n\tadd\t64, r3, r1\n\tst.1\t64, r1\n\tadd\tr2, r0, r1\n\tadd\tr2, r0, stack-[7]\n\tadd\tr3, r0, stack-[6]\n\tnear_call\tr0, @copy_array_from_storage_to_memory_t_bytes_storage, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r2\n\tst.1.inc\tr2, r1, r1\n\tadd\tr1, r0, stack-[3]\n\tadd\tstack-[7], r0, r1\n\tadd\t1, r1, r1\n\tnear_call\tr0, @copy_array_from_storage_to_memory_t_bytes_storage, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r2\n\tadd\tstack-[3], r0, r3\n\tst.1\tr3, r1\n\tadd\tstack-[5], r0, r3\n\tadd\t32, r3, r3\n\tadd\tstack-[6], r0, r1\n\tst.1\tr3, r1\n\tadd\tstack-[4], r0, r4\n\tadd\t1, r4, r4\n\tadd\t2, r2, r2\n\tjump\t@.BB38_3\n.BB38_6:\n\tadd\tstack-[1], r0, r1\n\tret\n.BB38_1:\n\tadd\t@CPI38_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end38:\n\nfun_getLRSGroup_289:\n.func_begin39:\n\tnop\tstack+=[4]\n\tadd\t3, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tsload\tr1, r1\n\tnear_call\tr0, @allocate_and_zero_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tadd\t32, r3, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\tr0, r0, r2\n\tadd\tr3, r0, stack-[3]\n.BB39_1:\n\tadd\tstack-[2], r0, r1\n\tsload\tr1, r4\n\tsub!\tr2, r4, r4\n\tjump.ge\t@.BB39_2\n\tadd\tr2, r0, stack-[4]\n\tnear_call\tr0, @storage_array_index_access_t_array$_t_bytes_storage_$dyn_storage, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r3\n\tadd\tstack-[3], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r3, r2\n\tjump.le\t@.BB39_4\n\tnear_call\tr0, @copy_array_from_storage_to_memory_t_bytes_storage, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r3\n\tadd\tstack-[4], r0, r5\n\tshl.s\t5, r5, r2\n\tadd\tstack-[1], r0, r4\n\tadd\tr4, r2, r2\n\tst.1\tr2, r1\n\tadd\t1, r5, r1\n\tld.1\tr3, r2\n\tsub!\tr2, r5, r2\n\tadd\tr1, r0, r2\n\tjump.gt\t@.BB39_1\n.BB39_4:\n\tadd\t@CPI39_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t36, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.BB39_2:\n\tadd\tr3, r0, r1\n\tret\n.func_end39:\n\nfun_addEligibleVoter_304:\n.func_begin40:\n\tadd\tr1, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @array_push_from_t_address_to_t_array$_t_address_$dyn_storage_ptr, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\t@CPI40_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI40_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI40_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI40_1[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t1, r0, r3\n\tadd\t@CPI40_2[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB40_1\n\tret\n.BB40_1:\n\tadd\tr0, r0, r1\n\tadd\tr0, r0, r2\n\tnear_call\tr0, @__exit_revert, @DEFAULT_UNWIND\n.func_end40:\n\n__farcall:\n.func_begin41:\n.tmp0:\n\tfar_call\tr1, r2, @.BB41_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB41_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end41:\n\n__staticcall:\n.func_begin42:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB42_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB42_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end42:\n\n\t.data\n\t.p2align\t5\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\nCPI2_0:\nCPI3_0:\nCPI4_0:\nCPI24_1:\nCPI26_0:\nCPI30_3:\nCPI37_3:\nCPI40_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261347274288845081144962207220498432\nCPI0_2:\n\t.cell 4286996990\nCPI0_3:\n\t.cell 1718515995\nCPI0_4:\n\t.cell 2058530603\nCPI0_5:\n\t.cell 2343762805\nCPI0_6:\n\t.cell 2355388027\nCPI0_7:\n\t.cell 3028414799\nCPI0_8:\n\t.cell 3047680518\nCPI0_9:\n\t.cell 3344829800\nCPI0_10:\n\t.cell 3663251417\nCPI0_11:\n\t.cell 3696045500\nCPI0_12:\n\t.cell 4104887007\nCPI0_13:\n\t.cell 4166100032\nCPI0_14:\n\t.cell 582013919\nCPI0_15:\nCPI5_0:\nCPI21_0:\nCPI22_1:\nCPI25_3:\nCPI30_0:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI1_1:\nCPI24_2:\nCPI26_1:\nCPI30_4:\nCPI37_4:\nCPI40_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI2_1:\n\t.cell 904625751086426111047927909714404454142933102791518401696464687643217625088\nCPI5_1:\nCPI25_2:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI6_0:\nCPI9_0:\nCPI14_0:\nCPI19_0:\nCPI20_0:\nCPI22_0:\nCPI23_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI10_0:\nCPI11_1:\nCPI16_1:\nCPI18_1:\nCPI19_2:\nCPI23_3:\nCPI24_4:\nCPI25_1:\nCPI32_1:\nCPI33_0:\nCPI34_0:\nCPI35_1:\nCPI36_1:\nCPI37_2:\nCPI38_2:\nCPI39_0:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI11_0:\nCPI16_0:\nCPI18_0:\nCPI20_1:\nCPI23_1:\nCPI37_1:\n\t.cell 18446744073709551615\nCPI19_1:\nCPI23_2:\nCPI24_0:\nCPI25_0:\nCPI32_0:\nCPI35_0:\nCPI36_0:\nCPI38_0:\n\t.cell 18446744073709551616\nCPI24_3:\n\t.cell -11960207886406257808801963387324945884139792031018492720838376899593345086714\nCPI26_2:\nCPI40_2:\n\t.cell 25306374910699740966389718991448819673365803839612186998943952333161732927533\nCPI27_0:\n\t.cell 35477323691238871463963609195269322689436916882315603265313141070918211076096\nCPI28_0:\n\t.cell 51742339990942035354643982742663683334389151244313441650975447106581765816320\nCPI28_1:\n\t.cell 38178729326877964206231962546225035301220619787568703489635341784603859183215\nCPI29_0:\n\t.cell 44049962122192313069850008287661212980028540393313985782714471072857881313280\nCPI29_1:\n\t.cell 38178729326877964206231962546225035301220619787544562427876181054342404534380\nCPI30_1:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI30_2:\nCPI31_0:\n\t.cell 54919857843691310904240101001871775513466943666296306094405906504622902841650\nCPI30_5:\n\t.cell -32334086894278669554890835437076811098656959417877802737577885701961813779011\nCPI37_0:\n\t.cell 18446744073709551552\nCPI37_5:\n\t.cell 2359171832497488308566583039230598432920310142807157606017675708463981604482\nCPI37_6:\n\t.cell -30506184069872588939641675670792961235775538602014224903270929172308938277888\nCPI38_1:\n\t.cell 18446744073709551551\n","bytecode":{"object":""},"methodIdentifiers":{"addEligibleVoter(address)":"dc4d2dbc","addVoter(address)":"f4ab9adf","admin()":"f851a440","getHashedIDs()":"b481f14f","getLRSGroup()":"8c645e7b","getVoterData()":"22b0d3df","isRegistrationOpen()":"7ab2af2b","sessionID()":"b5a7ea06","setRegistrationPeriod(uint256,uint256)":"8bb2fb75","setSessionID(string)":"ff8661fe","storeVoterData(bytes,bytes)":"c75e0d68","voterData(uint256)":"666e791b","voters(uint256)":"da58c7d9"}},"irOptimized":"/// @use-src 0:\"contracts/Register.sol\"\nobject \"Register_305\" {\n    code {\n        /// @src 0:56:3076  \"contract Register {...\"\n        mstore(64, memoryguard(128))\n        if callvalue()\n        {\n            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        }\n        constructor_Register_305()\n        let _1 := allocate_unbounded()\n        codecopy(_1, dataoffset(\"Register_305_deployed\"), datasize(\"Register_305_deployed\"))\n        return(_1, datasize(\"Register_305_deployed\"))\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function shift_left_0(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_20_shift_0(value, toInsert) -> result\n        {\n            let mask := 0xffffffffffffffffffffffffffffffffffffffff\n            toInsert := shift_left_0(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_t_uint160(value) -> cleaned\n        {\n            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_t_uint160_to_t_uint160(value) -> converted\n        {\n            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n        }\n        function convert_t_uint160_to_t_address(value) -> converted\n        {\n            converted := convert_t_uint160_to_t_uint160(value)\n        }\n        function convert_t_address_to_t_address(value) -> converted\n        {\n            converted := convert_t_uint160_to_t_address(value)\n        }\n        function prepare_store_t_address(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_0t_address_to_t_address(slot, value_0)\n        {\n            let convertedValue_0 := convert_t_address_to_t_address(value_0)\n            sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))\n        }\n        /// @ast-id 68 @src 0:833:882  \"constructor() {...\"\n        function constructor_Register_305()\n        {\n            /// @src 0:865:875  \"msg.sender\"\n            let expr_64 := caller()\n            /// @src 0:857:875  \"admin = msg.sender\"\n            update_storage_value_offset_0t_address_to_t_address(0x08, expr_64)\n            let expr_65 := expr_64\n        }\n    }\n    /// @use-src 0:\"contracts/Register.sol\"\n    object \"Register_305_deployed\" {\n        code {\n            /// @src 0:56:3076  \"contract Register {...\"\n            mstore(64, memoryguard(128))\n            if iszero(lt(calldatasize(), 4))\n            {\n                let selector := shift_right_224_unsigned(calldataload(0))\n                switch selector\n                case 0x22b0d3df {\n                    external_fun_getVoterData_252()\n                }\n                case 0x666e791b { external_fun_voterData_47() }\n                case 0x7ab2af2b {\n                    external_fun_isRegistrationOpen_156()\n                }\n                case 0x8bb2fb75 {\n                    external_fun_setRegistrationPeriod_137()\n                }\n                case 0x8c645e7b {\n                    external_fun_getLRSGroup_289()\n                }\n                case 0xb481f14f {\n                    external_fun_getHashedIDs_196()\n                }\n                case 0xb5a7ea06 { external_fun_sessionID_28() }\n                case 0xc75e0d68 {\n                    external_fun_storeVoterData_242()\n                }\n                case 0xda58c7d9 { external_fun_voters_7() }\n                case 0xdc4d2dbc {\n                    external_fun_addEligibleVoter_304()\n                }\n                case 0xf4ab9adf { external_fun_addVoter_96() }\n                case 0xf851a440 { external_fun_admin_26() }\n                case 0xff8661fe {\n                    external_fun_setSessionID_81()\n                }\n                default { }\n            }\n            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            function shift_right_224_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode_tuple_(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function array_length_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function array_length_t_bytes_memory_ptr(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function round_up_to_mul_of_32(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_t_bytes_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of_32(length))\n            }\n            function abi_encode_t_struct$_VoterData_$43_memory_ptr_to_t_struct$_VoterData_$43_memory_ptr(value, pos) -> end\n            {\n                let tail := add(pos, 0x40)\n                {\n                    let memberValue0 := mload(add(value, 0x00))\n                    mstore(add(pos, 0x00), sub(tail, pos))\n                    tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(memberValue0, tail)\n                }\n                {\n                    let memberValue0 := mload(add(value, 0x20))\n                    mstore(add(pos, 0x20), sub(tail, pos))\n                    tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(memberValue0, tail)\n                }\n                end := tail\n            }\n            function abi_encodeUpdatedPos_t_struct$_VoterData_$43_memory_ptr_to_t_struct$_VoterData_$43_memory_ptr(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_t_struct$_VoterData_$43_memory_ptr_to_t_struct$_VoterData_$43_memory_ptr(value0, pos)\n            }\n            function array_nextElement_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr_fromStack(value, pos) -> end\n            {\n                let length := array_length_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n                let headStart := pos\n                let tail := add(pos, mul(length, 0x20))\n                let baseRef := array_dataslot_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(value)\n                let srcPtr := baseRef\n                for { let i := 0 } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, sub(tail, headStart))\n                    let elementValue0 := mload(srcPtr)\n                    tail := abi_encodeUpdatedPos_t_struct$_VoterData_$43_memory_ptr_to_t_struct$_VoterData_$43_memory_ptr(elementValue0, tail)\n                    srcPtr := array_nextElement_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(srcPtr)\n                    pos := add(pos, 0x20)\n                }\n                pos := tail\n                end := pos\n            }\n            function abi_encode_tuple_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr__fromStack(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr_fromStack(value0, tail)\n            }\n            function external_fun_getVoterData_252()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode_tuple_(4, calldatasize())\n                let ret_0 := fun_getVoterData_252()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr__fromStack(memPos, ret_0)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            { revert(0, 0) }\n            function cleanup_t_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_t_uint256(value)\n            {\n                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_t_uint256(value)\n            }\n            function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                {\n                    let offset := 0\n                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n                }\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_dataslot_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_dataslot_t_bytes_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function long_byte_array_index_access_no_checks(array, index) -> slot, offset\n            {\n                offset := sub(31, mod(index, 0x20))\n                let dataArea := array_dataslot_t_bytes_storage_ptr(array)\n                slot := add(dataArea, div(index, 0x20))\n            }\n            function storage_array_index_access_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage(array)\n                slot := add(dataArea, mul(index, 2))\n                offset := 0\n            }\n            function panic_error_0x22()\n            {\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := div(data, 2)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n            }\n            function array_dataslot_t_bytes_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function abi_encode_t_bytes_storage_to_t_bytes_memory_ptr(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(0x20, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_t_bytes_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, i)\n                }\n            }\n            function abi_encodeUpdatedPos_t_bytes_storage_to_t_bytes_memory_ptr(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_t_bytes_storage_to_t_bytes_memory_ptr(value0, pos)\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function copy_array_from_storage_to_memory_t_bytes_storage(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_t_bytes_storage_to_t_bytes_memory_ptr(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            /// @ast-id 47 @src 0:696:724  \"VoterData[] public voterData\"\n            function getter_fun_voterData_47(key_0) -> ret_0_mpos, ret_1_mpos\n            {\n                let slot := 10\n                let offset := 0\n                if iszero(lt(key_0, array_length_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage(slot, key_0)\n                ret_0_mpos := copy_array_from_storage_to_memory_t_bytes_storage(add(slot, 0))\n                ret_1_mpos := copy_array_from_storage_to_memory_t_bytes_storage(add(slot, 1))\n            }\n            /// @src 0:56:3076  \"contract Register {...\"\n            function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end\n            {\n                let length := array_length_t_bytes_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of_32(length))\n            }\n            function abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0, tail)\n                mstore(add(headStart, 32), sub(tail, headStart))\n                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value1, tail)\n            }\n            function external_fun_voterData_47()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0 := abi_decode_tuple_t_uint256(4, calldatasize())\n                let ret_0, ret_1 := getter_fun_voterData_47(param_0)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack(memPos, ret_0, ret_1)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_t_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_t_bool_to_t_bool_fromStack(value, pos)\n            {\n                mstore(pos, cleanup_t_bool(value))\n            }\n            function abi_encode_tuple_t_bool__to_t_bool__fromStack(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_t_bool_to_t_bool_fromStack(value0, add(headStart, 0))\n            }\n            function external_fun_isRegistrationOpen_156()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode_tuple_(4, calldatasize())\n                let ret_0 := fun_isRegistrationOpen_156()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                {\n                    let offset := 0\n                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n                }\n                {\n                    let offset := 32\n                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n                }\n            }\n            function abi_encode_tuple__to__fromStack(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_setRegistrationPeriod_137()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0, param_1 := abi_decode_tuple_t_uint256t_uint256(4, calldatasize())\n                fun_setRegistrationPeriod_137(param_0, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple__to__fromStack(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encodeUpdatedPos_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value0, pos)\n            }\n            function array_nextElement_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(value, pos) -> end\n            {\n                let length := array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n                let headStart := pos\n                let tail := add(pos, mul(length, 0x20))\n                let baseRef := array_dataslot_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value)\n                let srcPtr := baseRef\n                for { let i := 0 } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, sub(tail, headStart))\n                    let elementValue0 := mload(srcPtr)\n                    tail := abi_encodeUpdatedPos_t_bytes_memory_ptr_to_t_bytes_memory_ptr(elementValue0, tail)\n                    srcPtr := array_nextElement_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(srcPtr)\n                    pos := add(pos, 0x20)\n                }\n                pos := tail\n                end := pos\n            }\n            function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(value0, tail)\n            }\n            function external_fun_getLRSGroup_289()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode_tuple_(4, calldatasize())\n                let ret_0 := fun_getLRSGroup_289()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack(memPos, ret_0)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_getHashedIDs_196()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode_tuple_(4, calldatasize())\n                let ret_0 := fun_getHashedIDs_196()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack(memPos, ret_0)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function panic_error_0x00()\n            {\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n                mstore(4, 0x00)\n                revert(0, 0x24)\n            }\n            function array_storeLengthForEncoding_t_string_memory_ptr(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_t_string_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function abi_encode_t_string_storage_to_t_string_memory_ptr(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_t_string_memory_ptr(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(0x20, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_t_string_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, i)\n                }\n            }\n            function abi_encodeUpdatedPos_t_string_storage_to_t_string_memory_ptr(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_t_string_storage_to_t_string_memory_ptr(value0, pos)\n            }\n            function copy_array_from_storage_to_memory_t_string_storage(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_t_string_storage_to_t_string_memory_ptr(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function read_from_storage__dynamic_split_t_string_memory_ptr(slot, offset) -> value\n            {\n                if gt(offset, 0) { panic_error_0x00() }\n                value := copy_array_from_storage_to_memory_t_string_storage(slot)\n            }\n            /// @ast-id 28 @src 0:451:474  \"string public sessionID\"\n            function getter_fun_sessionID_28() -> ret_mpos\n            {\n                let slot := 9\n                let offset := 0\n                ret_mpos := read_from_storage__dynamic_split_t_string_memory_ptr(slot, offset)\n            }\n            /// @src 0:56:3076  \"contract Register {...\"\n            function array_length_t_string_memory_ptr(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end\n            {\n                let length := array_length_t_string_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of_32(length))\n            }\n            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0, tail)\n            }\n            function external_fun_sessionID_28()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode_tuple_(4, calldatasize())\n                let ret_0 := getter_fun_sessionID_28()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            { revert(0, 0) }\n            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n            { revert(0, 0) }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_t_bytes_memory_ptr(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of_32(length)\n                size := add(size, 0x20)\n            }\n            function copy_calldata_to_memory_with_cleanup(src, dst, length)\n            {\n                calldatacopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function abi_decode_t_bytes_memory_ptr(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                let length := calldataload(offset)\n                array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n            }\n            function abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                {\n                    let offset := calldataload(add(headStart, 0))\n                    if gt(offset, 0xffffffffffffffff)\n                    {\n                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    }\n                    value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n                }\n                {\n                    let offset := calldataload(add(headStart, 32))\n                    if gt(offset, 0xffffffffffffffff)\n                    {\n                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    }\n                    value1 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n                }\n            }\n            function external_fun_storeVoterData_242()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0, param_1 := abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptr(4, calldatasize())\n                fun_storeVoterData_242(param_0, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple__to__fromStack(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_t_array$_t_address_$dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_dataslot_t_array$_t_address_$dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_t_array$_t_address_$dyn_storage(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_t_array$_t_address_$dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_t_array$_t_address_$dyn_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_t_address(value) -> cleaned\n            {\n                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_t_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_t_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 7 @src 0:118:141  \"address[] public voters\"\n            function getter_fun_voters_7(key_0) -> ret\n            {\n                let slot := 1\n                let offset := 0\n                if iszero(lt(key_0, array_length_t_array$_t_address_$dyn_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_t_array$_t_address_$dyn_storage(slot, key_0)\n                ret := read_from_storage_split_dynamic_t_address(slot, offset)\n            }\n            /// @src 0:56:3076  \"contract Register {...\"\n            function cleanup_t_uint160(value) -> cleaned\n            {\n                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n            function cleanup_t_address(value) -> cleaned\n            {\n                cleaned := cleanup_t_uint160(value)\n            }\n            function abi_encode_t_address_to_t_address_fromStack(value, pos)\n            {\n                mstore(pos, cleanup_t_address(value))\n            }\n            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))\n            }\n            function external_fun_voters_7()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0 := abi_decode_tuple_t_uint256(4, calldatasize())\n                let ret_0 := getter_fun_voters_7(param_0)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_t_address(value)\n            {\n                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_t_address(value)\n            }\n            function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                {\n                    let offset := 0\n                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n                }\n            }\n            function external_fun_addEligibleVoter_304()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0 := abi_decode_tuple_t_address(4, calldatasize())\n                fun_addEligibleVoter_304(param_0)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple__to__fromStack(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_addVoter_96()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0 := abi_decode_tuple_t_address(4, calldatasize())\n                fun_addVoter_96(param_0)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple__to__fromStack(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 26 @src 0:425:445  \"address public admin\"\n            function getter_fun_admin_26() -> ret\n            {\n                let slot := 8\n                let offset := 0\n                ret := read_from_storage_split_dynamic_t_address(slot, offset)\n            }\n            /// @src 0:56:3076  \"contract Register {...\"\n            function external_fun_admin_26()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode_tuple_(4, calldatasize())\n                let ret_0 := getter_fun_admin_26()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_allocation_size_t_string_memory_ptr(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of_32(length)\n                size := add(size, 0x20)\n            }\n            function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function abi_decode_t_string_memory_ptr(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                let length := calldataload(offset)\n                array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n            }\n            function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                {\n                    let offset := calldataload(add(headStart, 0))\n                    if gt(offset, 0xffffffffffffffff)\n                    {\n                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    }\n                    value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n                }\n            }\n            function external_fun_setSessionID_81()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param_0 := abi_decode_tuple_t_string_memory_ptr(4, calldatasize())\n                fun_setSessionID_81(param_0)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple__to__fromStack(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function divide_by_32_ceil(value) -> result\n            {\n                result := div(add(value, 31), 32)\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_t_uint256_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n            }\n            function prepare_store_t_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0)\n            {\n                let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n            }\n            function zero_value_for_split_t_uint256() -> ret\n            { ret := 0 }\n            function storage_set_to_zero_t_uint256(slot, offset)\n            {\n                let zero_0 := zero_value_for_split_t_uint256()\n                update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n            }\n            function clear_storage_range_t_bytes1(start, end)\n            {\n                for { } lt(start, end) { start := add(start, 1) }\n                {\n                    storage_set_to_zero_t_uint256(start, 0)\n                }\n            }\n            function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let dataArea := array_dataslot_t_string_storage(array)\n                    let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n                    if lt(startIndex, 32) { deleteStart := dataArea }\n                    clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n                }\n            }\n            function mask_bytes_dynamic(data, bytes) -> result\n            {\n                let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n                result := and(data, mask)\n            }\n            function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n            {\n                data := mask_bytes_dynamic(data, len)\n                used := or(data, mul(2, len))\n            }\n            function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n            {\n                let newLen := array_length_t_string_memory_ptr(src)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let oldLen := extract_byte_array_length(sload(slot))\n                clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n                let srcOffset := 0\n                srcOffset := 0x20\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(0x1f))\n                    let dstPtr := array_dataslot_t_string_storage(slot)\n                    let i := 0\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, mload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 32)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(src, srcOffset))\n                        sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                    }\n                    sstore(slot, add(mul(newLen, 2), 1))\n                }\n                default {\n                    let value := 0\n                    if newLen\n                    {\n                        value := mload(add(src, srcOffset))\n                    }\n                    sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            function update_storage_value_offset_0t_string_memory_ptr_to_t_string_storage(slot, value_0)\n            {\n                copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, value_0)\n            }\n            /// @ast-id 81 @src 0:888:999  \"function setSessionID(string memory _id) external {...\"\n            function fun_setSessionID_81(var__id_70_mpos)\n            {\n                /// @src 0:960:963  \"_id\"\n                let _1_mpos := var__id_70_mpos\n                let expr_74_mpos := _1_mpos\n                /// @src 0:948:963  \"sessionID = _id\"\n                update_storage_value_offset_0t_string_memory_ptr_to_t_string_storage(0x09, expr_74_mpos)\n                let _2_slot := 0x09\n                let expr_75_slot := _2_slot\n                /// @src 0:978:992  \"SessionIDSet()\"\n                let _3 := 0xe58ec32171423e51ac209bf5b35a475e2fcc4d7bfaff23f2c522a84187554b06\n                {\n                    let _4 := allocate_unbounded()\n                    let _5 := abi_encode_tuple__to__fromStack(_4)\n                    log1(_4, sub(_5, _4), _3)\n                }\n            }\n            /// @src 0:56:3076  \"contract Register {...\"\n            function convert_array_t_array$_t_address_$dyn_storage_to_t_array$_t_address_$dyn_storage_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_t_array$_t_address_$dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_t_array$_t_address_$dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_t_array$_t_address_$dyn_storage_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_t_array$_t_address_$dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_t_array$_t_address_$dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function update_byte_slice_dynamic20(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffff)\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_t_uint160_to_t_uint160(value) -> converted\n            {\n                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n            }\n            function convert_t_uint160_to_t_address(value) -> converted\n            {\n                converted := convert_t_uint160_to_t_uint160(value)\n            }\n            function convert_t_address_to_t_address(value) -> converted\n            {\n                converted := convert_t_uint160_to_t_address(value)\n            }\n            function prepare_store_t_address(value) -> ret\n            { ret := value }\n            function update_storage_value_t_address_to_t_address(slot, offset, value_0)\n            {\n                let convertedValue_0 := convert_t_address_to_t_address(value_0)\n                sstore(slot, update_byte_slice_dynamic20(sload(slot), offset, prepare_store_t_address(convertedValue_0)))\n            }\n            function array_push_from_t_address_to_t_array$_t_address_$dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_t_array$_t_address_$dyn_storage_ptr(array, oldLen)\n                update_storage_value_t_address_to_t_address(slot, offset, value0)\n            }\n            /// @ast-id 96 @src 0:1195:1301  \"function addVoter(address _voter) external {...\"\n            function fun_addVoter_96(var__voter_83)\n            {\n                /// @src 0:1248:1254  \"voters\"\n                let _6_slot := 0x01\n                let expr_86_slot := _6_slot\n                /// @src 0:1248:1259  \"voters.push\"\n                let expr_88_self_slot := convert_array_t_array$_t_address_$dyn_storage_to_t_array$_t_address_$dyn_storage_ptr(expr_86_slot)\n                /// @src 0:1260:1266  \"_voter\"\n                let _7 := var__voter_83\n                let expr_89 := _7\n                /// @src 0:1248:1267  \"voters.push(_voter)\"\n                array_push_from_t_address_to_t_array$_t_address_$dyn_storage_ptr(expr_88_self_slot, expr_89)\n                /// @src 0:1282:1294  \"VoterAdded()\"\n                let _8 := 0x37f2e68eb4253d5e5ca8b87be4331e07a5704b7873bf488b6e152cc5dc06702d\n                {\n                    let _9 := allocate_unbounded()\n                    let _10 := abi_encode_tuple__to__fromStack(_9)\n                    log1(_9, sub(_10, _9), _8)\n                }\n            }\n            /// @src 0:56:3076  \"contract Register {...\"\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_0t_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_0_t_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_0t_address(sload(slot))\n            }\n            function store_literal_in_memory_dbd6a98282231e156411b592fc7f2369149974f37de9b40c285caf65601a5540(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not the admin\")\n            }\n            function abi_encode_t_stringliteral_dbd6a98282231e156411b592fc7f2369149974f37de9b40c285caf65601a5540_to_t_string_memory_ptr_fromStack(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n                store_literal_in_memory_dbd6a98282231e156411b592fc7f2369149974f37de9b40c285caf65601a5540(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_t_stringliteral_dbd6a98282231e156411b592fc7f2369149974f37de9b40c285caf65601a5540__to_t_string_memory_ptr__fromStack(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_t_stringliteral_dbd6a98282231e156411b592fc7f2369149974f37de9b40c285caf65601a5540_to_t_string_memory_ptr_fromStack(tail)\n            }\n            function require_helper_t_stringliteral_dbd6a98282231e156411b592fc7f2369149974f37de9b40c285caf65601a5540(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    let end := abi_encode_tuple_t_stringliteral_dbd6a98282231e156411b592fc7f2369149974f37de9b40c285caf65601a5540__to_t_string_memory_ptr__fromStack(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 59 @src 0:731:827  \"modifier onlyAdmin () {...\"\n            function modifier_onlyAdmin_103(var__start_98, var__end_100)\n            {\n                /// @src 0:771:781  \"msg.sender\"\n                let expr_51 := caller()\n                /// @src 0:785:790  \"admin\"\n                let _11 := read_from_storage_split_offset_0_t_address(0x08)\n                let expr_52 := _11\n                /// @src 0:771:790  \"msg.sender == admin\"\n                let expr_53 := eq(cleanup_t_address(expr_51), cleanup_t_address(expr_52))\n                /// @src 0:763:808  \"require(msg.sender == admin, 'Not the admin')\"\n                require_helper_t_stringliteral_dbd6a98282231e156411b592fc7f2369149974f37de9b40c285caf65601a5540(expr_53)\n                /// @src 0:819:820  \"_\"\n                fun_setRegistrationPeriod_137_inner(var__start_98, var__end_100)\n            }\n            /// @src 0:56:3076  \"contract Register {...\"\n            function store_literal_in_memory_effe876d15a3de6a4d7d4f75b52b0128a512c3a20375aeab7881ac2396d073f4(memPtr)\n            {\n                mstore(add(memPtr, 0), \"The registration cannot end befo\")\n                mstore(add(memPtr, 32), \"re it even starts\")\n            }\n            function abi_encode_t_stringliteral_effe876d15a3de6a4d7d4f75b52b0128a512c3a20375aeab7881ac2396d073f4_to_t_string_memory_ptr_fromStack(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 49)\n                store_literal_in_memory_effe876d15a3de6a4d7d4f75b52b0128a512c3a20375aeab7881ac2396d073f4(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_tuple_t_stringliteral_effe876d15a3de6a4d7d4f75b52b0128a512c3a20375aeab7881ac2396d073f4__to_t_string_memory_ptr__fromStack(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_t_stringliteral_effe876d15a3de6a4d7d4f75b52b0128a512c3a20375aeab7881ac2396d073f4_to_t_string_memory_ptr_fromStack(tail)\n            }\n            function require_helper_t_stringliteral_effe876d15a3de6a4d7d4f75b52b0128a512c3a20375aeab7881ac2396d073f4(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    let end := abi_encode_tuple_t_stringliteral_effe876d15a3de6a4d7d4f75b52b0128a512c3a20375aeab7881ac2396d073f4__to_t_string_memory_ptr__fromStack(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_e6dd7fe6725a3af46e079e3654e4a4f02867cb617fac607c908d38367608f23d(memPtr)\n            {\n                mstore(add(memPtr, 0), \"The registration can not take pl\")\n                mstore(add(memPtr, 32), \"ace in the past.\")\n            }\n            function abi_encode_t_stringliteral_e6dd7fe6725a3af46e079e3654e4a4f02867cb617fac607c908d38367608f23d_to_t_string_memory_ptr_fromStack(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 48)\n                store_literal_in_memory_e6dd7fe6725a3af46e079e3654e4a4f02867cb617fac607c908d38367608f23d(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_tuple_t_stringliteral_e6dd7fe6725a3af46e079e3654e4a4f02867cb617fac607c908d38367608f23d__to_t_string_memory_ptr__fromStack(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_t_stringliteral_e6dd7fe6725a3af46e079e3654e4a4f02867cb617fac607c908d38367608f23d_to_t_string_memory_ptr_fromStack(tail)\n            }\n            function require_helper_t_stringliteral_e6dd7fe6725a3af46e079e3654e4a4f02867cb617fac607c908d38367608f23d(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    let end := abi_encode_tuple_t_stringliteral_e6dd7fe6725a3af46e079e3654e4a4f02867cb617fac607c908d38367608f23d__to_t_string_memory_ptr__fromStack(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left_0(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_32_shift_0(value, toInsert) -> result\n            {\n                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0)\n            {\n                let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))\n            }\n            /// @src 0:1307:1709  \"function setRegistrationPeriod(uint256 _start, uint256 _end) external onlyAdmin {...\"\n            function fun_setRegistrationPeriod_137_inner(var__start_98, var__end_100)\n            {\n                /// @src 0:1405:1411  \"_start\"\n                let _12 := var__start_98\n                let expr_106 := _12\n                /// @src 0:1414:1418  \"_end\"\n                let _13 := var__end_100\n                let expr_107 := _13\n                /// @src 0:1405:1418  \"_start < _end\"\n                let expr_108 := lt(cleanup_t_uint256(expr_106), cleanup_t_uint256(expr_107))\n                /// @src 0:1397:1472  \"require(_start < _end, 'The registration cannot end before it even starts')\"\n                require_helper_t_stringliteral_effe876d15a3de6a4d7d4f75b52b0128a512c3a20375aeab7881ac2396d073f4(expr_108)\n                /// @src 0:1490:1496  \"_start\"\n                let _14 := var__start_98\n                let expr_113 := _14\n                /// @src 0:1500:1515  \"block.timestamp\"\n                let expr_115 := timestamp()\n                /// @src 0:1490:1515  \"_start >= block.timestamp\"\n                let expr_116 := iszero(lt(cleanup_t_uint256(expr_113), cleanup_t_uint256(expr_115)))\n                /// @src 0:1490:1541  \"_start >= block.timestamp && _end > block.timestamp\"\n                let expr_121 := expr_116\n                if expr_121\n                {\n                    /// @src 0:1519:1523  \"_end\"\n                    let _15 := var__end_100\n                    let expr_117 := _15\n                    /// @src 0:1526:1541  \"block.timestamp\"\n                    let expr_119 := timestamp()\n                    /// @src 0:1519:1541  \"_end > block.timestamp\"\n                    let expr_120 := gt(cleanup_t_uint256(expr_117), cleanup_t_uint256(expr_119))\n                    /// @src 0:1490:1541  \"_start >= block.timestamp && _end > block.timestamp\"\n                    expr_121 := expr_120\n                }\n                /// @src 0:1482:1594  \"require(_start >= block.timestamp && _end > block.timestamp, 'The registration can not take place in the past.')\"\n                require_helper_t_stringliteral_e6dd7fe6725a3af46e079e3654e4a4f02867cb617fac607c908d38367608f23d(expr_121)\n                /// @src 0:1625:1631  \"_start\"\n                let _16 := var__start_98\n                let expr_126 := _16\n                /// @src 0:1605:1631  \"registrationStart = _start\"\n                update_storage_value_offset_0t_uint256_to_t_uint256(0x06, expr_126)\n                let expr_127 := expr_126\n                /// @src 0:1659:1663  \"_end\"\n                let _17 := var__end_100\n                let expr_130 := _17\n                /// @src 0:1641:1663  \"registrationEnd = _end\"\n                update_storage_value_offset_0t_uint256_to_t_uint256(0x07, expr_130)\n                let expr_131 := expr_130\n                /// @src 0:1679:1702  \"RegistrationPeriodSet()\"\n                let _18 := 0xb8838e2c2617c477bf17ad2833b5a7bdedb778d2e24399dd6a5ee10e88351dbd\n                {\n                    let _19 := allocate_unbounded()\n                    let _20 := abi_encode_tuple__to__fromStack(_19)\n                    log1(_19, sub(_20, _19), _18)\n                }\n            }\n            /// @ast-id 137 @src 0:1307:1709  \"function setRegistrationPeriod(uint256 _start, uint256 _end) external onlyAdmin {...\"\n            function fun_setRegistrationPeriod_137(var__start_98, var__end_100)\n            {\n                modifier_onlyAdmin_103(var__start_98, var__end_100)\n            }\n            /// @src 0:56:3076  \"contract Register {...\"\n            function zero_value_for_split_t_bool() -> ret\n            { ret := 0 }\n            function cleanup_from_storage_t_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_offset_0t_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_t_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_0_t_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_0t_uint256(sload(slot))\n            }\n            /// @ast-id 156 @src 0:1715:1879  \"function isRegistrationOpen() public view returns (bool isOpen) {...\"\n            function fun_isRegistrationOpen_156() -> var_isOpen_140\n            {\n                /// @src 0:1766:1777  \"bool isOpen\"\n                let zero_t_bool_21 := zero_value_for_split_t_bool()\n                var_isOpen_140 := zero_t_bool_21\n                /// @src 0:1799:1814  \"registrationEnd\"\n                let _22 := read_from_storage_split_offset_0_t_uint256(0x07)\n                let expr_143 := _22\n                /// @src 0:1817:1832  \"block.timestamp\"\n                let expr_145 := timestamp()\n                /// @src 0:1799:1832  \"registrationEnd > block.timestamp\"\n                let expr_146 := gt(cleanup_t_uint256(expr_143), cleanup_t_uint256(expr_145))\n                /// @src 0:1799:1871  \"registrationEnd > block.timestamp && registrationStart < block.timestamp\"\n                let expr_151 := expr_146\n                if expr_151\n                {\n                    /// @src 0:1836:1853  \"registrationStart\"\n                    let _23 := read_from_storage_split_offset_0_t_uint256(0x06)\n                    let expr_147 := _23\n                    /// @src 0:1856:1871  \"block.timestamp\"\n                    let expr_149 := timestamp()\n                    /// @src 0:1836:1871  \"registrationStart < block.timestamp\"\n                    let expr_150 := lt(cleanup_t_uint256(expr_147), cleanup_t_uint256(expr_149))\n                    /// @src 0:1799:1871  \"registrationEnd > block.timestamp && registrationStart < block.timestamp\"\n                    expr_151 := expr_150\n                }\n                /// @src 0:1798:1872  \"(registrationEnd > block.timestamp && registrationStart < block.timestamp)\"\n                let expr_152 := expr_151\n                /// @src 0:1789:1872  \"isOpen = (registrationEnd > block.timestamp && registrationStart < block.timestamp)\"\n                var_isOpen_140 := expr_152\n                let expr_153 := expr_152\n            }\n            /// @src 0:56:3076  \"contract Register {...\"\n            function zero_value_for_split_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr() -> ret\n            { ret := 96 }\n            function array_length_t_array$_t_bytes_storage_$dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_t_bytes_memory_ptr() -> ret\n            { ret := 96 }\n            function zero_complex_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(dataStart, dataSizeInBytes)\n            {\n                for { let i := 0 } lt(i, dataSizeInBytes) { i := add(i, 32) }\n                {\n                    mstore(add(dataStart, i), zero_value_for_t_bytes_memory_ptr())\n                }\n            }\n            function allocate_and_zero_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length) -> memPtr\n            {\n                memPtr := allocate_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length)\n                let dataStart := memPtr\n                let dataSize := array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length)\n                dataStart := add(dataStart, 32)\n                dataSize := sub(dataSize, 32)\n                zero_complex_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(dataStart, dataSize)\n            }\n            function cleanup_t_rational_0_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function increment_t_uint256(value) -> ret\n            {\n                value := cleanup_t_uint256(value)\n                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n                ret := add(value, 1)\n            }\n            function array_dataslot_t_array$_t_bytes_storage_$dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_t_array$_t_bytes_storage_$dyn_storage(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_t_array$_t_bytes_storage_$dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_t_array$_t_bytes_storage_$dyn_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(baseRef, index) -> addr\n            {\n                if iszero(lt(index, array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(baseRef))) { panic_error_0x32() }\n                let offset := mul(index, 32)\n                offset := add(offset, 32)\n                addr := add(baseRef, offset)\n            }\n            function convert_array_t_bytes_storage_to_t_bytes_memory_ptr(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_t_bytes_storage(value)\n            }\n            /// @ast-id 196 @src 0:1886:2163  \"function getHashedIDs() external view returns (bytes[] memory _hashedIDs) {...\"\n            function fun_getHashedIDs_196() -> var__hashedIDs_160_mpos\n            {\n                /// @src 0:1933:1958  \"bytes[] memory _hashedIDs\"\n                let zero_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_24_mpos := zero_value_for_split_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr()\n                var__hashedIDs_160_mpos := zero_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_24_mpos\n                /// @src 0:1987:2002  \"votersHashedIDs\"\n                let _25_slot := 0x02\n                let expr_164_slot := _25_slot\n                /// @src 0:1987:2009  \"votersHashedIDs.length\"\n                let expr_165 := array_length_t_array$_t_bytes_storage_$dyn_storage(expr_164_slot)\n                /// @src 0:1970:2009  \"uint256 length = votersHashedIDs.length\"\n                let var_length_163 := expr_165\n                /// @src 0:2044:2050  \"length\"\n                let _26 := var_length_163\n                let expr_171 := _26\n                /// @src 0:2032:2051  \"new bytes[](length)\"\n                let expr_172_mpos := allocate_and_zero_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_171)\n                /// @src 0:2019:2051  \"_hashedIDs = new bytes[](length)\"\n                var__hashedIDs_160_mpos := expr_172_mpos\n                let _27_mpos := var__hashedIDs_160_mpos\n                let expr_173_mpos := _27_mpos\n                /// @src 0:2061:2157  \"for (uint256 i = 0; i < length; i++) {...\"\n                for {\n                    /// @src 0:2078:2079  \"0\"\n                    let expr_177 := 0x00\n                    /// @src 0:2066:2079  \"uint256 i = 0\"\n                    let var_i_176 := convert_t_rational_0_by_1_to_t_uint256(expr_177)\n                }\n                1\n                {\n                    /// @src 0:2093:2096  \"i++\"\n                    let _29 := var_i_176\n                    let _28 := increment_t_uint256(_29)\n                    var_i_176 := _28\n                    let expr_183 := _29\n                }\n                {\n                    /// @src 0:2081:2082  \"i\"\n                    let _30 := var_i_176\n                    let expr_179 := _30\n                    /// @src 0:2085:2091  \"length\"\n                    let _31 := var_length_163\n                    let expr_180 := _31\n                    /// @src 0:2081:2091  \"i < length\"\n                    let expr_181 := lt(cleanup_t_uint256(expr_179), cleanup_t_uint256(expr_180))\n                    if iszero(expr_181) { break }\n                    /// @src 0:2128:2143  \"votersHashedIDs\"\n                    let _32_slot := 0x02\n                    let expr_188_slot := _32_slot\n                    /// @src 0:2144:2145  \"i\"\n                    let _33 := var_i_176\n                    let expr_189 := _33\n                    /// @src 0:2128:2146  \"votersHashedIDs[i]\"\n                    let _34, _35 := storage_array_index_access_t_array$_t_bytes_storage_$dyn_storage(expr_188_slot, expr_189)\n                    let _36_slot := _34\n                    let expr_190_slot := _36_slot\n                    /// @src 0:2112:2122  \"_hashedIDs\"\n                    let _37_mpos := var__hashedIDs_160_mpos\n                    let expr_185_mpos := _37_mpos\n                    /// @src 0:2123:2124  \"i\"\n                    let _38 := var_i_176\n                    let expr_186 := _38\n                    /// @src 0:2112:2146  \"_hashedIDs[i] = votersHashedIDs[i]\"\n                    mstore(memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_185_mpos, expr_186), convert_array_t_bytes_storage_to_t_bytes_memory_ptr(expr_190_slot))\n                    let _39_mpos := mload(memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_185_mpos, expr_186))\n                    let expr_191_mpos := _39_mpos\n                }\n            }\n            /// @src 0:56:3076  \"contract Register {...\"\n            function convert_array_t_array$_t_bytes_storage_$dyn_storage_to_t_array$_t_bytes_storage_$dyn_storage_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_t_array$_t_bytes_storage_$dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_t_array$_t_bytes_storage_$dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_t_array$_t_bytes_storage_$dyn_storage_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_t_array$_t_bytes_storage_$dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_t_array$_t_bytes_storage_$dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function clean_up_bytearray_end_slots_t_bytes_storage(array, len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let dataArea := array_dataslot_t_bytes_storage(array)\n                    let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n                    if lt(startIndex, 32) { deleteStart := dataArea }\n                    clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n                }\n            }\n            function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n            {\n                let newLen := array_length_t_bytes_memory_ptr(src)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let oldLen := extract_byte_array_length(sload(slot))\n                clean_up_bytearray_end_slots_t_bytes_storage(slot, oldLen, newLen)\n                let srcOffset := 0\n                srcOffset := 0x20\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(0x1f))\n                    let dstPtr := array_dataslot_t_bytes_storage(slot)\n                    let i := 0\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, mload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 32)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(src, srcOffset))\n                        sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                    }\n                    sstore(slot, add(mul(newLen, 2), 1))\n                }\n                default {\n                    let value := 0\n                    if newLen\n                    {\n                        value := mload(add(src, srcOffset))\n                    }\n                    sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            function update_storage_value_t_bytes_memory_ptr_to_t_bytes_storage(slot, offset, value_0)\n            {\n                if offset { panic_error_0x00() }\n                copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, value_0)\n            }\n            function array_push_from_t_bytes_memory_ptr_to_t_array$_t_bytes_storage_$dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_t_array$_t_bytes_storage_$dyn_storage_ptr(array, oldLen)\n                update_storage_value_t_bytes_memory_ptr_to_t_bytes_storage(slot, offset, value0)\n            }\n            function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end\n            {\n                let length := array_length_t_bytes_memory_ptr(value)\n                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, length)\n            }\n            function leftAlign_t_uint256(value) -> aligned\n            { aligned := value }\n            function abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value, pos)\n            {\n                mstore(pos, leftAlign_t_uint256(cleanup_t_uint256(value)))\n            }\n            function abi_encode_tuple_packed_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__nonPadded_inplace_fromStack(pos, value0, value1) -> end\n            {\n                pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0, pos)\n                abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value1, pos)\n                pos := add(pos, 32)\n                end := pos\n            }\n            function packed_hashed_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256_(var_1, var_2) -> hash\n            {\n                let pos := allocate_unbounded()\n                let end := abi_encode_tuple_packed_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__nonPadded_inplace_fromStack(pos, var_1, var_2)\n                hash := keccak256(pos, sub(end, pos))\n            }\n            function mapping_index_access_t_mapping$_t_bytes_memory_ptr_$_t_bytes_storage_$_of_t_bytes_memory_ptr(slot, key_0) -> dataSlot\n            {\n                dataSlot := packed_hashed_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256_(key_0, slot)\n            }\n            function update_storage_value_offset_0t_bytes_memory_ptr_to_t_bytes_storage(slot, value_0)\n            {\n                copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, value_0)\n            }\n            function allocate_memory_struct_t_struct$_VoterData_$43_storage_ptr() -> memPtr\n            { memPtr := allocate_memory(64) }\n            function write_to_memory_t_bytes_memory_ptr(memPtr, value)\n            { mstore(memPtr, value) }\n            function convert_array_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_to_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 2))\n                offset := 0\n            }\n            function read_from_memoryt_bytes_memory_ptr(memPtr) -> value\n            { value := mload(memPtr) }\n            function copy_struct_to_storage_from_t_struct$_VoterData_$43_memory_ptr_to_t_struct$_VoterData_$43_storage(slot, value)\n            {\n                {\n                    let memberSlot := add(slot, 0)\n                    let memberSrcPtr := add(value, 0)\n                    let memberValue_0 := read_from_memoryt_bytes_memory_ptr(memberSrcPtr)\n                    update_storage_value_offset_0t_bytes_memory_ptr_to_t_bytes_storage(memberSlot, memberValue_0)\n                }\n                {\n                    let memberSlot := add(slot, 1)\n                    let memberSrcPtr := add(value, 32)\n                    let memberValue_0 := read_from_memoryt_bytes_memory_ptr(memberSrcPtr)\n                    update_storage_value_offset_0t_bytes_memory_ptr_to_t_bytes_storage(memberSlot, memberValue_0)\n                }\n            }\n            function update_storage_value_t_struct$_VoterData_$43_memory_ptr_to_t_struct$_VoterData_$43_storage(slot, offset, value_0)\n            {\n                if offset { panic_error_0x00() }\n                copy_struct_to_storage_from_t_struct$_VoterData_$43_memory_ptr_to_t_struct$_VoterData_$43_storage(slot, value_0)\n            }\n            function array_push_from_t_struct$_VoterData_$43_memory_ptr_to_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_ptr(array, oldLen)\n                update_storage_value_t_struct$_VoterData_$43_memory_ptr_to_t_struct$_VoterData_$43_storage(slot, offset, value0)\n            }\n            /// @ast-id 242 @src 0:2169:2629  \"function storeVoterData(bytes memory _hashedID, bytes memory _publicKey) external {...\"\n            function fun_storeVoterData_242(var__hashedID_198_mpos, var__publicKey_200_mpos)\n            {\n                /// @src 0:2359:2374  \"votersHashedIDs\"\n                let _40_slot := 0x02\n                let expr_203_slot := _40_slot\n                /// @src 0:2359:2379  \"votersHashedIDs.push\"\n                let expr_205_self_slot := convert_array_t_array$_t_bytes_storage_$dyn_storage_to_t_array$_t_bytes_storage_$dyn_storage_ptr(expr_203_slot)\n                /// @src 0:2380:2389  \"_hashedID\"\n                let _41_mpos := var__hashedID_198_mpos\n                let expr_206_mpos := _41_mpos\n                /// @src 0:2359:2390  \"votersHashedIDs.push(_hashedID)\"\n                array_push_from_t_bytes_memory_ptr_to_t_array$_t_bytes_storage_$dyn_storage_ptr(expr_205_self_slot, expr_206_mpos)\n                /// @src 0:2427:2437  \"_publicKey\"\n                let _42_mpos := var__publicKey_200_mpos\n                let expr_212_mpos := _42_mpos\n                /// @src 0:2400:2413  \"lrsPublicKeys\"\n                let _43_slot := 0x05\n                let expr_209_slot := _43_slot\n                /// @src 0:2414:2423  \"_hashedID\"\n                let _44_mpos := var__hashedID_198_mpos\n                let expr_210_mpos := _44_mpos\n                /// @src 0:2400:2424  \"lrsPublicKeys[_hashedID]\"\n                let _45 := mapping_index_access_t_mapping$_t_bytes_memory_ptr_$_t_bytes_storage_$_of_t_bytes_memory_ptr(expr_209_slot, expr_210_mpos)\n                /// @src 0:2400:2437  \"lrsPublicKeys[_hashedID] = _publicKey\"\n                update_storage_value_offset_0t_bytes_memory_ptr_to_t_bytes_storage(_45, expr_212_mpos)\n                let _46_slot := _45\n                let expr_213_slot := _46_slot\n                /// @src 0:2447:2450  \"lrs\"\n                let _47_slot := 0x03\n                let expr_215_slot := _47_slot\n                /// @src 0:2447:2455  \"lrs.push\"\n                let expr_217_self_slot := convert_array_t_array$_t_bytes_storage_$dyn_storage_to_t_array$_t_bytes_storage_$dyn_storage_ptr(expr_215_slot)\n                /// @src 0:2456:2466  \"_publicKey\"\n                let _48_mpos := var__publicKey_200_mpos\n                let expr_218_mpos := _48_mpos\n                /// @src 0:2447:2467  \"lrs.push(_publicKey)\"\n                array_push_from_t_bytes_memory_ptr_to_t_array$_t_bytes_storage_$dyn_storage_ptr(expr_217_self_slot, expr_218_mpos)\n                /// @src 0:2511:2521  \"_publicKey\"\n                let _49_mpos := var__publicKey_200_mpos\n                let expr_225_mpos := _49_mpos\n                /// @src 0:2523:2532  \"_hashedID\"\n                let _50_mpos := var__hashedID_198_mpos\n                let expr_226_mpos := _50_mpos\n                /// @src 0:2501:2533  \"VoterData(_publicKey, _hashedID)\"\n                let expr_227_mpos := allocate_memory_struct_t_struct$_VoterData_$43_storage_ptr()\n                write_to_memory_t_bytes_memory_ptr(add(expr_227_mpos, 0), expr_225_mpos)\n                write_to_memory_t_bytes_memory_ptr(add(expr_227_mpos, 32), expr_226_mpos)\n                /// @src 0:2477:2533  \"VoterData memory data = VoterData(_publicKey, _hashedID)\"\n                let var_data_223_mpos := expr_227_mpos\n                /// @src 0:2543:2552  \"voterData\"\n                let _51_slot := 0x0a\n                let expr_229_slot := _51_slot\n                /// @src 0:2543:2557  \"voterData.push\"\n                let expr_231_self_slot := convert_array_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_to_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_ptr(expr_229_slot)\n                /// @src 0:2558:2562  \"data\"\n                let _52_mpos := var_data_223_mpos\n                let expr_232_mpos := _52_mpos\n                /// @src 0:2543:2563  \"voterData.push(data)\"\n                array_push_from_t_struct$_VoterData_$43_memory_ptr_to_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_ptr(expr_231_self_slot, expr_232_mpos)\n                /// @src 0:2578:2594  \"HashedIDStored()\"\n                let _53 := 0x05373e72b75e419b54c42d3c3a8b5fa03e10c0ea3375b2d3aa692ade48bd2e82\n                {\n                    let _54 := allocate_unbounded()\n                    let _55 := abi_encode_tuple__to__fromStack(_54)\n                    log1(_54, sub(_55, _54), _53)\n                }\n                /// @src 0:2609:2622  \"LRSPKStored()\"\n                let _56 := 0xbc8e1c9823e80d9d9c77956951be8321234bbdc3da9d36c27af050365cc2bc00\n                {\n                    let _57 := allocate_unbounded()\n                    let _58 := abi_encode_tuple__to__fromStack(_57)\n                    log1(_57, sub(_58, _57), _56)\n                }\n            }\n            /// @src 0:56:3076  \"contract Register {...\"\n            function zero_value_for_split_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr() -> ret\n            { ret := 96 }\n            function array_allocation_size_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function allocate_memory_struct_t_struct$_VoterData_$43_memory_ptr() -> memPtr\n            { memPtr := allocate_memory(64) }\n            function read_from_storage_reference_type_t_struct$_VoterData_$43_memory_ptr(slot) -> value\n            {\n                value := allocate_memory_struct_t_struct$_VoterData_$43_memory_ptr()\n                {\n                    let memberValue_0 := copy_array_from_storage_to_memory_t_bytes_storage(add(slot, 0))\n                    write_to_memory_t_bytes_memory_ptr(add(value, 0), memberValue_0)\n                }\n                {\n                    let memberValue_0 := copy_array_from_storage_to_memory_t_bytes_storage(add(slot, 1))\n                    write_to_memory_t_bytes_memory_ptr(add(value, 32), memberValue_0)\n                }\n            }\n            function convert_t_struct$_VoterData_$43_storage_to_t_struct$_VoterData_$43_memory_ptr(value) -> converted\n            {\n                converted := read_from_storage_reference_type_t_struct$_VoterData_$43_memory_ptr(value)\n            }\n            function copy_array_from_storage_to_memory_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage(slot) -> memPtr\n            {\n                let length := array_length_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage(slot)\n                memPtr := allocate_memory_array_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(length)\n                let mpos := memPtr\n                mpos := add(mpos, 0x20)\n                let spos := array_dataslot_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage(slot)\n                for { let i := 0 } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, convert_t_struct$_VoterData_$43_storage_to_t_struct$_VoterData_$43_memory_ptr(spos))\n                    mpos := add(mpos, 0x20)\n                    spos := add(spos, 2)\n                }\n            }\n            function convert_array_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_to_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage(value)\n            }\n            /// @ast-id 252 @src 0:2635:2733  \"function getVoterData() public view returns(VoterData[] memory ) {...\"\n            function fun_getVoterData_252() -> var__247_mpos\n            {\n                /// @src 0:2679:2697  \"VoterData[] memory\"\n                let zero_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr_59_mpos := zero_value_for_split_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr()\n                var__247_mpos := zero_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr_59_mpos\n                /// @src 0:2717:2726  \"voterData\"\n                let _60_slot := 0x0a\n                let expr_249_slot := _60_slot\n                /// @src 0:2710:2726  \"return voterData\"\n                var__247_mpos := convert_array_t_array$_t_struct$_VoterData_$43_storage_$dyn_storage_to_t_array$_t_struct$_VoterData_$43_memory_ptr_$dyn_memory_ptr(expr_249_slot)\n                leave\n            }\n            /// @ast-id 289 @src 0:2740:2944  \"function getLRSGroup() external view returns(bytes[] memory _lrs) {...\"\n            function fun_getLRSGroup_289() -> var__lrs_256_mpos\n            {\n                /// @src 0:2785:2804  \"bytes[] memory _lrs\"\n                let zero_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_61_mpos := zero_value_for_split_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr()\n                var__lrs_256_mpos := zero_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_61_mpos\n                /// @src 0:2835:2838  \"lrs\"\n                let _62_slot := 0x03\n                let expr_262_slot := _62_slot\n                /// @src 0:2835:2845  \"lrs.length\"\n                let expr_263 := array_length_t_array$_t_bytes_storage_$dyn_storage(expr_262_slot)\n                /// @src 0:2823:2846  \"new bytes[](lrs.length)\"\n                let expr_264_mpos := allocate_and_zero_memory_array_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_263)\n                /// @src 0:2816:2846  \"_lrs = new bytes[](lrs.length)\"\n                var__lrs_256_mpos := expr_264_mpos\n                let _63_mpos := var__lrs_256_mpos\n                let expr_265_mpos := _63_mpos\n                /// @src 0:2856:2938  \"for (uint256 i = 0; i < lrs.length; i++) {...\"\n                for {\n                    /// @src 0:2873:2874  \"0\"\n                    let expr_269 := 0x00\n                    /// @src 0:2861:2874  \"uint256 i = 0\"\n                    let var_i_268 := convert_t_rational_0_by_1_to_t_uint256(expr_269)\n                }\n                1\n                {\n                    /// @src 0:2892:2895  \"i++\"\n                    let _65 := var_i_268\n                    let _64 := increment_t_uint256(_65)\n                    var_i_268 := _64\n                    let expr_276 := _65\n                }\n                {\n                    /// @src 0:2876:2877  \"i\"\n                    let _66 := var_i_268\n                    let expr_271 := _66\n                    /// @src 0:2880:2883  \"lrs\"\n                    let _67_slot := 0x03\n                    let expr_272_slot := _67_slot\n                    /// @src 0:2880:2890  \"lrs.length\"\n                    let expr_273 := array_length_t_array$_t_bytes_storage_$dyn_storage(expr_272_slot)\n                    /// @src 0:2876:2890  \"i < lrs.length\"\n                    let expr_274 := lt(cleanup_t_uint256(expr_271), cleanup_t_uint256(expr_273))\n                    if iszero(expr_274) { break }\n                    /// @src 0:2921:2924  \"lrs\"\n                    let _68_slot := 0x03\n                    let expr_281_slot := _68_slot\n                    /// @src 0:2925:2926  \"i\"\n                    let _69 := var_i_268\n                    let expr_282 := _69\n                    /// @src 0:2921:2927  \"lrs[i]\"\n                    let _70, _71 := storage_array_index_access_t_array$_t_bytes_storage_$dyn_storage(expr_281_slot, expr_282)\n                    let _72_slot := _70\n                    let expr_283_slot := _72_slot\n                    /// @src 0:2911:2915  \"_lrs\"\n                    let _73_mpos := var__lrs_256_mpos\n                    let expr_278_mpos := _73_mpos\n                    /// @src 0:2916:2917  \"i\"\n                    let _74 := var_i_268\n                    let expr_279 := _74\n                    /// @src 0:2911:2927  \"_lrs[i] = lrs[i]\"\n                    mstore(memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_278_mpos, expr_279), convert_array_t_bytes_storage_to_t_bytes_memory_ptr(expr_283_slot))\n                    let _75_mpos := mload(memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_278_mpos, expr_279))\n                    let expr_284_mpos := _75_mpos\n                }\n            }\n            /// @ast-id 304 @src 0:2950:3072  \"function addEligibleVoter(address _voter) external {...\"\n            function fun_addEligibleVoter_304(var__voter_291)\n            {\n                /// @src 0:3011:3025  \"eligibleVoters\"\n                let _76_slot := 0x00\n                let expr_294_slot := _76_slot\n                /// @src 0:3011:3030  \"eligibleVoters.push\"\n                let expr_296_self_slot := convert_array_t_array$_t_address_$dyn_storage_to_t_array$_t_address_$dyn_storage_ptr(expr_294_slot)\n                /// @src 0:3031:3037  \"_voter\"\n                let _77 := var__voter_291\n                let expr_297 := _77\n                /// @src 0:3011:3038  \"eligibleVoters.push(_voter)\"\n                array_push_from_t_address_to_t_array$_t_address_$dyn_storage_ptr(expr_296_self_slot, expr_297)\n                /// @src 0:3053:3065  \"VoterAdded()\"\n                let _78 := 0x37f2e68eb4253d5e5ca8b87be4331e07a5704b7873bf488b6e152cc5dc06702d\n                {\n                    let _79 := allocate_unbounded()\n                    let _80 := abi_encode_tuple__to__fromStack(_79)\n                    log1(_79, sub(_80, _79), _78)\n                }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220c19e9bf5f9e28af56ae20d6558b63b6cbdfde3c703c4fe01dffd4c5492c3fcd664736f6c63430008110033\"\n    }\n}\n","hash":"010001d5e951fc831682f54c0204818fa1169afa8e86a4d6725dff7b4f3624a6","factoryDependencies":{}}}}}}