import * as bigintCryptoUtils from "bigint-crypto-utils";
export declare function RandomBnd(n: bigint): bigint;
export declare const prime: typeof bigintCryptoUtils.prime;
export declare const PowerMod: typeof bigintCryptoUtils.modPow;
export declare const InvMod: typeof bigintCryptoUtils.modInv;
export declare function factorial(n: number): bigint;
export declare function Gen_Coprime(n: bigint): bigint;
export declare function GCD(a: any, b: any): any;
export declare function modulus(a: bigint, b: bigint): bigint;
export declare function MulMod(a: bigint, b: bigint, n: bigint): bigint;
export declare function coefficient_generation(PP: bigint, nParties: number): readonly [any[], any[], any[], any[], any[], any[]];
export declare function pick_pq(i: number | undefined, keyLength: bigint): bigint;
export declare function compute_tuple(j: bigint, PP: bigint, pi: bigint, qi: bigint, [p, pp, q, qq, h, hh]: any): readonly [bigint, bigint, bigint];
export declare function evaluate_polynomial(coeff: bigint[], x: bigint): bigint;
export declare function generate_polynomial(n: number, bound: bigint): any[];
export declare function Jacobi(a: bigint, n: bigint): number;
