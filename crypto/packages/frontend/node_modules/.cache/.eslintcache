[{"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/index.tsx":"1","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/reportWebVitals.ts":"2","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/router.tsx":"3","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/App.tsx":"4","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/components/layout.tsx":"5","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/vote/index.tsx":"6","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/decrypt/index.tsx":"7","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/generate/index.tsx":"8","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/filter/index.tsx":"9","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/preelection/index.tsx":"10","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/keygen/index.tsx":"11","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/connections/session.ts":"12","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/connections/api.ts":"13","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/hooks/useSession.ts":"14","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/components/groups.tsx":"15","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/components/parties.tsx":"16","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/connections/signalling.ts":"17","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/connections/party.ts":"18","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/util/queue.ts":"19","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/Vrf/vrf.js":"20"},{"size":513,"mtime":1706021076996,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":1706021076999,"results":"23","hashOfConfig":"22"},{"size":2371,"mtime":1706021076999,"results":"24","hashOfConfig":"22"},{"size":174,"mtime":1706021076994,"results":"25","hashOfConfig":"22"},{"size":415,"mtime":1706021076995,"results":"26","hashOfConfig":"22"},{"size":10940,"mtime":1706190700883,"results":"27","hashOfConfig":"22"},{"size":7106,"mtime":1706190700882,"results":"28","hashOfConfig":"22"},{"size":12802,"mtime":1706190700883,"results":"29","hashOfConfig":"22"},{"size":3121,"mtime":1706190700882,"results":"30","hashOfConfig":"22"},{"size":4727,"mtime":1706021076997,"results":"31","hashOfConfig":"22"},{"size":3475,"mtime":1706190700883,"results":"32","hashOfConfig":"22"},{"size":11306,"mtime":1706021076995,"results":"33","hashOfConfig":"22"},{"size":52,"mtime":1706190700881,"results":"34","hashOfConfig":"22"},{"size":1021,"mtime":1706021076996,"results":"35","hashOfConfig":"22"},{"size":705,"mtime":1706021076994,"results":"36","hashOfConfig":"22"},{"size":2063,"mtime":1706021076995,"results":"37","hashOfConfig":"22"},{"size":1279,"mtime":1706021076996,"results":"38","hashOfConfig":"22"},{"size":4992,"mtime":1706021076995,"results":"39","hashOfConfig":"22"},{"size":307,"mtime":1706021076999,"results":"40","hashOfConfig":"22"},{"size":17461,"mtime":1706190700881,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2amj53",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/index.tsx",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/reportWebVitals.ts",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/router.tsx",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/App.tsx",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/components/layout.tsx",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/vote/index.tsx",["85","86","87","88","89","90","91","92","93","94","95","96"],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/decrypt/index.tsx",["97","98"],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/generate/index.tsx",["99","100","101","102","103","104","105","106","107"],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/filter/index.tsx",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/preelection/index.tsx",["108","109","110","111"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getAndVerifyVotes, GetLookUpTable } from \"../../connections/session\";\n\nexport default function Electionres() {\n  const [voterData, setVoterData] = useState(\n    null as\n      | null\n      | [\n          bigint,\n          {\n            y0: bigint;\n            vote: bigint;\n            zkp: boolean;\n            signature: boolean;\n            // voterID: string;\n            // counter: string;\n            token: string;\n          }[]\n        ][]\n  );\n\n  const [allTokens, setAllTokens] = useState([]);\n\n  useEffect(() => {\n    if (!voterData) return;\n\n    const allTokens = voterData.forEach((entry) => {\n      entry.forEach((vote) => {\n        console.log(vote);\n      });\n    });\n  }, [voterData]);\n\n  const { sessionId } = useParams();\n\n  const [lookupTable, setLookupTable] = useState(\n    null as null | { value: string; point: string }[]\n  );\n\n  useEffect(() => {\n    const cb = async () => {\n      if (sessionId) {\n        const { voteVerification } = await getAndVerifyVotes(sessionId ,1);\n\n        const voteMap = new Map<\n          bigint,\n          {\n            y0: bigint;\n            vote: bigint;\n            zkp: boolean;\n            signature: boolean;\n            // voterID: string;\n            // counter: string;\n            token: string;\n          }[]\n        >();\n        for (const vote of voteVerification) {\n          const data = {\n            //  voterID: vote.voterID,\n            //  counter: vote.counter,\n            token: vote.token,\n            y0: vote.y0,\n            vote: vote.vote,\n            zkp: vote.zkp,\n            signature: vote.signature,\n          };\n          if (voteMap.has(data.y0)) {\n            voteMap.get(data.y0)?.push(data);\n          } else {\n            voteMap.set(vote.y0, [data]);\n          }\n        }\n        let i = 0;\n        const res = Array(voteMap.size) as [\n          bigint,\n          {\n            y0: bigint;\n            vote: bigint;\n            zkp: boolean;\n            signature: boolean;\n            // voterID: string;\n            //  counter: string;\n            token: string;\n          }[]\n        ][];\n        for (const entry of voteMap.entries()) {\n          res[i] = entry;\n\n          i++;\n        }\n        setVoterData(res);\n      }\n    };\n\n    const cb2 = async () => {\n      setLookupTable(await GetLookUpTable());\n    };\n\n    cb();\n    cb2();\n  }, []);\n\n  return (\n    <div>\n      <div> Election Page </div>\n\n      {/*Table*/}\n\n      <div> Session ID = {sessionId} </div>\n      <table className=\"table\">\n        <thead>\n          <tr>\n          \n            <th>Token</th>\n        \n            <th>Vote Data</th>\n            <th>Signature Valid</th>\n            <th>ZKP Valid</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {voterData?.map(([y0, votes], voterNumber) =>\n            votes.map((vote, index) => {\n              const token = JSON.parse(vote.token);\n              console.log(\"token--\", token);\n              return (\n                <tr key={vote.vote.toString()}>\n             \n                \n                  <td>\n                    <div>\n                      {token.map(\n                        (item: {\n                          vid: string;\n                          counter: string;\n                          partyId: string;\n                        }) => {\n                          return (\n                            <>\n                              <div>Vid::{item.vid}</div>\n                           \n                              <div>Counter:: {item.counter} </div>\n                          \n                              <div> Party:{item.partyId} </div>{\" \"}\n                              <br></br>\n                            </>\n                          );\n                        }\n                      )}\n                    </div>\n                  </td>\n                  <td> {vote.vote.toString(16)} </td>\n                  <td> {vote.signature.toString()} </td>\n                  <td> {vote.zkp.toString()} </td>\n                </tr>\n              \n              );\n            })\n          )}\n        </tbody>\n      </table>\n\n      {lookupTable && (\n        <>\n          <div>LookUpTable</div>\n          <table>\n            <thead>\n              <tr>\n                <th>Point</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {lookupTable.map((row) => (\n                <tr>\n                  <td>{row.point}</td>\n                  <td>{row.value}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </>\n      )}\n    </div>\n  );\n}\n","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/keygen/index.tsx",["112","113"],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/connections/session.ts",["114"],"import axios from \"axios\";\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concatMap,\n  filter,\n  first,\n  from,\n  map,\n  pairwise,\n  ReplaySubject,\n  scan,\n  shareReplay,\n  startWith,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from \"rxjs\";\nimport { BACKEND_URL } from \"./api\";\nimport {\n  GeneratedKeys,\n  startGeneration,\n  decrypt,\n  verifyMembershipZkp,\n  combineCiphertext,\n} from \"pallier\";\nimport { createParty, Party } from \"./party\";\nimport { createSignaller, Signaller } from \"./signalling\";\nimport { Signature, verifySignature } from \"lrs\";\nimport BigInteger from \"big-integer\";\nimport VrfGenerator from \"../Vrf/vrf\";\n\nconst keyLength = 80n;\nconst threshold = 2;\n\nexport abstract class Session {\n  private _ready = new BehaviorSubject(false);\n  private _generationInProgress = false;\n  private _vrf: any;\n\n  get userId$() {\n    return this.signaller.userId$;\n  }\n\n  get isReady() {\n    return this._ready.getValue();\n  }\n\n  get vrf() {\n    return this._vrf;\n  }\n\n  get generationInProgress() {\n    return this._generationInProgress;\n  }\n\n  constructor(\n    private signaller: Signaller,\n    protected readonly sessionId: string\n  ) {\n    this._vrf = VrfGenerator();\n  }\n\n  readonly partiesChange$ = this.signaller.parties$.pipe(\n    startWith({ parties: [] }),\n    pairwise(),\n    switchMap(([{ parties: currentParties }, { parties: serverParties }]) => {\n      const removed = currentParties\n        .filter((p) => {\n          return !serverParties.some((sP) => sP.id === p.id);\n        })\n        .map((party) => ({ act: \"rem\", party } as const));\n\n      const added = serverParties\n        .filter(\n          (sParty) => !currentParties.some((cParty) => cParty.id === sParty.id)\n        )\n        .map((party) => ({ act: \"add\", party } as const));\n\n      return from([...removed, ...added]);\n    })\n  );\n\n  readonly parties$ = this.partiesChange$.pipe(\n    withLatestFrom(this.signaller.userId$),\n    filter(([{ party }, userId]) => party.id !== userId),\n    concatMap(async ([party, userId]) => {\n      if (party.act === \"add\") {\n        const n = await createParty(userId, party.party.id, this.signaller);\n        return {\n          party: n,\n          act: party.act,\n        } as const;\n      } else {\n        return {\n          partyId: party.party.id,\n          act: party.act,\n        } as const;\n      }\n    }),\n    scan((parties, nParty) => {\n      if (nParty.act === \"add\") {\n        nParty.party.sendReady(this._ready.getValue());\n        return [...parties, nParty.party];\n      } else {\n        return parties.filter((p) => {\n          const toRemove = p.partyId !== nParty.partyId;\n          if (!toRemove) {\n            p.cleanup();\n          }\n          return toRemove;\n        });\n      }\n    }, [] as Party[]),\n    shareReplay({\n      bufferSize: 1,\n      refCount: false,\n    })\n  );\n\n  readonly allReady$ = this.parties$\n    .pipe(\n      switchMap((parties) =>\n        combineLatest([\n          combineLatest(\n            parties.map((p) =>\n              p.ready$.pipe(map((ready) => ({ ready, party: p })))\n            )\n          ),\n          this.signaller.userId$,\n          this._ready,\n        ])\n      ),\n      map(([states, userId]) => {\n        if (this.isReady && states.every((s) => s.ready)) {\n          if (!this.generationInProgress) {\n            this.performAction(\n              userId,\n              states.map((p) => p.party)\n            );\n            this._generationInProgress = true;\n            console.log(\"starting generation\");\n          }\n          return true;\n        }\n        return false;\n      }),\n      filter((val) => val),\n      first()\n    )\n    .subscribe();\n\n  ready(ready: boolean) {\n    this._ready.next(ready);\n    this.parties$\n      .pipe(first())\n      .subscribe((parties) => parties.forEach((p) => p.sendReady(ready, this.vrf)));\n  }\n\n  protected abstract performAction(userId: string, parties: Party[]): any;\n\n  cleanup() { \n    this.signaller.cleanup();\n    this.parties$.pipe(first()).subscribe((ps) => {\n      ps.forEach((p) => p.cleanup());\n    });\n  }\n}\n\nexport class EncryptSession extends Session {\n  readonly generatedKeys$ = new ReplaySubject<GeneratedKeys>();\n\n  async performAction(userId: string, parties: Party[]) {\n    startGeneration(userId, parties, keyLength, threshold).then((data) => {\n      this.generatedKeys$.next(data);\n      this.saveKeys(data, userId);\n      window.localStorage.setItem(\n        `parties:${this.sessionId}`,\n        JSON.stringify(data.allParties)\n      );\n      console.log(\"finished generation\" + data.allParties);\n      if (data.isFirstParty) {\n        return axios.put(BACKEND_URL + \"/SessionData\", {\n          sessionId: this.sessionId,\n          N: data.public.N.toString(16),\n        });\n      }\n    });\n  }\n\n  // Save to local storage\n  private saveKeys(data: GeneratedKeys, userId: string) {\n    window.localStorage.setItem(\n      `keys:${this.sessionId}`,\n      JSON.stringify({\n        theta: data.public.theta.toString(),\n        delta: data.public.delta.toString(),\n        vk: data.public.vk.toString(),\n        f: data.private.f.toString(),\n        vki: data.private.vki.toString(),\n        userId,\n      })\n    );\n  }\n}\n\nexport interface Tally {\n  name: string;\n  message: bigint;\n  votes: number;\n}\nexport class DecryptSession extends Session {\n  readonly tally$ = new ReplaySubject<Tally[]>(1);\n  readonly voteData$ = new ReplaySubject<\n    {\n      vote: bigint;\n      y0: bigint;\n      groupId: string;\n      zkp: boolean;\n      signature: boolean;\n      token: string;\n    }[]\n  >(1);\n\n  constructor(\n    signaller: Signaller,\n    sessionId: string,\n    private readonly delta: bigint,\n    private readonly theta: bigint,\n    private readonly vk: bigint,\n    private readonly fi: bigint,\n    private readonly vki: bigint\n  ) {\n    super(signaller, sessionId);\n  }\n\n  async performAction(userId: string, parties: Party[]) {\n    const { voteVerification, candidates, pubKey } = await getAndVerifyVotes(\n      this.sessionId\n    );\n\n    this.voteData$.next(voteVerification);\n\n    const combinedVotes = voteVerification\n      .filter((vote) => vote.signature && vote.zkp)\n      .reduce((existing, vote) => combineCiphertext(existing, vote.vote), 1n);\n\n    const partyNumbers = this.readPartyNumbers();\n\n    const tally = await decrypt(\n      combinedVotes,\n      userId,\n      parties,\n      partyNumbers,\n      BigInt(\"0x\" + pubKey),\n      this.delta,\n      this.theta,\n      this.vk,\n      this.fi,\n      this.vki,\n      candidates.map((c) => c.message),\n      keyLength,\n      threshold\n    );\n\n    console.log({ tally });\n\n    this.tally$.next(\n      tally.map((t) => ({\n        message: t.candidate,\n        votes: Number.parseInt(t.votes.toString()),\n        name: candidates.find((c) => c.message === t.candidate)?.title,\n      }))\n    );\n  }\n\n  private readPartyNumbers() {\n    const d = window.localStorage.getItem(`parties:${this.sessionId}`);\n    if (!d) {\n      throw new Error(\"Party numbers not present in local storage!\");\n    }\n    return JSON.parse(d) as { id: string; number: number }[];\n  }\n}\n\n// Read from local storage and return the keys\nexport function readKeys(sessionId: string) {\n  const s = window.localStorage.getItem(`keys:${sessionId}`);\n  if (s) {\n    const obj = JSON.parse(s);\n\n    return {\n      theta: BigInt(obj.theta),\n      delta: BigInt(obj.delta),\n      vk: BigInt(obj.vk),\n      fi: BigInt(obj.f),\n      vki: BigInt(obj.vki),\n      userId: obj.userId as string,\n    };\n  }\n  return null;\n}\n\n// Create a new session\nexport async function joinEncryptSession(sessionId: string) {\n  const signaller = await createSignaller(sessionId + \"/encrypt\");\n  return new EncryptSession(signaller, sessionId);\n}\n\nexport async function joinDecryptSession(\n  sessionId: string,\n  userId: string,\n  delta: bigint,\n  theta: bigint,\n  vk: bigint,\n  fi: bigint,\n  vki: bigint\n) {\n  const signaller = await createSignaller(sessionId + \"/decrypt\", userId);\n  return new DecryptSession(signaller, sessionId, delta, theta, vk, fi, vki);\n}\n\nexport async function getAndVerifyVotes(sessionId: string, flag = 0) {\n  const { data } = await axios.get<any[]>(BACKEND_URL + \"/Vote/\" + sessionId);\n  const conv = (arr: string[]) =>\n    arr.map(\n      (v) =>\n        (v.startsWith(\"-\") ? BigInt(-1) : BigInt(1)) *\n        BigInt(\"0x\" + v.replace(\"-\", \"\"))\n    );\n\n  // Filtered + Shuffled votes:\n  let votesToInclude: Set<string>;\n  if (!flag) {\n    const { data: filteredData } = await axios.get<{ vote: string }[]>(\n      BACKEND_URL + \"/Vote/FilterOne\"\n    );\n    // // //create a set to speed lookup\n    votesToInclude = new Set(filteredData.map((vote) => vote.vote.slice(2)));\n\n    console.log(\"votesToInclude\", votesToInclude);\n    console.log(\"dataFilter\", filteredData);\n    console.log(\"dataoldd\", data);\n  }\n  //  VotesToInclude must have hex representation of the vote\n  let votes;\n  if (!flag) {\n    votes = data\n      .filter((v) => votesToInclude.has(v.vote))\n      .map((v) => ({\n        vote: BigInt(\"0x\" + v.vote),\n        groupId: v.groupId,\n        y0: BigInt(\"0x\" + v.y0),\n        s: BigInt(\"0x\" + v.s),\n        c: (v.c as string[]).map((c: string) => BigInt(\"0x\" + c)),\n        proof: (v.proof as string[][]).map((pArr) => conv(pArr)),\n        //  counter: v.counter,\n        //  voterID: v.vid,\n        token: v.token,\n      }));\n  } else {\n    votes = data.map((v) => ({\n      vote: BigInt(\"0x\" + v.vote),\n      groupId: v.groupId,\n      y0: BigInt(\"0x\" + v.y0),\n      s: BigInt(\"0x\" + v.s),\n      c: (v.c as string[]).map((c: string) => BigInt(\"0x\" + c)),\n      proof: (v.proof as string[][]).map((pArr) => conv(pArr)),\n      //  counter: v.counter,\n      //  voterID: v.vid,\n      token: v.token,\n    }));\n  }\n  console.log(\"votes\", { votes });\n\n  const {\n    data: { candidates: cand, pubKey },\n  } = await axios.get(BACKEND_URL + \"/SessionData/\" + sessionId);\n\n  const candidates = (cand as []).map((c: any) => ({\n    title: c.title,\n    message: BigInt(\"0x\" + c.message),\n  }));\n\n  const { data: groupData } = await axios.get<{ [id: string]: string[] }>(\n    BACKEND_URL + \"/Vote/Voter\"\n  );\n\n  const groups = Object.entries(groupData)\n    .map(\n      ([id, pubKeys]) => [id, pubKeys.map((key) => BigInt(\"0x\" + key))] as const\n    )\n    .reduce((acc, [id, data]) => {\n      acc[id] = data;\n      return acc;\n    }, {} as { [id: string]: bigint[] });\n\n  const voteVerification = votes.map((vote) => {\n    //verify signature\n    const group = groups[vote.groupId];\n\n    const sign = new Signature({\n      value0: BigInteger(vote.y0),\n      value1: BigInteger(vote.s),\n      value2: vote.c.map((n: any) => BigInteger(n)),\n    });\n\n    const sigVerified = verifySignature(\n      vote.vote,\n      sign,\n      group.map((k) => BigInteger(k))\n    );\n\n    //verify zkp\n    const valid = verifyMembershipZkp(\n      vote.vote,\n      vote.proof as [bigint[], bigint[], bigint[]],\n      candidates.map((c) => c.message),\n      BigInt(\"0x\" + pubKey)\n    );\n\n    return {\n      vote: vote.vote,\n      groupId: vote.groupId,\n      y0: vote.y0,\n      zkp: valid,\n      signature: sigVerified,\n      token: vote.token,\n    };\n  });\n\n  return { voteVerification, candidates, pubKey };\n}\n\nexport async function GetLookUpTable() {\n  const { data } = await axios.get<{ value: string; point: string }[]>(\n    BACKEND_URL + \"/Lookup\"\n  );\n  return data;\n}\n","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/connections/api.ts",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/hooks/useSession.ts",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/components/groups.tsx",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/components/parties.tsx",["115","116","117","118","119","120","121"],"import { useEffect, useState } from \"react\";\n\nimport { GenerateRandom, GenPublicKey } from \"elgammal\";\nimport axios from \"axios\";\nimport { BACKEND_URL } from \"../connections/api\";\nimport { useParams } from \"react-router-dom\";\n\nexport interface PartiesProps {\n  parties: { partyId: string; ready: boolean }[];\n  userId: string;\n}\n\nexport function Parties({ parties, userId }: PartiesProps) {\n  // const { sessionId } = useParams();\n\n  // const [TallyKeyPub, SetTallyKeyPub] = useState(null as null | string);\n  // const [TallyKeyPriv, SetTallyKeyPriv] = useState(null as null | string);\n\n  // useEffect(() => {\n  //   const cb = async () => {\n  //     try {\n  //       if (!TallyKeyPub && !TallyKeyPriv) {\n  //         //console.log(\"creating TallyKey\");\n  //         const TallyKey = await createTallyKey();\n  //         SetTallyKeyPub(TallyKey[\"publicKey\"]);\n  //         SetTallyKeyPriv(TallyKey[\"privateKey\"]);\n  //         await axios.post(BACKEND_URL + \"/Submitkey\", {\n  //           userId,\n  //           pubKey: TallyKey[\"publicKey\"],\n  //           sessionId: sessionId,\n  //         });\n  //       }\n  //     } catch (e) {\n  //       console.error(e);\n  //     }\n  //   };\n  //   cb();\n  // }, []);\n\n  return (\n    <div>\n      <h3 className=\"text-xl font-medium\">Parties: </h3>\n      {userId ? <div>My Id: {userId}</div> : <></>}\n    \n      <div className=\"flex space-x-2\">\n        {parties.map((party) => (\n          <div\n            className=\"border border-gray-400 rounded-md py-2 px-2\"\n            key={party.partyId}\n          >\n            <div>\n              <span className=\"font-bold text-sm\">ID: </span>\n              <span className=\"text-sm\">{party.partyId}</span>\n            </div>\n            <div>{party.ready ? \"Ready\" : \"Not Ready \"}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n// function createTallyKey() {\n//   const priv_key = GenerateRandom();\n//   const pubkey = GenPublicKey(priv_key);\n//   return {\n//     publicKey: pubkey.compressed.toString(16),\n//     privateKey: priv_key.toString(16),\n//   };\n// }\n","/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/connections/signalling.ts",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/connections/party.ts",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/util/queue.ts",[],"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/Vrf/vrf.js",["122","123","124","125","126","127","128","129","130","131","132","133","134","135","136"],{"ruleId":"137","severity":1,"message":"138","line":12,"column":3,"nodeType":"139","messageId":"140","endLine":12,"endColumn":17},{"ruleId":"137","severity":1,"message":"141","line":13,"column":3,"nodeType":"139","messageId":"140","endLine":13,"endColumn":15},{"ruleId":"137","severity":1,"message":"142","line":14,"column":3,"nodeType":"139","messageId":"140","endLine":14,"endColumn":12},{"ruleId":"137","severity":1,"message":"143","line":15,"column":3,"nodeType":"139","messageId":"140","endLine":15,"endColumn":18},{"ruleId":"137","severity":1,"message":"144","line":16,"column":3,"nodeType":"139","messageId":"140","endLine":16,"endColumn":8},{"ruleId":"145","severity":1,"message":"146","line":42,"column":15,"nodeType":"147","messageId":"148","endLine":42,"endColumn":17},{"ruleId":"149","severity":1,"message":"150","line":122,"column":33,"nodeType":"151","messageId":"152","endLine":122,"endColumn":56},{"ruleId":"145","severity":1,"message":"146","line":151,"column":23,"nodeType":"147","messageId":"148","endLine":151,"endColumn":25},{"ruleId":"145","severity":1,"message":"146","line":151,"column":47,"nodeType":"147","messageId":"148","endLine":151,"endColumn":49},{"ruleId":"145","severity":1,"message":"146","line":165,"column":57,"nodeType":"147","messageId":"148","endLine":165,"endColumn":59},{"ruleId":"153","severity":1,"message":"154","line":187,"column":6,"nodeType":"155","endLine":187,"endColumn":58,"suggestions":"156"},{"ruleId":"145","severity":1,"message":"146","line":259,"column":41,"nodeType":"147","messageId":"148","endLine":259,"endColumn":43},{"ruleId":"137","severity":1,"message":"157","line":28,"column":10,"nodeType":"139","messageId":"140","endLine":28,"endColumn":11},{"ruleId":"158","severity":1,"message":"159","line":251,"column":44,"nodeType":"160","messageId":"161","endLine":251,"endColumn":45},{"ruleId":"145","severity":1,"message":"146","line":91,"column":22,"nodeType":"147","messageId":"148","endLine":91,"endColumn":24},{"ruleId":"145","severity":1,"message":"146","line":125,"column":22,"nodeType":"147","messageId":"148","endLine":125,"endColumn":24},{"ruleId":"162","severity":1,"message":"163","line":176,"column":7,"nodeType":"164","messageId":"165","endLine":183,"endColumn":8},{"ruleId":"153","severity":1,"message":"166","line":186,"column":6,"nodeType":"155","endLine":186,"endColumn":12,"suggestions":"167"},{"ruleId":"137","severity":1,"message":"168","line":193,"column":11,"nodeType":"139","messageId":"140","endLine":193,"endColumn":24},{"ruleId":"137","severity":1,"message":"169","line":194,"column":11,"nodeType":"139","messageId":"140","endLine":194,"endColumn":18},{"ruleId":"145","severity":1,"message":"146","line":306,"column":26,"nodeType":"147","messageId":"148","endLine":306,"endColumn":28},{"ruleId":"153","severity":1,"message":"170","line":367,"column":6,"nodeType":"155","endLine":367,"endColumn":16,"suggestions":"171"},{"ruleId":"153","severity":1,"message":"172","line":383,"column":6,"nodeType":"155","endLine":383,"endColumn":14,"suggestions":"173"},{"ruleId":"137","severity":1,"message":"174","line":24,"column":10,"nodeType":"139","messageId":"140","endLine":24,"endColumn":19},{"ruleId":"137","severity":1,"message":"175","line":24,"column":21,"nodeType":"139","messageId":"140","endLine":24,"endColumn":33},{"ruleId":"137","severity":1,"message":"174","line":29,"column":11,"nodeType":"139","messageId":"140","endLine":29,"endColumn":20},{"ruleId":"153","severity":1,"message":"176","line":103,"column":6,"nodeType":"155","endLine":103,"endColumn":8,"suggestions":"177"},{"ruleId":"149","severity":1,"message":"150","line":50,"column":33,"nodeType":"151","messageId":"152","endLine":50,"endColumn":56},{"ruleId":"153","severity":1,"message":"178","line":68,"column":6,"nodeType":"155","endLine":68,"endColumn":12,"suggestions":"179"},{"ruleId":"137","severity":1,"message":"180","line":16,"column":3,"nodeType":"139","messageId":"140","endLine":16,"endColumn":6},{"ruleId":"137","severity":1,"message":"181","line":1,"column":10,"nodeType":"139","messageId":"140","endLine":1,"endColumn":19},{"ruleId":"137","severity":1,"message":"182","line":1,"column":21,"nodeType":"139","messageId":"140","endLine":1,"endColumn":29},{"ruleId":"137","severity":1,"message":"138","line":3,"column":10,"nodeType":"139","messageId":"140","endLine":3,"endColumn":24},{"ruleId":"137","severity":1,"message":"141","line":3,"column":26,"nodeType":"139","messageId":"140","endLine":3,"endColumn":38},{"ruleId":"137","severity":1,"message":"183","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":13},{"ruleId":"137","severity":1,"message":"184","line":5,"column":10,"nodeType":"139","messageId":"140","endLine":5,"endColumn":21},{"ruleId":"137","severity":1,"message":"185","line":6,"column":10,"nodeType":"139","messageId":"140","endLine":6,"endColumn":19},{"ruleId":"145","severity":1,"message":"146","line":43,"column":11,"nodeType":"147","messageId":"148","endLine":43,"endColumn":13},{"ruleId":"145","severity":1,"message":"146","line":49,"column":18,"nodeType":"147","messageId":"148","endLine":49,"endColumn":20},{"ruleId":"145","severity":1,"message":"146","line":88,"column":11,"nodeType":"147","messageId":"148","endLine":88,"endColumn":13},{"ruleId":"145","severity":1,"message":"146","line":122,"column":11,"nodeType":"147","messageId":"148","endLine":122,"endColumn":13},{"ruleId":"145","severity":1,"message":"146","line":137,"column":11,"nodeType":"147","messageId":"148","endLine":137,"endColumn":13},{"ruleId":"145","severity":1,"message":"146","line":155,"column":11,"nodeType":"147","messageId":"148","endLine":155,"endColumn":13},{"ruleId":"145","severity":1,"message":"146","line":194,"column":14,"nodeType":"147","messageId":"148","endLine":194,"endColumn":16},{"ruleId":"145","severity":1,"message":"186","line":314,"column":26,"nodeType":"147","messageId":"148","endLine":314,"endColumn":28},{"ruleId":"145","severity":1,"message":"146","line":330,"column":15,"nodeType":"147","messageId":"148","endLine":330,"endColumn":17},{"ruleId":"145","severity":1,"message":"146","line":349,"column":11,"nodeType":"147","messageId":"148","endLine":349,"endColumn":13},{"ruleId":"145","severity":1,"message":"146","line":364,"column":11,"nodeType":"147","messageId":"148","endLine":364,"endColumn":13},{"ruleId":"187","severity":1,"message":"188","line":388,"column":11,"nodeType":"139","messageId":"140","endLine":388,"endColumn":22},{"ruleId":"187","severity":1,"message":"189","line":391,"column":11,"nodeType":"139","messageId":"140","endLine":391,"endColumn":17},{"ruleId":"145","severity":1,"message":"186","line":453,"column":20,"nodeType":"147","messageId":"148","endLine":453,"endColumn":22},{"ruleId":"145","severity":1,"message":"186","line":495,"column":24,"nodeType":"147","messageId":"148","endLine":495,"endColumn":26},"@typescript-eslint/no-unused-vars","'GenerateRandom' is defined but never used.","Identifier","unusedVar","'GenPublicKey' is defined but never used.","'signature' is defined but never used.","'ElgammalEncrypt' is defined but never used.","'CURVE' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'BigInt'.","ArrowFunctionExpression","unsafeRefs","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'getValues', 'groups', and 'voterData'. Either include them or remove the dependency array.","ArrayExpression",["190"],"'_' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has missing dependencies: 'myVrf', 'parties', and 'userId'. Either include them or remove the dependency array.",["191"],"'pubKeytoPoint' is assigned a value but never used.","'privKey' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'FetchlimitsandGenerateCounters', 'HashedIds', 'Party_counterlimit', 'Party_vid', 'keys', 'userId', and 'waitAndEncrypt'. Either include them or remove the dependency array.",["192"],"React Hook useEffect has missing dependencies: 'TallyKeyPriv', 'TallyKeyPub', and 'createTallyKey'. Either include them or remove the dependency array.",["193"],"'allTokens' is assigned a value but never used.","'setAllTokens' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sessionId'. Either include it or remove the dependency array.",["194"],"React Hook useCallback has a missing dependency: 'HashedID'. Either include it or remove the dependency array.",["195"],"'tap' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'axios' is defined but never used.","'BACKEND_URL' is defined but never used.","'useParams' is defined but never used.","Expected '!==' and instead saw '!='.","no-unused-vars","'vComponents' is assigned a value but never used.","'hPoint' is assigned a value but never used.",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [getValues, selected, groups, pub, voterData, candidates, sessionId, currentToken]",{"range":"208","text":"209"},"Update the dependencies array to be: [keys, myVrf, parties, userId]",{"range":"210","text":"211"},"Update the dependencies array to be: [FetchlimitsandGenerateCounters, HashedIds, Party_counterlimit, Party_vid, complete, keys, userId, waitAndEncrypt]",{"range":"212","text":"213"},"Update the dependencies array to be: [TallyKeyPriv, TallyKeyPub, createTallyKey, userId]",{"range":"214","text":"215"},"Update the dependencies array to be: [sessionId]",{"range":"216","text":"217"},"Update the dependencies array to be: [HashedID, pair]",{"range":"218","text":"219"},[4827,4879],"[getValues, selected, groups, pub, voterData, candidates, sessionId, currentToken]",[5030,5036],"[keys, myVrf, parties, userId]",[10355,10365],"[FetchlimitsandGenerateCounters, HashedIds, Party_counterlimit, Party_vid, complete, keys, userId, waitAndEncrypt]",[10730,10738],"[TallyKeyPriv, TallyKeyPub, createTallyKey, userId]",[2472,2474],"[sessionId]",[1827,1833],"[HashedID, pair]"]