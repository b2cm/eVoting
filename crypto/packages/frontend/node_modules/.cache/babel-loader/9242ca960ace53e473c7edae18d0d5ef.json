{"ast":null,"code":"import { lib, enc, SHA512, algo } from \"crypto-js\";\nexport function sha512(bits) {\n  let arr;\n  if (typeof bits == \"string\") {\n    arr = enc.Hex.parse(bits);\n  } else {\n    arr = lib.WordArray.create(bits);\n  }\n  return SHA512(arr).toString();\n}\nexport function hmacSha512(key) {\n  return function (bits) {\n    return algo.HMAC.create(algo.SHA512, key).update(bits).finalize().toString();\n  };\n}","map":{"version":3,"names":["lib","enc","SHA512","algo","sha512","bits","arr","Hex","parse","WordArray","create","toString","hmacSha512","key","HMAC","update","finalize"],"sources":["/Users/kemlohalex/Documents/evoting/crypto/packages/lrs/build/esm/lib/Crypto.Sha512/foreign.js"],"sourcesContent":["import { lib, enc, SHA512, algo } from \"crypto-js\";\nexport function sha512(bits) {\n    let arr;\n    if (typeof bits == \"string\") {\n        arr = enc.Hex.parse(bits);\n    }\n    else {\n        arr = lib.WordArray.create(bits);\n    }\n    return SHA512(arr).toString();\n}\nexport function hmacSha512(key) {\n    return function (bits) {\n        return algo.HMAC.create(algo.SHA512, key)\n            .update(bits)\n            .finalize()\n            .toString();\n    };\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,GAAG,EAAEC,MAAM,EAAEC,IAAI,QAAQ,WAAW;AAClD,OAAO,SAASC,MAAMA,CAACC,IAAI,EAAE;EACzB,IAAIC,GAAG;EACP,IAAI,OAAOD,IAAI,IAAI,QAAQ,EAAE;IACzBC,GAAG,GAAGL,GAAG,CAACM,GAAG,CAACC,KAAK,CAACH,IAAI,CAAC;EAC7B,CAAC,MACI;IACDC,GAAG,GAAGN,GAAG,CAACS,SAAS,CAACC,MAAM,CAACL,IAAI,CAAC;EACpC;EACA,OAAOH,MAAM,CAACI,GAAG,CAAC,CAACK,QAAQ,CAAC,CAAC;AACjC;AACA,OAAO,SAASC,UAAUA,CAACC,GAAG,EAAE;EAC5B,OAAO,UAAUR,IAAI,EAAE;IACnB,OAAOF,IAAI,CAACW,IAAI,CAACJ,MAAM,CAACP,IAAI,CAACD,MAAM,EAAEW,GAAG,CAAC,CACpCE,MAAM,CAACV,IAAI,CAAC,CACZW,QAAQ,CAAC,CAAC,CACVL,QAAQ,CAAC,CAAC;EACnB,CAAC;AACL"},"metadata":{},"sourceType":"module"}