{"ast":null,"code":"// Generated by psc version 0.9.3\n\"use strict\";\n\nvar Control_Monad_Eff = require(\"../Control.Monad.Eff\");\nvar Crypto_LRS = require(\"../Crypto.LRS\");\nvar Data_Array = require(\"../Data.Array\");\nvar Data_BigInt = require(\"../Data.BigInt\");\nvar Data_BigInt_Random = require(\"../Data.BigInt.Random\");\nvar Data_LGroup = require(\"../Data.LGroup\");\nvar Data_Modular = require(\"../Data.Modular\");\nvar Data_Unfoldable = require(\"../Data.Unfoldable\");\nvar Prelude = require(\"../Prelude\");\nvar Control_Bind = require(\"../Control.Bind\");\nvar Control_Applicative = require(\"../Control.Applicative\");\nvar Data_Functor = require(\"../Data.Functor\");\nvar Data_Traversable = require(\"../Data.Traversable\");\nvar link = Crypto_LRS.pureLink;\nvar defaultLGroup = Data_LGroup.lgMedium;\nvar gen = function __do() {\n  var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (v1) {\n    return Data_Modular.mMod(v1)(defaultLGroup.value1);\n  })(Data_BigInt_Random.random(256))();\n  return new Crypto_LRS.Party(Crypto_LRS.makePublicKey(defaultLGroup)(v1), v1);\n};\nvar sign = function (ring) {\n  return function (party) {\n    return function (message) {\n      return function __do() {\n        var v = Data_Unfoldable.replicateA(Control_Monad_Eff.applicativeEff)(Data_Unfoldable.unfoldableArray)(Data_Traversable.traversableArray)(Data_Array.length(ring))(Data_BigInt_Random.random(256))();\n        return Crypto_LRS.pureSign(v)(defaultLGroup)(ring)(party)(message);\n      };\n    };\n  };\n};\nvar genPublicKey = function (privKey) {\n  return Crypto_LRS.makePublicKey(defaultLGroup)(privKey);\n};\nvar verify = Crypto_LRS.pureVerify(defaultLGroup);\nmodule.exports = {\n  gen: gen,\n  link: link,\n  sign: sign,\n  verify: verify,\n  genPublicKey\n};","map":{"version":3,"names":["Control_Monad_Eff","require","Crypto_LRS","Data_Array","Data_BigInt","Data_BigInt_Random","Data_LGroup","Data_Modular","Data_Unfoldable","Prelude","Control_Bind","Control_Applicative","Data_Functor","Data_Traversable","link","pureLink","defaultLGroup","lgMedium","gen","__do","v1","map","functorEff","mMod","value1","random","Party","makePublicKey","sign","ring","party","message","v","replicateA","applicativeEff","unfoldableArray","traversableArray","length","pureSign","genPublicKey","privKey","verify","pureVerify","module","exports"],"sources":["/Users/kemlohalex/Documents/evoting/crypto/packages/lrs/build/esm/lib/Crypto.LRS.SimpleAPI/index.js"],"sourcesContent":["// Generated by psc version 0.9.3\n\"use strict\";\nvar Control_Monad_Eff = require(\"../Control.Monad.Eff\");\nvar Crypto_LRS = require(\"../Crypto.LRS\");\nvar Data_Array = require(\"../Data.Array\");\nvar Data_BigInt = require(\"../Data.BigInt\");\nvar Data_BigInt_Random = require(\"../Data.BigInt.Random\");\nvar Data_LGroup = require(\"../Data.LGroup\");\nvar Data_Modular = require(\"../Data.Modular\");\nvar Data_Unfoldable = require(\"../Data.Unfoldable\");\nvar Prelude = require(\"../Prelude\");\nvar Control_Bind = require(\"../Control.Bind\");\nvar Control_Applicative = require(\"../Control.Applicative\");\nvar Data_Functor = require(\"../Data.Functor\");\nvar Data_Traversable = require(\"../Data.Traversable\");\nvar link = Crypto_LRS.pureLink;\nvar defaultLGroup = Data_LGroup.lgMedium;\nvar gen = function __do() {\n    var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (v1) {\n        return Data_Modular.mMod(v1)(defaultLGroup.value1);\n    })(Data_BigInt_Random.random(256))();\n    return new Crypto_LRS.Party(Crypto_LRS.makePublicKey(defaultLGroup)(v1), v1);\n};\nvar sign = function (ring) {\n    return function (party) {\n        return function (message) {\n            return function __do() {\n                var v = Data_Unfoldable.replicateA(Control_Monad_Eff.applicativeEff)(Data_Unfoldable.unfoldableArray)(Data_Traversable.traversableArray)(Data_Array.length(ring))(Data_BigInt_Random.random(256))();\n                return Crypto_LRS.pureSign(v)(defaultLGroup)(ring)(party)(message);\n            };\n        };\n    };\n};\nvar genPublicKey = function (privKey) {\n    return Crypto_LRS.makePublicKey(defaultLGroup)(privKey);\n};\nvar verify = Crypto_LRS.pureVerify(defaultLGroup);\nmodule.exports = {\n    gen: gen,\n    link: link,\n    sign: sign,\n    verify: verify,\n    genPublicKey\n};\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AACvD,IAAIC,UAAU,GAAGD,OAAO,CAAC,eAAe,CAAC;AACzC,IAAIE,UAAU,GAAGF,OAAO,CAAC,eAAe,CAAC;AACzC,IAAIG,WAAW,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAC3C,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,uBAAuB,CAAC;AACzD,IAAIK,WAAW,GAAGL,OAAO,CAAC,gBAAgB,CAAC;AAC3C,IAAIM,YAAY,GAAGN,OAAO,CAAC,iBAAiB,CAAC;AAC7C,IAAIO,eAAe,GAAGP,OAAO,CAAC,oBAAoB,CAAC;AACnD,IAAIQ,OAAO,GAAGR,OAAO,CAAC,YAAY,CAAC;AACnC,IAAIS,YAAY,GAAGT,OAAO,CAAC,iBAAiB,CAAC;AAC7C,IAAIU,mBAAmB,GAAGV,OAAO,CAAC,wBAAwB,CAAC;AAC3D,IAAIW,YAAY,GAAGX,OAAO,CAAC,iBAAiB,CAAC;AAC7C,IAAIY,gBAAgB,GAAGZ,OAAO,CAAC,qBAAqB,CAAC;AACrD,IAAIa,IAAI,GAAGZ,UAAU,CAACa,QAAQ;AAC9B,IAAIC,aAAa,GAAGV,WAAW,CAACW,QAAQ;AACxC,IAAIC,GAAG,GAAG,SAASC,IAAIA,CAAA,EAAG;EACtB,IAAIC,EAAE,GAAGR,YAAY,CAACS,GAAG,CAACrB,iBAAiB,CAACsB,UAAU,CAAC,CAAC,UAAUF,EAAE,EAAE;IAClE,OAAOb,YAAY,CAACgB,IAAI,CAACH,EAAE,CAAC,CAACJ,aAAa,CAACQ,MAAM,CAAC;EACtD,CAAC,CAAC,CAACnB,kBAAkB,CAACoB,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACpC,OAAO,IAAIvB,UAAU,CAACwB,KAAK,CAACxB,UAAU,CAACyB,aAAa,CAACX,aAAa,CAAC,CAACI,EAAE,CAAC,EAAEA,EAAE,CAAC;AAChF,CAAC;AACD,IAAIQ,IAAI,GAAG,SAAAA,CAAUC,IAAI,EAAE;EACvB,OAAO,UAAUC,KAAK,EAAE;IACpB,OAAO,UAAUC,OAAO,EAAE;MACtB,OAAO,SAASZ,IAAIA,CAAA,EAAG;QACnB,IAAIa,CAAC,GAAGxB,eAAe,CAACyB,UAAU,CAACjC,iBAAiB,CAACkC,cAAc,CAAC,CAAC1B,eAAe,CAAC2B,eAAe,CAAC,CAACtB,gBAAgB,CAACuB,gBAAgB,CAAC,CAACjC,UAAU,CAACkC,MAAM,CAACR,IAAI,CAAC,CAAC,CAACxB,kBAAkB,CAACoB,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnM,OAAOvB,UAAU,CAACoC,QAAQ,CAACN,CAAC,CAAC,CAAChB,aAAa,CAAC,CAACa,IAAI,CAAC,CAACC,KAAK,CAAC,CAACC,OAAO,CAAC;MACtE,CAAC;IACL,CAAC;EACL,CAAC;AACL,CAAC;AACD,IAAIQ,YAAY,GAAG,SAAAA,CAAUC,OAAO,EAAE;EAClC,OAAOtC,UAAU,CAACyB,aAAa,CAACX,aAAa,CAAC,CAACwB,OAAO,CAAC;AAC3D,CAAC;AACD,IAAIC,MAAM,GAAGvC,UAAU,CAACwC,UAAU,CAAC1B,aAAa,CAAC;AACjD2B,MAAM,CAACC,OAAO,GAAG;EACb1B,GAAG,EAAEA,GAAG;EACRJ,IAAI,EAAEA,IAAI;EACVc,IAAI,EAAEA,IAAI;EACVa,MAAM,EAAEA,MAAM;EACdF;AACJ,CAAC"},"metadata":{},"sourceType":"script"}