{"ast":null,"code":"import { fromEvent, map, of, shareReplay } from \"rxjs\";\nimport { io } from \"socket.io-client\";\nexport class Signaller {\n  constructor(socket, sessionId, userId) {\n    this.socket = socket;\n    this.sessionId = sessionId;\n    this.userId = userId;\n    this.userId$ = of(this.userId);\n    this.recieveMessage$ = fromEvent(this.socket, \"rtcMessage\").pipe(map(_ref => {\n      let {\n        message,\n        from\n      } = _ref;\n      return {\n        message: message,\n        from: from\n      };\n    }), shareReplay({\n      refCount: true,\n      bufferSize: 30\n    }));\n    this.parties$ = fromEvent(this.socket, \"parties\").pipe(shareReplay({\n      refCount: true,\n      bufferSize: 1\n    }));\n  }\n  sendRTCMessage(partyId, message) {\n    this.socket.emit(\"sendMessage\", {\n      sessionId: this.sessionId,\n      toId: partyId,\n      message\n    });\n  }\n  cleanup() {\n    this.socket.close();\n  }\n}\nexport async function createSignaller(sessionId, userId) {\n  const socket = io(\"localhost:3100\");\n  socket.emit(\"joinSession\", {\n    sessionId,\n    userId\n  });\n  const rec_userId = await new Promise(res => {\n    socket.once(\"userId\", userId => {\n      res(userId);\n    });\n  });\n  return new Signaller(socket, sessionId, rec_userId);\n}","map":{"version":3,"names":["fromEvent","map","of","shareReplay","io","Signaller","constructor","socket","sessionId","userId","userId$","recieveMessage$","pipe","_ref","message","from","refCount","bufferSize","parties$","sendRTCMessage","partyId","emit","toId","cleanup","close","createSignaller","rec_userId","Promise","res","once"],"sources":["/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/connections/signalling.ts"],"sourcesContent":["import { fromEvent, map, of, shareReplay } from \"rxjs\";\nimport { io, Socket } from \"socket.io-client\";\n\nexport class Signaller {\n  constructor(\n    private socket: Socket,\n    private sessionId: string,\n    private userId: string\n  ) {}\n\n  readonly userId$ = of(this.userId);\n\n  readonly recieveMessage$ = fromEvent(this.socket, \"rtcMessage\").pipe(\n    map(({ message, from }) => ({\n      message: message as any,\n      from: from as string,\n    })),\n    shareReplay({\n      refCount: true,\n      bufferSize: 30,\n    })\n  );\n\n  readonly parties$ = fromEvent<{\n    parties: Array<{ id: string }>;\n  }>(this.socket, \"parties\").pipe(\n    shareReplay({\n      refCount: true,\n      bufferSize: 1,\n    })\n  );\n\n  sendRTCMessage(partyId: string, message: any) {\n    this.socket.emit(\"sendMessage\", {\n      sessionId: this.sessionId,\n      toId: partyId,\n      message,\n    });\n  }\n\n  cleanup() {\n    this.socket.close();\n  }\n}\n\nexport async function createSignaller(sessionId: string, userId?: string) {\n  const socket = io(\"localhost:3100\");\n  socket.emit(\"joinSession\", { sessionId, userId });\n\n  const rec_userId = await new Promise<string>((res) => {\n    socket.once(\"userId\", (userId) => {\n      res(userId);\n    });\n  });\n\n  return new Signaller(socket, sessionId, rec_userId);\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,GAAG,EAAEC,EAAE,EAAEC,WAAW,QAAQ,MAAM;AACtD,SAASC,EAAE,QAAgB,kBAAkB;AAE7C,OAAO,MAAMC,SAAS,CAAC;EACrBC,WAAWA,CACDC,MAAc,EACdC,SAAiB,EACjBC,MAAc,EACtB;IAAA,KAHQF,MAAc,GAAdA,MAAc;IAAA,KACdC,SAAiB,GAAjBA,SAAiB;IAAA,KACjBC,MAAc,GAAdA,MAAc;IAAA,KAGfC,OAAO,GAAGR,EAAE,CAAC,IAAI,CAACO,MAAM,CAAC;IAAA,KAEzBE,eAAe,GAAGX,SAAS,CAAC,IAAI,CAACO,MAAM,EAAE,YAAY,CAAC,CAACK,IAAI,CAClEX,GAAG,CAACY,IAAA;MAAA,IAAC;QAAEC,OAAO;QAAEC;MAAK,CAAC,GAAAF,IAAA;MAAA,OAAM;QAC1BC,OAAO,EAAEA,OAAc;QACvBC,IAAI,EAAEA;MACR,CAAC;IAAA,CAAC,CAAC,EACHZ,WAAW,CAAC;MACVa,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CACH,CAAC;IAAA,KAEQC,QAAQ,GAAGlB,SAAS,CAE1B,IAAI,CAACO,MAAM,EAAE,SAAS,CAAC,CAACK,IAAI,CAC7BT,WAAW,CAAC;MACVa,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CACH,CAAC;EAtBE;EAwBHE,cAAcA,CAACC,OAAe,EAAEN,OAAY,EAAE;IAC5C,IAAI,CAACP,MAAM,CAACc,IAAI,CAAC,aAAa,EAAE;MAC9Bb,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBc,IAAI,EAAEF,OAAO;MACbN;IACF,CAAC,CAAC;EACJ;EAEAS,OAAOA,CAAA,EAAG;IACR,IAAI,CAAChB,MAAM,CAACiB,KAAK,CAAC,CAAC;EACrB;AACF;AAEA,OAAO,eAAeC,eAAeA,CAACjB,SAAiB,EAAEC,MAAe,EAAE;EACxE,MAAMF,MAAM,GAAGH,EAAE,CAAC,gBAAgB,CAAC;EACnCG,MAAM,CAACc,IAAI,CAAC,aAAa,EAAE;IAAEb,SAAS;IAAEC;EAAO,CAAC,CAAC;EAEjD,MAAMiB,UAAU,GAAG,MAAM,IAAIC,OAAO,CAAUC,GAAG,IAAK;IACpDrB,MAAM,CAACsB,IAAI,CAAC,QAAQ,EAAGpB,MAAM,IAAK;MAChCmB,GAAG,CAACnB,MAAM,CAAC;IACb,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO,IAAIJ,SAAS,CAACE,MAAM,EAAEC,SAAS,EAAEkB,UAAU,CAAC;AACrD"},"metadata":{},"sourceType":"module"}