{"ast":null,"code":"export const BITS = 256;\nexport const BYTES = BITS / 8;\nexport const _0n = BigInt(0);\nexport const _1n = BigInt(1);\nexport const _2n = BigInt(2);\nexport const _3n = BigInt(3);\nexport const _4n = BigInt(4);\nexport const _8n = BigInt(8);\nexport const CURVE = Object.freeze({\n  // Params: a, b\n  a: _0n,\n  b: BigInt(7),\n  // Field over which we'll do calculations. Verify with:\n  //   console.log(CURVE.P === (2n**256n - 2n**32n - 977n))\n  P: BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\"),\n  // Curve order, total count of valid points in the field. Verify with:\n  //   console.log(CURVE.n === (2n**256n - 432420386565659656852420866394968145599n))\n  n: BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"),\n  // Cofactor. It's 1, so other subgroups don't exist, and default subgroup is prime-order\n  h: _1n,\n  // Base point (x, y) aka generator point\n  Gx: BigInt(\"55066263022277343669578718895168534326250603453777594175500187360389116729240\"),\n  Gy: BigInt(\"32670510020758816978083085130507043184471273380659243275938904335757337482424\")\n});\nexport const PUBKEY_COMPRESSED_LENGTH = 33;\nexport const PUBKEY_LENGTH = 65;","map":{"version":3,"sources":["../../../src/constant.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,IAAI,GAAG,GAAG;AACvB,OAAO,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC;AAE7B,OAAO,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC;AAC5B,OAAO,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC;AAC5B,OAAO,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC;AAC5B,OAAO,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC;AAC5B,OAAO,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC;AAC5B,OAAO,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC;AAC5B,OAAO,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC;EACjC;EACA,CAAC,EAAE,GAAG;EACN,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;EACZ;EACA;EACA,CAAC,EAAE,MAAM,CACP,oEAAoE,CACrE;EACD;EACA;EACA,CAAC,EAAE,MAAM,CACP,oEAAoE,CACrE;EACD;EACA,CAAC,EAAE,GAAG;EACN;EACA,EAAE,EAAE,MAAM,CACR,+EAA+E,CAChF;EACD,EAAE,EAAE,MAAM,CACR,+EAA+E;CAElF,CAAC;AAEF,OAAO,MAAM,wBAAwB,GAAG,EAAE;AAC1C,OAAO,MAAM,aAAa,GAAG,EAAE","sourceRoot":"","sourcesContent":["export const BITS = 256;\nexport const BYTES = BITS / 8;\nexport const _0n = BigInt(0);\nexport const _1n = BigInt(1);\nexport const _2n = BigInt(2);\nexport const _3n = BigInt(3);\nexport const _4n = BigInt(4);\nexport const _8n = BigInt(8);\nexport const CURVE = Object.freeze({\n    // Params: a, b\n    a: _0n,\n    b: BigInt(7),\n    // Field over which we'll do calculations. Verify with:\n    //   console.log(CURVE.P === (2n**256n - 2n**32n - 977n))\n    P: BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\"),\n    // Curve order, total count of valid points in the field. Verify with:\n    //   console.log(CURVE.n === (2n**256n - 432420386565659656852420866394968145599n))\n    n: BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"),\n    // Cofactor. It's 1, so other subgroups don't exist, and default subgroup is prime-order\n    h: _1n,\n    // Base point (x, y) aka generator point\n    Gx: BigInt(\"55066263022277343669578718895168534326250603453777594175500187360389116729240\"),\n    Gy: BigInt(\"32670510020758816978083085130507043184471273380659243275938904335757337482424\"),\n});\nexport const PUBKEY_COMPRESSED_LENGTH = 33;\nexport const PUBKEY_LENGTH = 65;\n//# sourceMappingURL=constant.js.map"]},"metadata":{},"sourceType":"module"}