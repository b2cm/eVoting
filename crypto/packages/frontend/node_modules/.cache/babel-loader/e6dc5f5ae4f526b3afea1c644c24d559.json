{"ast":null,"code":"import { __read } from \"tslib\";\nimport { BehaviorSubject } from 'rxjs';\nimport { useState, useEffect } from 'react';\nimport useConstant from 'use-constant';\nexport function useObservable(inputFactory, initialState, inputs) {\n  var _a = __read(useState(typeof initialState !== 'undefined' ? initialState : null), 2),\n    state = _a[0],\n    setState = _a[1];\n  var state$ = useConstant(function () {\n    return new BehaviorSubject(initialState);\n  });\n  var inputs$ = useConstant(function () {\n    return new BehaviorSubject(inputs);\n  });\n  useEffect(function () {\n    inputs$.next(inputs);\n  }, inputs || []);\n  useEffect(function () {\n    var output$;\n    if (inputs) {\n      output$ = inputFactory(state$, inputs$);\n    } else {\n      output$ = inputFactory(state$);\n    }\n    var subscription = output$.subscribe(function (value) {\n      state$.next(value);\n      setState(value);\n    });\n    return function () {\n      subscription.unsubscribe();\n      inputs$.complete();\n      state$.complete();\n    };\n  }, []); // immutable forever\n  return state;\n}","map":{"version":3,"sources":["../../src/use-observable.ts"],"names":[],"mappings":";AAAA,SAAqB,eAAe,QAAQ,MAAM;AAClD,SAAS,QAAQ,EAAE,SAAS,QAAQ,OAAO;AAC3C,OAAO,WAAW,MAAM,cAAc;AAiBtC,OAAM,SAAU,aAAa,CAC3B,YAAmD,EACnD,YAAoB,EACpB,MAA8B,EAAA;EAExB,IAAA,EAAA,GAAA,MAAA,CAAoB,QAAQ,CAAC,OAAO,YAAY,KAAK,WAAW,GAAG,YAAY,GAAG,IAAI,CAAC,EAAA,CAAA,CAAA;IAAtF,KAAK,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAuE;EAE7F,IAAM,MAAM,GAAG,WAAW,CAAC,YAAA;IAAM,OAAA,IAAI,eAAe,CAAoB,YAAY,CAAC;EAApD,CAAoD,CAAC;EACtF,IAAM,OAAO,GAAG,WAAW,CAAC,YAAA;IAAM,OAAA,IAAI,eAAe,CAAoC,MAAM,CAAC;EAA9D,CAA8D,CAAC;EAEjG,SAAS,CAAC,YAAA;IACR,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;EACtB,CAAC,EAAE,MAAM,IAAI,EAAE,CAAC;EAEhB,SAAS,CAAC,YAAA;IACR,IAAI,OAA+B;IACnC,IAAI,MAAM,EAAE;MACV,OAAO,GAAI,YAGY,CAAC,MAAM,EAAE,OAAO,CAA2B;KACnE,MAAM;MACL,OAAO,GAAK,YAAyF,CACnG,MAAM,CACmB;IAC5B;IACD,IAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,UAAC,KAAK,EAAA;MAC3C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;MAClB,QAAQ,CAAC,KAAK,CAAC;IACjB,CAAC,CAAC;IACF,OAAO,YAAA;MACL,YAAY,CAAC,WAAW,CAAA,CAAE;MAC1B,OAAO,CAAC,QAAQ,CAAA,CAAE;MAClB,MAAM,CAAC,QAAQ,CAAA,CAAE;IACnB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAA,CAAC;EAEP,OAAO,KAAK;AACd","sourceRoot":"","sourcesContent":["import { __read } from \"tslib\";\nimport { BehaviorSubject } from 'rxjs';\nimport { useState, useEffect } from 'react';\nimport useConstant from 'use-constant';\nexport function useObservable(inputFactory, initialState, inputs) {\n    var _a = __read(useState(typeof initialState !== 'undefined' ? initialState : null), 2), state = _a[0], setState = _a[1];\n    var state$ = useConstant(function () { return new BehaviorSubject(initialState); });\n    var inputs$ = useConstant(function () { return new BehaviorSubject(inputs); });\n    useEffect(function () {\n        inputs$.next(inputs);\n    }, inputs || []);\n    useEffect(function () {\n        var output$;\n        if (inputs) {\n            output$ = inputFactory(state$, inputs$);\n        }\n        else {\n            output$ = inputFactory(state$);\n        }\n        var subscription = output$.subscribe(function (value) {\n            state$.next(value);\n            setState(value);\n        });\n        return function () {\n            subscription.unsubscribe();\n            inputs$.complete();\n            state$.complete();\n        };\n    }, []); // immutable forever\n    return state;\n}\n//# sourceMappingURL=use-observable.js.map"]},"metadata":{},"sourceType":"module"}