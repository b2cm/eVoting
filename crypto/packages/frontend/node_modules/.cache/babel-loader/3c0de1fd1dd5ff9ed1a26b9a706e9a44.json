{"ast":null,"code":"var _jsxFileName = \"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/generate/index.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { joinEncryptSession } from \"../../connections/session\";\nimport { BACKEND_URL } from \"../../connections/api\";\nimport { useSession } from \"../../hooks/useSession\";\nimport { Parties } from \"../../components/parties\";\nimport { useObservable } from \"rxjs-hooks\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { Point, GenerateRandom, GenPublicKey, signature, ElgammalEncrypt, CURVE } from \"elgammal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GeneratePage() {\n  _s();\n  const {\n    sessionId\n  } = useParams();\n  const navigate = useNavigate();\n  const [HashedIds, setHashedIds] = useState(null);\n  const [session, setSession] = useState(null);\n  const [Party_vid, SetParty_vid] = useState(null);\n  const [Party_counterlimit, SetParty_counterlimit] = useState(null);\n  const [message, SetMessage] = useState(\"\");\n  const [complete, SetComplete] = useState(false);\n  const [myVrf, setVrf] = useState(null);\n  //If sessionId was not provided, we create a new sessionId\n  useEffect(() => {\n    if (!sessionId) {\n      createSession().then(id => navigate(\"/generate/\" + id, {\n        replace: true\n      }));\n    }\n  }, [sessionId, navigate]);\n  const [TallyKeyPub, SetTallyKeyPub] = useState(null);\n  const [TallyKeyPriv, SetTallyKeyPriv] = useState(null);\n  async function createTallyKey() {\n    const priv_key = GenerateRandom();\n    const pubkey = GenPublicKey(priv_key);\n    await axios.post(BACKEND_URL + \"/Submitkey\", {\n      userId,\n      pubKey: pubkey.compressed.toString(16),\n      sessionId: sessionId\n    });\n    SetTallyKeyPub(pubkey.compressed.toString(16));\n    SetTallyKeyPriv(priv_key.toString(16));\n  }\n  useEffect(() => {\n    const cb = async () => {\n      try {\n        if (!session && sessionId) {\n          console.log(\"creating session\");\n          const s = await joinEncryptSession(sessionId);\n          setSession(s);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    cb();\n    return () => {\n      if (session) {\n        session.cleanup();\n      }\n    };\n  }, [sessionId, session]);\n  const [userId, parties] = useSession(session);\n  const WaitForTokens = async () => {\n    return new Promise((resolve, reject) => {\n      const myInter = setInterval(async function getUserData() {\n        try {\n          const {\n            data: {\n              result\n            }\n          } = await axios.get(BACKEND_URL + \"/TokenTriggerVal\");\n          console.log(\"result\", result);\n          if (result == 1) {\n            clearInterval(myInter);\n            resolve(\"done\");\n          }\n        } catch (error) {\n          console.log(error);\n          reject(error);\n        }\n      }, 1000);\n    });\n  };\n  const fetchHashedIDs = async () => {\n    const {\n      data\n    } = await axios.get('http://bccm-s7.hs-mittweida.de:3100/getHashedIDs');\n    console.log(\"pls lev me alon \", data);\n    console.log(\"ids\", data[\"hashedIDs\"]);\n    setHashedIds(data[\"hashedIDs\"]);\n  };\n  useEffect(() => {\n    // Fetch data from an API or any other source\n    fetchHashedIDs();\n  }, []);\n  const WaitForLimit = async () => {\n    return new Promise((resolve, reject) => {\n      const myInter = setInterval(async function getUserData() {\n        try {\n          const {\n            data: {\n              result\n            }\n          } = await axios.get(BACKEND_URL + \"/TriggerVal\");\n          console.log(\"result\", result);\n          if (result == 1) {\n            clearInterval(myInter);\n            resolve(\"done\");\n          }\n          // ? else setinterval will call this again ?\n        } catch (error) {\n          console.log(error);\n          reject(error);\n        }\n      }, 1000);\n    });\n  };\n  const keys = useObservable((i, session$) => session$.pipe(switchMap(_ref => {\n    let [s] = _ref;\n    return s ? s.generatedKeys$ : EMPTY;\n  })), null, [session]);\n  useEffect(() => {\n    setVrf(session === null || session === void 0 ? void 0 : session.vrf);\n  }, [session]);\n  useEffect(() => {\n    const allPartyData = parties.map(party => {\n      return {\n        partyId: party.partyId,\n        vrf: party.vrf\n      };\n    });\n\n    // console.log(\"vrf\", allPartyVrfs);\n    if (userId != null && myVrf != null) {\n      allPartyData.push({\n        partyId: userId,\n        vrf: myVrf\n      });\n    }\n\n    // sort allpartydata based on vrf\n    allPartyData.sort((n1, n2) => {\n      if (n1.vrf > n2.vrf) {\n        return 1;\n      }\n      if (n1.vrf < n2.vrf) {\n        return -1;\n      }\n      return 0;\n    });\n    console.log(\"allParty vrfs\", allPartyData);\n    if (keys) {\n      {\n        //console.log(\"selecting party\", allPartyData);\n        // set party where vrf = allpartyvrfs[0]\n\n        SetParty_vid(allPartyData[0].partyId);\n        SetParty_counterlimit(allPartyData[1].partyId);\n        SetComplete(true);\n      }\n    }\n    console.log(\"just checking\");\n  }, [keys]);\n  const encryptTokens = async () => {\n    // * get the tokens from the backend\n    const {\n      data: {\n        tokens\n      }\n    } = await axios.get(BACKEND_URL + \"/getTokensAll\");\n    const pubKeytoPoint = Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub));\n    const privKey = BigInt(\"0x\" + TallyKeyPriv);\n    console.log(\"tokens\", tokens);\n\n    // * encrypt the tokens\n    const encryptedTokens = [];\n    for (let i = 0; i < tokens.length; i++) {\n      const mappedVid = Point.fromXYPair(CURVE.Gx, CURVE.Gy).multiplyCT(BigInt(\"0x\" + tokens[i].vid));\n      const encryptedVid = ElgammalEncrypt(Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub)), mappedVid).map(n => n.compressed.toString(16).padStart(256 / 4 + 1)).join(\"\");\n      const counters = tokens[i].counters;\n      let counterIndex = 0;\n      for (let i = 0; i < counters.length; i++) {\n        const mappedCounter = Point.fromXYPair(CURVE.Gx, CURVE.Gy).multiplyCT(BigInt(\"0x\" + counters[i]));\n        const encryptedCounter = ElgammalEncrypt(Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub)), mappedCounter).map(n => n.compressed.toString(16).padStart(256 / 4 + 1)).join(\"\");\n        const sign = signature(tokens[i].vid, BigInt(\"0x\" + TallyKeyPriv));\n        const [R, s, e] = sign;\n        const signObj = {\n          R: R.compressed.toString(16),\n          s: s.toString(),\n          e: e.toString()\n        };\n        const signJson = JSON.stringify(signObj);\n        encryptedTokens.push({\n          vid: encryptedVid,\n          counter: encryptedCounter,\n          HashedId: tokens[i].HashedId,\n          signature: signJson,\n          counterIndex: counterIndex,\n          pubkey: TallyKeyPub\n        });\n        counterIndex += 1;\n      }\n    }\n\n    // * post the encrypted tokens to the backend\n    console.log(\"tokens to encrypt\", encryptedTokens);\n    await axios.post(BACKEND_URL + \"/StoreEncryptedTokens\", {\n      encryptedTokens: encryptedTokens\n    });\n  };\n  const FetchlimitsandGenerateCounters = async () => {\n    const {\n      data: {\n        limits,\n        HashIds\n      }\n    } = await axios.get(BACKEND_URL + \"/getCounterlimit\");\n    console.log(\"result from limits\");\n    console.log(\"limits\", limits);\n    console.log(\"HashIds\", HashIds);\n\n    // * generate the tokens\n    const tokens = [];\n    for (let i = 0; i < HashIds.length; i++) {\n      const vid = GenerateRandom();\n      let counter = BigInt(Math.floor(Math.random() * 10000000).toString(10));\n      for (let j = 0; j < limits[j]; j++) {\n        // * for every hash id generate limit number of counters\n        counter += 1n;\n        tokens.push({\n          vid: vid.toString(),\n          counter: counter.toString(),\n          HashedId: HashIds[i]\n        });\n      }\n    }\n    // console.log(\"tokens\", tokens);\n    await postTokens(tokens);\n  };\n  const postTokens = async tokens => {\n    let promises = [];\n    for (let i = 0; i < tokens.length; i++) {\n      promises.push(axios.post(BACKEND_URL + \"/StoreTokens\", {\n        vid: tokens[i].vid,\n        HashedId: tokens[i].HashedId,\n        counter: tokens[i].counter\n      }));\n    }\n    Promise.all([promises]).then(res => {\n      console.log(\"tokens result \", res);\n    });\n  };\n  const waitAndEncrypt = async () => {\n    await WaitForTokens();\n    await encryptTokens();\n  };\n  useEffect(() => {\n    if (!keys) return;\n    //  Party for generating Counter limit\n    if (userId && userId == Party_counterlimit) {\n      console.log(\"I am the counterlimit party\");\n      const generateLimits = async () => {\n        let limits = [];\n        HashedIds.forEach(element => {\n          const limit = Math.floor(Math.random() * (8 - 5 + 1) + 5);\n          limits.push({\n            Limit: limit,\n            HashedId: element\n          });\n        });\n\n        // Post the limit to the backend\n        console.log(limits);\n        let promises = [];\n        for (let i = 0; i < limits.length; i++) {\n          promises.push(axios.post(BACKEND_URL + \"/counterlimit\", {\n            limit: limits[i].Limit,\n            HashedId: limits[i].HashedId\n          }));\n        }\n        Promise.all(promises).then(res => {\n          console.log(res);\n        });\n        await axios.post(BACKEND_URL + \"/SetTriggerVal\", {\n          flag: 1\n        });\n        SetMessage(\"limits generated & encrypted tokens \");\n      };\n      generateLimits();\n      waitAndEncrypt();\n    }\n    // Party for generating VoterIds & Counter\n    else if (userId === Party_vid) {\n      console.log(\"I am the vid party\");\n      // * Post the tokens to the backend\n\n      const waitandgenerate = async () => {\n        SetMessage(\"waiting for limits\");\n        await WaitForLimit();\n        await FetchlimitsandGenerateCounters();\n        SetMessage(\"Generated vids\");\n        await axios.post(BACKEND_URL + \"/SetTokenTriggerVal\", {\n          flag: 1\n        });\n        waitAndEncrypt();\n        SetMessage(\"Generated vids & encyrpted tokens\");\n      };\n      waitandgenerate();\n    } else if (userId) {\n      SetMessage(\"waiting for tokens\");\n      waitAndEncrypt();\n      SetMessage(\"Tokens encrypted\");\n\n      //SetMessage(\"\");\n    }\n  }, [complete]);\n  useEffect(() => {\n    if (!userId) return;\n    const cb = async () => {\n      try {\n        if (!TallyKeyPub && !TallyKeyPriv) {\n          //console.log(\"creating TallyKey\");\n          const TallyKey = await createTallyKey();\n          console.log(\"tally key \", TallyKey);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    cb();\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-semibold\",\n      children: \"Generate Public Key\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), sessionId ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Session Link:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"border border-blue-300 rounded-md py-5 px-4\",\n        children: \"localhost:3000/generate/\" + sessionId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this), userId ? /*#__PURE__*/_jsxDEV(Parties, {\n      userId: userId,\n      parties: parties\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), TallyKeyPub && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: [\" My TS Public key: \", TallyKeyPub]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: [\" My TS priv key: \", TallyKeyPriv]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"block blue-btn ripple\",\n      onClick: () => session === null || session === void 0 ? void 0 : session.ready(!session.isReady),\n      children: \"Start Key Generation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this), keys ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounded-md text-center bg-blue-200 px-2 py-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-medium\",\n          children: \"Generated Keys\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-lg font-semibold\",\n          children: \"Public\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"N: \", keys.public.N.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Theta: \", keys.public.theta.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Delta: \", keys.public.delta.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Vk: \", keys.public.vk.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-lg font-semibold\",\n          children: \"Private\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"f: \", keys.private.f.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Vki: \", keys.private.vki.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"text-lg font-semibold\",\n          children: \"Selected Parties \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" For Counter: \", Party_counterlimit, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" For Token generation: \", Party_vid]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounded-md text-center bg-blue-200 px-2 py-2\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    //\n    _jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n}\n_s(GeneratePage, \"SJ7nAdj5QC6xS2mP8cPgZsJwfCw=\", false, function () {\n  return [useParams, useNavigate, useSession, useObservable];\n});\n_c = GeneratePage;\nasync function createSession() {\n  const {\n    data: {\n      sessionId: id\n    }\n  } = await axios.post(BACKEND_URL + \"/CreateSession\");\n  return id;\n}\nvar _c;\n$RefreshReg$(_c, \"GeneratePage\");","map":{"version":3,"names":["useEffect","useState","useParams","useNavigate","axios","joinEncryptSession","BACKEND_URL","useSession","Parties","useObservable","EMPTY","switchMap","Point","GenerateRandom","GenPublicKey","signature","ElgammalEncrypt","CURVE","jsxDEV","_jsxDEV","Fragment","_Fragment","GeneratePage","_s","sessionId","navigate","HashedIds","setHashedIds","session","setSession","Party_vid","SetParty_vid","Party_counterlimit","SetParty_counterlimit","message","SetMessage","complete","SetComplete","myVrf","setVrf","createSession","then","id","replace","TallyKeyPub","SetTallyKeyPub","TallyKeyPriv","SetTallyKeyPriv","createTallyKey","priv_key","pubkey","post","userId","pubKey","compressed","toString","cb","console","log","s","e","error","cleanup","parties","WaitForTokens","Promise","resolve","reject","myInter","setInterval","getUserData","data","result","get","clearInterval","fetchHashedIDs","WaitForLimit","keys","i","session$","pipe","_ref","generatedKeys$","vrf","allPartyData","map","party","partyId","push","sort","n1","n2","encryptTokens","tokens","pubKeytoPoint","fromCompressed","BigInt","privKey","encryptedTokens","length","mappedVid","fromXYPair","Gx","Gy","multiplyCT","vid","encryptedVid","n","padStart","join","counters","counterIndex","mappedCounter","encryptedCounter","sign","R","signObj","signJson","JSON","stringify","counter","HashedId","FetchlimitsandGenerateCounters","limits","HashIds","Math","floor","random","j","postTokens","promises","all","res","waitAndEncrypt","generateLimits","forEach","element","limit","Limit","flag","waitandgenerate","TallyKey","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ready","isReady","public","N","theta","delta","vk","private","f","vki","_c","$RefreshReg$"],"sources":["/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/generate/index.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { EncryptSession, joinEncryptSession } from \"../../connections/session\";\nimport { GeneratedKeys } from \"pallier\";\nimport { BACKEND_URL } from \"../../connections/api\";\nimport { useSession } from \"../../hooks/useSession\";\nimport { Parties } from \"../../components/parties\";\nimport { useObservable } from \"rxjs-hooks\";\nimport { EMPTY, switchMap } from \"rxjs\";\n\nimport {\n  Point,\n  GenerateRandom,\n  GenPublicKey,\n  signature,\n  ElgammalEncrypt,\n  CURVE,\n} from \"elgammal\";\n\nexport default function GeneratePage() {\n  const { sessionId } = useParams();\n  const navigate = useNavigate();\n  const [HashedIds, setHashedIds] = useState<String[] |null>(null  )\n  const [session, setSession] = useState(null as null | EncryptSession);\n  const [Party_vid, SetParty_vid] = useState(null as null | string);\n  const [Party_counterlimit, SetParty_counterlimit] = useState(\n    null as null | string\n  );\n\n  const [message, SetMessage] = useState(\"\");\n  const [complete, SetComplete] = useState(false);\n\n  const [myVrf, setVrf] = useState(null as null | string);\n  //If sessionId was not provided, we create a new sessionId\n  useEffect(() => {\n    if (!sessionId) {\n      createSession().then((id) =>\n        navigate(\"/generate/\" + id, { replace: true })\n      );\n    }\n  }, [sessionId, navigate]);\n\n  const [TallyKeyPub, SetTallyKeyPub] = useState(null as null | string);\n  const [TallyKeyPriv, SetTallyKeyPriv] = useState(null as null | string);\n\n  async function createTallyKey() {\n    const priv_key = GenerateRandom();\n    const pubkey = GenPublicKey(priv_key);\n    await axios.post(BACKEND_URL + \"/Submitkey\", {\n      userId,\n      pubKey: pubkey.compressed.toString(16),\n      sessionId: sessionId,\n    });\n    SetTallyKeyPub(pubkey.compressed.toString(16));\n    SetTallyKeyPriv(priv_key.toString(16));\n  }\n\n  useEffect(() => {\n    const cb = async () => {\n      try {\n        if (!session && sessionId) {\n          console.log(\"creating session\");\n          const s = await joinEncryptSession(sessionId);\n          setSession(s);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    cb();\n\n    return () => {\n      if (session) {\n        session.cleanup();\n      }\n    };\n  }, [sessionId, session]);\n\n  const [userId, parties] = useSession(session);\n\n  const WaitForTokens = async () => {\n    return new Promise((resolve, reject) => {\n      const myInter = setInterval(async function getUserData() {\n        try {\n          const {\n            data: { result },\n          } = await axios.get(BACKEND_URL + \"/TokenTriggerVal\");\n          console.log(\"result\", result);\n          if (result == 1) {\n            clearInterval(myInter);\n            resolve(\"done\");\n          }\n        \n        } catch (error) {\n          console.log(error);\n          reject(error);\n        }\n      }, 1000);\n    });\n  };\n\n\n  const fetchHashedIDs = async () => {\n    const {data } = await axios.get('http://bccm-s7.hs-mittweida.de:3100/getHashedIDs');\n    console.log(\"pls lev me alon \" , data)\n    console.log(\"ids\", data[\"hashedIDs\"])\n    setHashedIds(data[\"hashedIDs\"])\n\n  }\n  useEffect(() => {\n    // Fetch data from an API or any other source\n    fetchHashedIDs()\n  }, []);\n\n  const WaitForLimit = async () => {\n    return new Promise((resolve, reject) => {\n      const myInter = setInterval(async function getUserData() {\n        try {\n          const {\n            data: { result },\n          } = await axios.get(BACKEND_URL + \"/TriggerVal\");\n          console.log(\"result\", result);\n          if (result == 1) {\n            clearInterval(myInter);\n            resolve(\"done\");\n          }\n          // ? else setinterval will call this again ?\n        } catch (error) {\n          console.log(error);\n          reject(error);\n        }\n      }, 1000);\n    });\n  };\n\n  const keys = useObservable(\n    (i, session$) =>\n      session$.pipe(switchMap(([s]) => (s ? s.generatedKeys$ : EMPTY))),\n    null as null | GeneratedKeys,\n    [session]\n  );\n\n  useEffect(() => {\n    setVrf(session?.vrf);\n  }, [session]);\n\n  useEffect(() => {\n    const allPartyData = parties.map((party) => {\n      return {\n        partyId: party.partyId,\n        vrf: party.vrf,\n      };\n    });\n\n    // console.log(\"vrf\", allPartyVrfs);\n    if (userId != null && myVrf != null) {\n      allPartyData.push({ partyId: userId, vrf: myVrf });\n    }\n\n    // sort allpartydata based on vrf\n    allPartyData.sort((n1, n2) => {\n      if (n1.vrf > n2.vrf) {\n        return 1;\n      }\n      if (n1.vrf < n2.vrf) {\n        return -1;\n      }\n      return 0;\n    });\n\n    console.log(\"allParty vrfs\", allPartyData);\n\n    if (keys) {\n      {\n        //console.log(\"selecting party\", allPartyData);\n        // set party where vrf = allpartyvrfs[0]\n\n        SetParty_vid(allPartyData[0].partyId);\n        SetParty_counterlimit(allPartyData[1].partyId);\n        SetComplete(true);\n      }\n    }\n    console.log(\"just checking\");\n  }, [keys]);\n\n  const encryptTokens = async () => {\n    // * get the tokens from the backend\n    const {\n      data: { tokens },\n    } = await axios.get(BACKEND_URL + \"/getTokensAll\");\n    const pubKeytoPoint = Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub));\n    const privKey = BigInt(\"0x\" + TallyKeyPriv);\n\n    console.log(\"tokens\", tokens);\n\n    // * encrypt the tokens\n    const encryptedTokens: any[] = [];\n    for (let i = 0; i < tokens.length; i++) {\n\n\n      const mappedVid = Point.fromXYPair(CURVE.Gx, CURVE.Gy).multiplyCT(\n        BigInt(\"0x\" + tokens[i].vid)\n      );\n\n      const encryptedVid = ElgammalEncrypt(\n        Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub)),\n        mappedVid\n      )\n        .map((n) => n.compressed.toString(16).padStart(256 / 4 + 1))\n        .join(\"\");\n\n      const counters = tokens[i].counters\n      let counterIndex =0 ; \n      for ( let i = 0 ; i < counters.length ; i++ ) {\n\n        const mappedCounter = Point.fromXYPair(CURVE.Gx, CURVE.Gy).multiplyCT(\n          BigInt(\"0x\" + counters[i])\n        );\n        const encryptedCounter = ElgammalEncrypt(\n          Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub)),\n          mappedCounter\n        )\n          .map((n) => n.compressed.toString(16).padStart(256 / 4 + 1))\n          .join(\"\");\n        const sign = signature(tokens[i].vid, BigInt(\"0x\" + TallyKeyPriv));\n        const [R, s, e] = sign;\n        const signObj = {\n          R: R.compressed.toString(16),\n          s: s.toString(),\n          e: e.toString(),\n        };\n        const signJson = JSON.stringify(signObj);\n        encryptedTokens.push({\n          vid: encryptedVid,\n          counter: encryptedCounter,\n          HashedId: tokens[i].HashedId,\n          signature: signJson,\n          counterIndex: counterIndex,\n          pubkey : TallyKeyPub\n        });\n        counterIndex += 1;\n\n      }\n    }\n\n    // * post the encrypted tokens to the backend\n    console.log(\"tokens to encrypt\", encryptedTokens);\n\n    await axios.post(BACKEND_URL + \"/StoreEncryptedTokens\", { encryptedTokens: encryptedTokens});\n  };\n\n  const FetchlimitsandGenerateCounters = async () => {\n    const {\n      data: { limits, HashIds },\n    } = await axios.get(BACKEND_URL + \"/getCounterlimit\");\n    console.log(\"result from limits\");\n    console.log(\"limits\", limits);\n    console.log(\"HashIds\", HashIds);\n\n    // * generate the tokens\n    const tokens: any[] = [];\n    for (let i = 0; i < HashIds.length; i++) {\n      const vid = GenerateRandom();\n      let counter = BigInt(Math.floor(Math.random() * 10000000).toString(10));\n\n      for (let j = 0; j < limits[j]; j++) {\n        // * for every hash id generate limit number of counters\n        counter += 1n;\n        tokens.push({\n          vid: vid.toString(),\n          counter: counter.toString(),\n          HashedId: HashIds[i],\n        });\n      }\n    }\n    // console.log(\"tokens\", tokens);\n    await postTokens(tokens);\n  };\n\n  const postTokens = async (tokens: any[]) => {\n    let promises = [];\n    for (let i = 0; i < tokens.length; i++) {\n      promises.push(\n        axios.post(BACKEND_URL + \"/StoreTokens\", {\n          vid: tokens[i].vid,\n          HashedId: tokens[i].HashedId,\n          counter: tokens[i].counter,\n        })\n      );\n    }\n    Promise.all([promises]).then((res) => {\n      console.log(\"tokens result \", res);\n    });\n  };\n\n  const waitAndEncrypt = async () => {\n    await WaitForTokens();\n    await encryptTokens();\n  };\n\n  useEffect(() => {\n    if (!keys) return;\n    //  Party for generating Counter limit\n    if (userId && userId == Party_counterlimit) {\n      console.log(\"I am the counterlimit party\");\n\n    \n\n\n      const generateLimits = async () => {\n        let limits: { Limit: number; HashedId: string }[] = [];\n        \n        \n        \n        HashedIds!.forEach((element: any) => {\n          const limit = Math.floor(Math.random() * (8 - 5 + 1) + 5);\n          limits.push({ Limit: limit, HashedId: element });\n        });\n\n        // Post the limit to the backend\n        console.log(limits);\n        let promises = [];\n        for (let i = 0; i < limits.length; i++) {\n          promises.push(\n            axios.post(BACKEND_URL + \"/counterlimit\", {\n              limit: limits[i].Limit,\n              HashedId: limits[i].HashedId,\n            })\n          );\n        }\n        Promise.all(promises).then((res) => {\n          console.log(res);\n        });\n\n        await axios.post(BACKEND_URL + \"/SetTriggerVal\", { flag: 1 });\n        SetMessage(\"limits generated & encrypted tokens \");\n      };\n     \n      generateLimits();\n      waitAndEncrypt();\n    }\n    // Party for generating VoterIds & Counter\n    else if (userId === Party_vid) {\n      console.log(\"I am the vid party\");\n      // * Post the tokens to the backend\n\n      const waitandgenerate = async () => {\n        SetMessage(\"waiting for limits\");\n        await WaitForLimit();\n        await FetchlimitsandGenerateCounters();\n        SetMessage(\"Generated vids\");\n        await axios.post(BACKEND_URL + \"/SetTokenTriggerVal\", { flag: 1 });\n        waitAndEncrypt();\n        SetMessage(\"Generated vids & encyrpted tokens\");\n      };\n\n      waitandgenerate();\n    } else if (userId) {\n      SetMessage(\"waiting for tokens\");\n      waitAndEncrypt();\n      SetMessage(\"Tokens encrypted\");\n\n      //SetMessage(\"\");\n    }\n  }, [complete]);\n\n  useEffect(() => {\n    if (!userId) return;\n    const cb = async () => {\n      try {\n        if (!TallyKeyPub && !TallyKeyPriv) {\n          //console.log(\"creating TallyKey\");\n          const TallyKey = await createTallyKey();\n          console.log(\"tally key \", TallyKey);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    cb();\n  }, [userId]);\n\n  return (\n    <div className=\"flex flex-col items-center space-y-4\">\n      <h2 className=\"text-3xl font-semibold\">Generate Public Key</h2>\n      <br />\n      {sessionId ? (\n        <span>\n          Session Link:{\" \"}\n          <span className=\"border border-blue-300 rounded-md py-5 px-4\">\n            {\"localhost:3000/generate/\" + sessionId}\n          </span>\n        </span>\n      ) : (\n        <></>\n      )}\n      <br />\n\n      {userId ? <Parties userId={userId} parties={parties} /> : <></>}\n\n      {TallyKeyPub && (\n        <>\n          <div className=\"flex space-x-2\"> My TS Public key: {TallyKeyPub}</div>\n          <div className=\"flex space-x-2\"> My TS priv key: {TallyKeyPriv}</div>\n        </>\n      )}\n\n      <button\n        className=\"block blue-btn ripple\"\n        onClick={() => session?.ready(!session.isReady)}\n      >\n        Start Key Generation\n      </button>\n\n      {keys ? (\n        <>\n          <div className=\"rounded-md text-center bg-blue-200 px-2 py-2\">\n            <h3 className=\"text-xl font-medium\">Generated Keys</h3>\n            <h4 className=\"text-lg font-semibold\">Public</h4>\n            <div>N: {keys.public.N.toString()}</div>\n            <div>Theta: {keys.public.theta.toString()}</div>\n            <div>Delta: {keys.public.delta.toString()}</div>\n            <div>Vk: {keys.public.vk.toString()}</div>\n            <h4 className=\"text-lg font-semibold\">Private</h4>\n            <div>f: {keys.private.f.toString()}</div>\n            <div>Vki: {keys.private.vki.toString()}</div>\n            <h5 className=\"text-lg font-semibold\">Selected Parties </h5>\n            <p> For Counter: {Party_counterlimit} </p>\n            <p> For Token generation: {Party_vid}</p>\n          </div>\n          <div className=\"rounded-md text-center bg-blue-200 px-2 py-2\">\n            {message}\n          </div>\n        </>\n      ) : (\n        //\n        <></>\n      )}\n    </div>\n  );\n}\n\nasync function createSession() {\n  const {\n    data: { sessionId: id },\n  } = await axios.post(BACKEND_URL + \"/CreateSession\");\n  return id as string;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}