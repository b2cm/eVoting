{"ast":null,"code":"import * as e from \"@juanelas/base64\";\nfunction n(e) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  let t = arguments.length > 2 ? arguments[2] : undefined;\n  const r = e.match(/^(0x)?([\\da-fA-F]+)$/);\n  if (null == r) throw new RangeError(\"input must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'\");\n  let o = r[2];\n  if (void 0 !== t) {\n    if (t < o.length / 2) throw new RangeError(`expected byte length ${t} < input hex byte length ${Math.ceil(o.length / 2)}`);\n    o = o.padStart(2 * t, \"0\");\n  }\n  return n ? \"0x\" + o : o;\n}\nfunction t(e) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  if (e < 0) throw RangeError(\"a should be a non-negative integer. Negative values are not supported\");\n  return l(o(e), n);\n}\nfunction r(e) {\n  let n = 8n;\n  ArrayBuffer.isView(e) ? n = BigInt(8 * e.BYTES_PER_ELEMENT) : e = new Uint8Array(e);\n  let t = 0n;\n  for (const r of e.values()) {\n    t = (t << n) + BigInt(r);\n  }\n  return t;\n}\nfunction o(e) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  let t = arguments.length > 2 ? arguments[2] : undefined;\n  if (e < 0) throw RangeError(\"a should be a non-negative integer. Negative values are not supported\");\n  return e.toString(16);\n}\nfunction a(e) {\n  return BigInt(n(e, !0));\n}\nfunction i(e) {\n  if (e < 0) throw RangeError(\"a should be a non-negative integer. Negative values are not supported\");\n  return f(l(e.toString(16)));\n}\nfunction u(e) {\n  return a(g(c(e)));\n}\nfunction f(e) {\n  return new TextDecoder().decode(new Uint8Array(e));\n}\nfunction c(e) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  return new TextEncoder().encode(e).buffer;\n}\nfunction g(e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  let r = arguments.length > 2 ? arguments[2] : undefined;\n  {\n    let o = \"\";\n    const a = \"0123456789abcdef\";\n    return (e = ArrayBuffer.isView(e) ? new Uint8Array(e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength)) : new Uint8Array(e)).forEach(e => {\n      o += a[e >> 4] + a[15 & e];\n    }), n(o, t, r);\n  }\n}\nfunction l(e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  let r = n(e);\n  return r = n(e, !1, Math.ceil(r.length / 2)), Uint8Array.from(r.match(/[\\da-fA-F]{2}/g).map(e => parseInt(e, 16))).buffer;\n}\nfunction s(n) {\n  let r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  let o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;\n  return e.encode(t(n), r, o);\n}\nfunction d(n) {\n  return r(e.decode(n));\n}\nexport { d as base64ToBigint, s as bigintToBase64, t as bigintToBuf, o as bigintToHex, i as bigintToText, r as bufToBigint, g as bufToHex, f as bufToText, a as hexToBigint, l as hexToBuf, n as parseHex, u as textToBigint, c as textToBuf };","map":{"version":3,"sources":["../src/ts/index.ts"],"names":["parseHex","a","prefix0x","byteLength","hexMatch","match","RangeError","hex","undefined","length","Math","ceil","padStart","bigintToBuf","returnArrayBuffer","hexToBuf","bigintToHex","bufToBigint","buf","bits","ArrayBuffer","isView","BigInt","BYTES_PER_ELEMENT","Uint8Array","ret","i","values","toString","hexToBigint","hexStr","bigintToText","bufToText","textToBigint","text","bufToHex","textToBuf","TextDecoder","decode","str","TextEncoder","encode","buffer","s","h","slice","byteOffset","forEach","v","from","map","parseInt","bigintToBase64","urlsafe","padding","b64","base64ToBigint"],"mappings":"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","sourcesContent":["import*as e from\"@juanelas/base64\";function n(e,n=!1,t){const r=e.match(/^(0x)?([\\da-fA-F]+)$/);if(null==r)throw new RangeError(\"input must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'\");let o=r[2];if(void 0!==t){if(t<o.length/2)throw new RangeError(`expected byte length ${t} < input hex byte length ${Math.ceil(o.length/2)}`);o=o.padStart(2*t,\"0\")}return n?\"0x\"+o:o}function t(e,n=!1){if(e<0)throw RangeError(\"a should be a non-negative integer. Negative values are not supported\");return l(o(e),n)}function r(e){let n=8n;ArrayBuffer.isView(e)?n=BigInt(8*e.BYTES_PER_ELEMENT):e=new Uint8Array(e);let t=0n;for(const r of e.values()){t=(t<<n)+BigInt(r)}return t}function o(e,n=!1,t){if(e<0)throw RangeError(\"a should be a non-negative integer. Negative values are not supported\");return e.toString(16)}function a(e){return BigInt(n(e,!0))}function i(e){if(e<0)throw RangeError(\"a should be a non-negative integer. Negative values are not supported\");return f(l(e.toString(16)))}function u(e){return a(g(c(e)))}function f(e){return(new TextDecoder).decode(new Uint8Array(e))}function c(e,n=!1){return(new TextEncoder).encode(e).buffer}function g(e,t=!1,r){{let o=\"\";const a=\"0123456789abcdef\";return(e=ArrayBuffer.isView(e)?new Uint8Array(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)):new Uint8Array(e)).forEach((e=>{o+=a[e>>4]+a[15&e]})),n(o,t,r)}}function l(e,t=!1){let r=n(e);return r=n(e,!1,Math.ceil(r.length/2)),Uint8Array.from(r.match(/[\\da-fA-F]{2}/g).map((e=>parseInt(e,16)))).buffer}function s(n,r=!1,o=!0){return e.encode(t(n),r,o)}function d(n){return r(e.decode(n))}export{d as base64ToBigint,s as bigintToBase64,t as bigintToBuf,o as bigintToHex,i as bigintToText,r as bufToBigint,g as bufToHex,f as bufToText,a as hexToBigint,l as hexToBuf,n as parseHex,u as textToBigint,c as textToBuf};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnJvd3Nlci5lc20uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy90cy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsicGFyc2VIZXgiLCJhIiwicHJlZml4MHgiLCJieXRlTGVuZ3RoIiwiaGV4TWF0Y2giLCJtYXRjaCIsIlJhbmdlRXJyb3IiLCJoZXgiLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJNYXRoIiwiY2VpbCIsInBhZFN0YXJ0IiwiYmlnaW50VG9CdWYiLCJyZXR1cm5BcnJheUJ1ZmZlciIsImhleFRvQnVmIiwiYmlnaW50VG9IZXgiLCJidWZUb0JpZ2ludCIsImJ1ZiIsImJpdHMiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIkJpZ0ludCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiVWludDhBcnJheSIsInJldCIsImkiLCJ2YWx1ZXMiLCJ0b1N0cmluZyIsImhleFRvQmlnaW50IiwiaGV4U3RyIiwiYmlnaW50VG9UZXh0IiwiYnVmVG9UZXh0IiwidGV4dFRvQmlnaW50IiwidGV4dCIsImJ1ZlRvSGV4IiwidGV4dFRvQnVmIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJzdHIiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImJ1ZmZlciIsInMiLCJoIiwic2xpY2UiLCJieXRlT2Zmc2V0IiwiZm9yRWFjaCIsInYiLCJmcm9tIiwibWFwIiwicGFyc2VJbnQiLCJiaWdpbnRUb0Jhc2U2NCIsInVybHNhZmUiLCJwYWRkaW5nIiwiYjY0IiwiYmFzZTY0VG9CaWdpbnQiXSwibWFwcGluZ3MiOiJtQ0EyQk0sU0FBVUEsRUFBVUMsRUFBV0MsR0FBb0IsRUFBT0MsR0FDOUQsTUFBTUMsRUFBV0gsRUFBRUksTUFBTSx3QkFDekIsR0FBZ0IsTUFBWkQsRUFDRixNQUFNLElBQUlFLFdBQVcsc0VBRXZCLElBQUlDLEVBQU1ILEVBQVMsR0FDbkIsUUFBbUJJLElBQWZMLEVBQTBCLENBQzVCLEdBQUlBLEVBQWFJLEVBQUlFLE9BQVMsRUFDNUIsTUFB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\n"]},"metadata":{},"sourceType":"module"}