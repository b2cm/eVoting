{"ast":null,"code":"// Generated by psc version 0.9.3\n\"use strict\";\n\nvar Data_BigInt = require(\"../Data.BigInt\");\nvar Data_Foldable = require(\"../Data.Foldable\");\nvar Data_String = require(\"../Data.String\");\nvar Prelude = require(\"../Prelude\");\nvar Data_EuclideanRing = require(\"../Data.EuclideanRing\");\nvar Data_Semiring = require(\"../Data.Semiring\");\nvar Data_Functor = require(\"../Data.Functor\");\nvar Data_Ring = require(\"../Data.Ring\");\nvar Data_Boolean = require(\"../Data.Boolean\");\nvar mMod = function (a) {\n  return function (b) {\n    var ab = Data_EuclideanRing.mod(Data_BigInt.euclideanRingBigInt)(a)(b);\n    var $0 = Data_BigInt.negative(ab);\n    if ($0) {\n      return Data_EuclideanRing.mod(Data_BigInt.euclideanRingBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(ab)(b))(b);\n    }\n    ;\n    if (!$0) {\n      return ab;\n    }\n    ;\n    throw new Error(\"Failed pattern match at Data.Modular line 9, column 12 - line 9, column 56: \" + [$0.constructor.name]);\n  };\n};\nvar mMul = function (p) {\n  return function (a) {\n    return function (b) {\n      return mMod(Data_Semiring.mul(Data_BigInt.semiringBigInt)(a)(b))(p);\n    };\n  };\n};\nvar mJoin = function (ints) {\n  return Data_String.joinWith(\"\")(Data_Functor.map(Data_Functor.functorArray)(Data_BigInt.toBase(16))(ints));\n};\nvar big2 = Data_BigInt.fromInt(2);\nvar mPow = function (p) {\n  return function (a) {\n    return function (b) {\n      if (Data_BigInt.negative(b)) {\n        return mInv(p)(Data_BigInt.modPow(a)(Data_Ring.negate(Data_BigInt.ringBigInt)(b))(p));\n      }\n      ;\n      if (Data_Boolean.otherwise) {\n        return Data_BigInt.modPow(a)(b)(p);\n      }\n      ;\n      throw new Error(\"Failed pattern match at Data.Modular line 13, column 1 - line 15, column 30: \" + [p.constructor.name, a.constructor.name, b.constructor.name]);\n    };\n  };\n};\nvar mInv = function (p) {\n  return function (i) {\n    return mPow(p)(i)(Data_Ring.sub(Data_BigInt.ringBigInt)(p)(big2));\n  };\n};\nvar big1 = Data_BigInt.fromInt(1);\nvar mProd = function (p) {\n  return function (a) {\n    return Data_Foldable.foldr(Data_Foldable.foldableArray)(mMul(p))(big1)(a);\n  };\n};\nmodule.exports = {\n  big1: big1,\n  big2: big2,\n  mInv: mInv,\n  mJoin: mJoin,\n  mMod: mMod,\n  mMul: mMul,\n  mPow: mPow,\n  mProd: mProd\n};","map":{"version":3,"names":["Data_BigInt","require","Data_Foldable","Data_String","Prelude","Data_EuclideanRing","Data_Semiring","Data_Functor","Data_Ring","Data_Boolean","mMod","a","b","ab","mod","euclideanRingBigInt","$0","negative","add","semiringBigInt","Error","constructor","name","mMul","p","mul","mJoin","ints","joinWith","map","functorArray","toBase","big2","fromInt","mPow","mInv","modPow","negate","ringBigInt","otherwise","i","sub","big1","mProd","foldr","foldableArray","module","exports"],"sources":["/Users/kemlohalex/Documents/evoting/crypto/packages/lrs/build/esm/lib/Data.Modular/index.js"],"sourcesContent":["// Generated by psc version 0.9.3\n\"use strict\";\nvar Data_BigInt = require(\"../Data.BigInt\");\nvar Data_Foldable = require(\"../Data.Foldable\");\nvar Data_String = require(\"../Data.String\");\nvar Prelude = require(\"../Prelude\");\nvar Data_EuclideanRing = require(\"../Data.EuclideanRing\");\nvar Data_Semiring = require(\"../Data.Semiring\");\nvar Data_Functor = require(\"../Data.Functor\");\nvar Data_Ring = require(\"../Data.Ring\");\nvar Data_Boolean = require(\"../Data.Boolean\");\nvar mMod = function (a) {\n    return function (b) {\n        var ab = Data_EuclideanRing.mod(Data_BigInt.euclideanRingBigInt)(a)(b);\n        var $0 = Data_BigInt.negative(ab);\n        if ($0) {\n            return Data_EuclideanRing.mod(Data_BigInt.euclideanRingBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(ab)(b))(b);\n        }\n        ;\n        if (!$0) {\n            return ab;\n        }\n        ;\n        throw new Error(\"Failed pattern match at Data.Modular line 9, column 12 - line 9, column 56: \" + [$0.constructor.name]);\n    };\n};\nvar mMul = function (p) {\n    return function (a) {\n        return function (b) {\n            return mMod(Data_Semiring.mul(Data_BigInt.semiringBigInt)(a)(b))(p);\n        };\n    };\n};\nvar mJoin = function (ints) {\n    return Data_String.joinWith(\"\")(Data_Functor.map(Data_Functor.functorArray)(Data_BigInt.toBase(16))(ints));\n};\nvar big2 = Data_BigInt.fromInt(2);\nvar mPow = function (p) {\n    return function (a) {\n        return function (b) {\n            if (Data_BigInt.negative(b)) {\n                return mInv(p)(Data_BigInt.modPow(a)(Data_Ring.negate(Data_BigInt.ringBigInt)(b))(p));\n            }\n            ;\n            if (Data_Boolean.otherwise) {\n                return Data_BigInt.modPow(a)(b)(p);\n            }\n            ;\n            throw new Error(\"Failed pattern match at Data.Modular line 13, column 1 - line 15, column 30: \" + [p.constructor.name, a.constructor.name, b.constructor.name]);\n        };\n    };\n};\nvar mInv = function (p) {\n    return function (i) {\n        return mPow(p)(i)(Data_Ring.sub(Data_BigInt.ringBigInt)(p)(big2));\n    };\n};\nvar big1 = Data_BigInt.fromInt(1);\nvar mProd = function (p) {\n    return function (a) {\n        return Data_Foldable.foldr(Data_Foldable.foldableArray)(mMul(p))(big1)(a);\n    };\n};\nmodule.exports = {\n    big1: big1,\n    big2: big2,\n    mInv: mInv,\n    mJoin: mJoin,\n    mMod: mMod,\n    mMul: mMul,\n    mPow: mPow,\n    mProd: mProd\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}