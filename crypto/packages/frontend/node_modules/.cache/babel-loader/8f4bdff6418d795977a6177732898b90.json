{"ast":null,"code":"var _s = $RefreshSig$();\nimport { combineLatest, EMPTY, map, startWith, switchMap } from \"rxjs\";\nimport { useObservable } from \"rxjs-hooks\";\nexport function useSession(session) {\n  _s();\n  const userId = useObservable((i, session$) => {\n    return session$.pipe(switchMap(_ref => {\n      let [s] = _ref;\n      return s ? s.userId$ : EMPTY;\n    }));\n  }, null, [session]);\n  const parties = useObservable((i, session$) => {\n    return session$.pipe(switchMap(_ref2 => {\n      let [s] = _ref2;\n      return s ? s.parties$ : EMPTY;\n    }), switchMap(ps => combineLatest(ps.map(p => combineLatest([p.ready$.pipe(startWith(false)), p.vrf$]).pipe(map(_ref3 => {\n      let [ready, vrf] = _ref3;\n      return {\n        ...p,\n        ready,\n        vrf\n      };\n    }))))));\n  }, [], [session]);\n  return [userId, parties];\n}\n_s(useSession, \"mukmBLFiZtI5mMu6AvN9Y07T+Js=\", false, function () {\n  return [useObservable, useObservable];\n});","map":{"version":3,"names":["combineLatest","EMPTY","map","startWith","switchMap","useObservable","useSession","session","_s","userId","i","session$","pipe","_ref","s","userId$","parties","_ref2","parties$","ps","p","ready$","vrf$","_ref3","ready","vrf"],"sources":["/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/hooks/useSession.ts"],"sourcesContent":["import { combineLatest, EMPTY, map, startWith, switchMap } from \"rxjs\";\nimport { useObservable } from \"rxjs-hooks\";\nimport { Session } from \"../connections/session\";\n\nexport function useSession(session: Session | null) {\n  const userId = useObservable(\n    (i, session$) => {\n      return session$.pipe(switchMap(([s]) => (s ? s.userId$ : EMPTY)));\n    },\n    null as null | string,\n    [session]\n  );\n\n  \n  const parties = useObservable(\n    \n    (i, session$) => {\n      return session$.pipe(\n        switchMap(([s]) => (s ? s.parties$ : EMPTY)),\n        switchMap((ps) =>\n          combineLatest(\n            ps.map((p) =>\n              combineLatest([p.ready$.pipe(startWith(false)), p.vrf$]).pipe(\n                map(([ready, vrf]) => ({\n                  ...p,\n                  ready,\n                  vrf\n                }))\n              )\n            )\n          )\n        )\n      );\n    },\n    [] as { vrf: any ,partyId: string; ready: boolean }[],\n    [session]\n  );\n\n  return [userId, parties] as const;\n}\n"],"mappings":";AAAA,SAASA,aAAa,EAAEC,KAAK,EAAEC,GAAG,EAAEC,SAAS,EAAEC,SAAS,QAAQ,MAAM;AACtE,SAASC,aAAa,QAAQ,YAAY;AAG1C,OAAO,SAASC,UAAUA,CAACC,OAAuB,EAAE;EAAAC,EAAA;EAClD,MAAMC,MAAM,GAAGJ,aAAa,CAC1B,CAACK,CAAC,EAAEC,QAAQ,KAAK;IACf,OAAOA,QAAQ,CAACC,IAAI,CAACR,SAAS,CAACS,IAAA;MAAA,IAAC,CAACC,CAAC,CAAC,GAAAD,IAAA;MAAA,OAAMC,CAAC,GAAGA,CAAC,CAACC,OAAO,GAAGd,KAAK;IAAA,CAAC,CAAC,CAAC;EACnE,CAAC,EACD,IAAI,EACJ,CAACM,OAAO,CACV,CAAC;EAGD,MAAMS,OAAO,GAAGX,aAAa,CAE3B,CAACK,CAAC,EAAEC,QAAQ,KAAK;IACf,OAAOA,QAAQ,CAACC,IAAI,CAClBR,SAAS,CAACa,KAAA;MAAA,IAAC,CAACH,CAAC,CAAC,GAAAG,KAAA;MAAA,OAAMH,CAAC,GAAGA,CAAC,CAACI,QAAQ,GAAGjB,KAAK;IAAA,CAAC,CAAC,EAC5CG,SAAS,CAAEe,EAAE,IACXnB,aAAa,CACXmB,EAAE,CAACjB,GAAG,CAAEkB,CAAC,IACPpB,aAAa,CAAC,CAACoB,CAAC,CAACC,MAAM,CAACT,IAAI,CAACT,SAAS,CAAC,KAAK,CAAC,CAAC,EAAEiB,CAAC,CAACE,IAAI,CAAC,CAAC,CAACV,IAAI,CAC3DV,GAAG,CAACqB,KAAA;MAAA,IAAC,CAACC,KAAK,EAAEC,GAAG,CAAC,GAAAF,KAAA;MAAA,OAAM;QACrB,GAAGH,CAAC;QACJI,KAAK;QACLC;MACF,CAAC;IAAA,CAAC,CACJ,CACF,CACF,CACF,CACF,CAAC;EACH,CAAC,EACD,EAAE,EACF,CAAClB,OAAO,CACV,CAAC;EAED,OAAO,CAACE,MAAM,EAAEO,OAAO,CAAC;AAC1B;AAACR,EAAA,CAnCeF,UAAU;EAAA,QACTD,aAAa,EASZA,aAAa;AAAA"},"metadata":{},"sourceType":"module"}