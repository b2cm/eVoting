{"ast":null,"code":"var _jsxFileName = \"/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/generate/index.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { joinEncryptSession } from \"../../connections/session\";\nimport { BACKEND_URL } from \"../../connections/api\";\nimport { useSession } from \"../../hooks/useSession\";\nimport { Parties } from \"../../components/parties\";\nimport { useObservable } from \"rxjs-hooks\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { HashedIds } from \"../../util/leaves\";\nimport { Point, GenerateRandom, GenPublicKey, signature, ElgammalEncrypt, CURVE } from \"elgammal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GeneratePage() {\n  _s();\n  const {\n    sessionId\n  } = useParams();\n  const navigate = useNavigate();\n  const [session, setSession] = useState(null);\n  const [Party_vid, SetParty_vid] = useState(null);\n  const [Party_counterlimit, SetParty_counterlimit] = useState(null);\n  const [message, SetMessage] = useState(\"\");\n  const [complete, SetComplete] = useState(false);\n  const [myVrf, setVrf] = useState(null);\n  //If sessionId was not provided, we create a new sessionId\n  useEffect(() => {\n    if (!sessionId) {\n      createSession().then(id => navigate(\"/generate/\" + id, {\n        replace: true\n      }));\n    }\n  }, [sessionId, navigate]);\n  const [TallyKeyPub, SetTallyKeyPub] = useState(null);\n  const [TallyKeyPriv, SetTallyKeyPriv] = useState(null);\n  async function createTallyKey() {\n    const priv_key = GenerateRandom();\n    console.log('priv:', priv_key);\n    const pubkey = GenPublicKey(priv_key);\n    console.log('pub:', pubkey.compressed.toString(16));\n    await axios.post(BACKEND_URL + \"/Submitkey\", {\n      userId,\n      pubKey: pubkey.compressed.toString(16),\n      sessionId: sessionId\n    });\n    SetTallyKeyPub(pubkey.compressed.toString(16));\n    SetTallyKeyPriv(priv_key.toString(16));\n  }\n  useEffect(() => {\n    const cb = async () => {\n      try {\n        if (!session && sessionId) {\n          console.log(\"creating session\");\n          const s = await joinEncryptSession(sessionId);\n          setSession(s);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    cb();\n    return () => {\n      if (session) {\n        session.cleanup();\n      }\n    };\n  }, [sessionId, session]);\n  const [userId, parties] = useSession(session);\n  const WaitForTokens = async () => {\n    return new Promise((resolve, reject) => {\n      const myInter = setInterval(async function getUserData() {\n        try {\n          const {\n            data: {\n              result\n            }\n          } = await axios.get(BACKEND_URL + \"/TokenTriggerVal\");\n          console.log(\"result\", result);\n          if (result == 1) {\n            clearInterval(myInter);\n            resolve(\"done\");\n          }\n        } catch (error) {\n          console.log(error);\n          reject(error);\n        }\n      }, 1000);\n    });\n  };\n  const WaitForLimit = async () => {\n    return new Promise((resolve, reject) => {\n      const myInter = setInterval(async function getUserData() {\n        try {\n          const {\n            data: {\n              result\n            }\n          } = await axios.get(BACKEND_URL + \"/TriggerVal\");\n          console.log(\"result\", result);\n          if (result == 1) {\n            clearInterval(myInter);\n            resolve(\"done\");\n          }\n          // ? else setinterval will call this again ?\n        } catch (error) {\n          console.log(error);\n          reject(error);\n        }\n      }, 1000);\n    });\n  };\n  const keys = useObservable((i, session$) => session$.pipe(switchMap(_ref => {\n    let [s] = _ref;\n    return s ? s.generatedKeys$ : EMPTY;\n  })), null, [session]);\n  useEffect(() => {\n    setVrf(session === null || session === void 0 ? void 0 : session.vrf);\n  }, [session]);\n  useEffect(() => {\n    const allPartyData = parties.map(party => {\n      return {\n        partyId: party.partyId,\n        vrf: party.vrf\n      };\n    });\n\n    // console.log(\"vrf\", allPartyVrfs);\n    if (userId != null && myVrf != null) {\n      allPartyData.push({\n        partyId: userId,\n        vrf: myVrf\n      });\n    }\n\n    // sort allpartydata based on vrf\n    allPartyData.sort((n1, n2) => {\n      if (n1.vrf > n2.vrf) {\n        return 1;\n      }\n      if (n1.vrf < n2.vrf) {\n        return -1;\n      }\n      return 0;\n    });\n    console.log(\"allParty vrfs\", allPartyData);\n    if (keys) {\n      {\n        //console.log(\"selecting party\", allPartyData);\n        // set party where vrf = allpartyvrfs[0]\n\n        SetParty_vid(allPartyData[0].partyId);\n        SetParty_counterlimit(allPartyData[1].partyId);\n        SetComplete(true);\n      }\n    }\n    console.log(\"just checking\");\n  }, [keys]);\n  const encryptTokens = async () => {\n    // * get the tokens from the backend\n    const {\n      data: {\n        tokens\n      }\n    } = await axios.get(BACKEND_URL + \"/getTokensAll\");\n    const pubKeytoPoint = Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub));\n    const privKey = BigInt(\"0x\" + TallyKeyPriv);\n    console.log(\"tokens\", tokens);\n\n    // * encrypt the tokens\n    const encryptedTokens = [];\n    for (let i = 0; i < tokens.length; i++) {\n      const mappedVid = Point.fromXYPair(CURVE.Gx, CURVE.Gy).multiplyCT(BigInt(\"0x\" + tokens[i].vid));\n      const encryptedVid = ElgammalEncrypt(Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub)), mappedVid).map(n => n.compressed.toString(16).padStart(256 / 4 + 1)).join(\"\");\n      const counters = tokens[i].counters;\n      let counterIndex = 0;\n      for (let i = 0; i < counters.length; i++) {\n        const mappedCounter = Point.fromXYPair(CURVE.Gx, CURVE.Gy).multiplyCT(BigInt(\"0x\" + counters[i]));\n        const encryptedCounter = ElgammalEncrypt(Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub)), mappedCounter).map(n => n.compressed.toString(16).padStart(256 / 4 + 1)).join(\"\");\n        const sign = signature(tokens[i].vid, BigInt(\"0x\" + TallyKeyPriv));\n        const [R, s, e] = sign;\n        const signObj = {\n          R: R.compressed.toString(16),\n          s: s.toString(),\n          e: e.toString()\n        };\n        const signJson = JSON.stringify(signObj);\n        encryptedTokens.push({\n          vid: encryptedVid,\n          counter: encryptedCounter,\n          HashedId: tokens[i].HashedId,\n          signature: signJson,\n          counterIndex: counterIndex,\n          pubkey: TallyKeyPub\n        });\n        counterIndex += 1;\n      }\n    }\n\n    // * post the encrypted tokens to the backend\n    console.log(\"tokens to encrypt\", encryptedTokens);\n    await axios.post(BACKEND_URL + \"/StoreEncryptedTokens\", {\n      encryptedTokens: encryptedTokens\n    });\n  };\n  const FetchlimitsandGenerateCounters = async () => {\n    const {\n      data: {\n        limits,\n        HashIds\n      }\n    } = await axios.get(BACKEND_URL + \"/getCounterlimit\");\n    console.log(\"result from limits\");\n    console.log(\"limits\", limits);\n    console.log(\"HashIds\", HashIds);\n\n    // * generate the tokens\n    const tokens = [];\n    for (let i = 0; i < HashIds.length; i++) {\n      const vid = GenerateRandom();\n      let counter = BigInt(Math.floor(Math.random() * 10000000).toString(10));\n      for (let j = 0; j < limits[j]; j++) {\n        // * for every hash id generate limit number of counters\n        counter += 1n;\n        tokens.push({\n          vid: vid.toString(),\n          counter: counter.toString(),\n          HashedId: HashIds[i]\n        });\n      }\n    }\n    // console.log(\"tokens\", tokens);\n    await postTokens(tokens);\n  };\n  const postTokens = async tokens => {\n    let promises = [];\n    for (let i = 0; i < tokens.length; i++) {\n      promises.push(axios.post(BACKEND_URL + \"/StoreTokens\", {\n        vid: tokens[i].vid,\n        HashedId: tokens[i].HashedId,\n        counter: tokens[i].counter\n      }));\n    }\n    Promise.all([promises]).then(res => {\n      console.log(\"tokens result \", res);\n    });\n  };\n  const waitAndEncrypt = async () => {\n    await WaitForTokens();\n    await encryptTokens();\n  };\n  useEffect(() => {\n    if (!keys) return;\n    //  Party for generating Counter limit\n    if (userId && userId == Party_counterlimit) {\n      console.log(\"I am the counterlimit party\");\n      const generateLimits = async () => {\n        let limits = [];\n        HashedIds.forEach(element => {\n          const limit = Math.floor(Math.random() * (8 - 5 + 1) + 5);\n          limits.push({\n            Limit: limit,\n            HashedId: element\n          });\n        });\n\n        // Post the limit to the backend\n        console.log(limits);\n        let promises = [];\n        for (let i = 0; i < limits.length; i++) {\n          promises.push(axios.post(BACKEND_URL + \"/counterlimit\", {\n            limit: limits[i].Limit,\n            HashedId: limits[i].HashedId\n          }));\n        }\n        Promise.all(promises).then(res => {\n          console.log(res);\n        });\n        await axios.post(BACKEND_URL + \"/SetTriggerVal\", {\n          flag: 1\n        });\n        SetMessage(\"limits generated & encrypted tokens \");\n      };\n      generateLimits();\n      waitAndEncrypt();\n    }\n    // Party for generating VoterIds & Counter\n    else if (userId === Party_vid) {\n      console.log(\"I am the vid party\");\n      // * Post the tokens to the backend\n\n      const waitandgenerate = async () => {\n        SetMessage(\"waiting for limits\");\n        await WaitForLimit();\n        await FetchlimitsandGenerateCounters();\n        SetMessage(\"Generated vids\");\n        await axios.post(BACKEND_URL + \"/SetTokenTriggerVal\", {\n          flag: 1\n        });\n        waitAndEncrypt();\n        SetMessage(\"Generated vids & encyrpted tokens\");\n      };\n      waitandgenerate();\n    } else if (userId) {\n      SetMessage(\"waiting for tokens\");\n      waitAndEncrypt();\n      SetMessage(\"Tokens encrypted\");\n\n      //SetMessage(\"\");\n    }\n  }, [complete]);\n  useEffect(() => {\n    if (!userId) return;\n    const cb = async () => {\n      try {\n        if (!TallyKeyPub && !TallyKeyPriv) {\n          //console.log(\"creating TallyKey\");\n          await createTallyKey();\n          //console.log(\"tally key \", TallyKey);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    cb();\n  }, [userId]);\n  useEffect(() => {\n    console.log('tally key:', TallyKeyPriv, TallyKeyPriv);\n  }, [TallyKeyPriv, TallyKeyPub]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-semibold\",\n      children: \"Generate Public Key\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), sessionId ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Session Link:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"border border-blue-300 rounded-md py-5 px-4\",\n        children: \"localhost:3000/generate/\" + sessionId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), userId ? /*#__PURE__*/_jsxDEV(Parties, {\n      userId: userId,\n      parties: parties\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), TallyKeyPub && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: [\" My TS Public key: \", TallyKeyPub]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: [\" My TS priv key: \", TallyKeyPriv]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"block blue-btn ripple\",\n      onClick: () => session === null || session === void 0 ? void 0 : session.ready(!session.isReady),\n      children: \"Start Key Generation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), keys ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounded-md text-center bg-blue-200 px-2 py-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-medium\",\n          children: \"Generated Keys\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-lg font-semibold\",\n          children: \"Public\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"N: \", keys.public.N.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Theta: \", keys.public.theta.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Delta: \", keys.public.delta.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Vk: \", keys.public.vk.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-lg font-semibold\",\n          children: \"Private\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"f: \", keys.private.f.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Vki: \", keys.private.vki.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"text-lg font-semibold\",\n          children: \"Selected Parties \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" For Counter: \", Party_counterlimit, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" For Token generation: \", Party_vid]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounded-md text-center bg-blue-200 px-2 py-2\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    //\n    _jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n}\n_s(GeneratePage, \"FnHB1V7EWcf4F+UPBZ2RIh5xyVc=\", false, function () {\n  return [useParams, useNavigate, useSession, useObservable];\n});\n_c = GeneratePage;\nasync function createSession() {\n  const {\n    data: {\n      sessionId: id\n    }\n  } = await axios.post(BACKEND_URL + \"/CreateSession\");\n  return id;\n}\nvar _c;\n$RefreshReg$(_c, \"GeneratePage\");","map":{"version":3,"names":["useEffect","useState","useParams","useNavigate","axios","joinEncryptSession","BACKEND_URL","useSession","Parties","useObservable","EMPTY","switchMap","HashedIds","Point","GenerateRandom","GenPublicKey","signature","ElgammalEncrypt","CURVE","jsxDEV","_jsxDEV","Fragment","_Fragment","GeneratePage","_s","sessionId","navigate","session","setSession","Party_vid","SetParty_vid","Party_counterlimit","SetParty_counterlimit","message","SetMessage","complete","SetComplete","myVrf","setVrf","createSession","then","id","replace","TallyKeyPub","SetTallyKeyPub","TallyKeyPriv","SetTallyKeyPriv","createTallyKey","priv_key","console","log","pubkey","compressed","toString","post","userId","pubKey","cb","s","e","error","cleanup","parties","WaitForTokens","Promise","resolve","reject","myInter","setInterval","getUserData","data","result","get","clearInterval","WaitForLimit","keys","i","session$","pipe","_ref","generatedKeys$","vrf","allPartyData","map","party","partyId","push","sort","n1","n2","encryptTokens","tokens","pubKeytoPoint","fromCompressed","BigInt","privKey","encryptedTokens","length","mappedVid","fromXYPair","Gx","Gy","multiplyCT","vid","encryptedVid","n","padStart","join","counters","counterIndex","mappedCounter","encryptedCounter","sign","R","signObj","signJson","JSON","stringify","counter","HashedId","FetchlimitsandGenerateCounters","limits","HashIds","Math","floor","random","j","postTokens","promises","all","res","waitAndEncrypt","generateLimits","forEach","element","limit","Limit","flag","waitandgenerate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ready","isReady","public","N","theta","delta","vk","private","f","vki","_c","$RefreshReg$"],"sources":["/Users/kemlohalex/Documents/evoting/crypto/packages/frontend/src/pages/generate/index.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { EncryptSession, joinEncryptSession } from \"../../connections/session\";\nimport { GeneratedKeys } from \"pallier\";\nimport { BACKEND_URL } from \"../../connections/api\";\nimport { useSession } from \"../../hooks/useSession\";\nimport { Parties } from \"../../components/parties\";\nimport { useObservable } from \"rxjs-hooks\";\nimport { EMPTY, switchMap } from \"rxjs\";\nimport { HashedIds } from \"../../util/leaves\";\nimport {\n  Point,\n  GenerateRandom,\n  GenPublicKey,\n  signature,\n  ElgammalEncrypt,\n  CURVE,\n} from \"elgammal\";\n\nexport default function GeneratePage() {\n  const { sessionId } = useParams();\n  const navigate = useNavigate();\n\n  const [session, setSession] = useState(null as null | EncryptSession);\n  const [Party_vid, SetParty_vid] = useState(null as null | string);\n  const [Party_counterlimit, SetParty_counterlimit] = useState(\n    null as null | string\n  );\n\n  const [message, SetMessage] = useState(\"\");\n  const [complete, SetComplete] = useState(false);\n\n  const [myVrf, setVrf] = useState(null as null | string);\n  //If sessionId was not provided, we create a new sessionId\n  useEffect(() => {\n    if (!sessionId) {\n      createSession().then((id) =>\n        navigate(\"/generate/\" + id, { replace: true })\n      );\n    }\n  }, [sessionId, navigate]);\n\n  const [TallyKeyPub, SetTallyKeyPub] = useState(null as null | string);\n  const [TallyKeyPriv, SetTallyKeyPriv] = useState(null as null | string);\n\n  async function createTallyKey() {\n    const priv_key = GenerateRandom();\n    console.log('priv:', priv_key);\n    const pubkey = GenPublicKey(priv_key);\n    console.log('pub:', pubkey.compressed.toString(16));\n    await axios.post(BACKEND_URL + \"/Submitkey\", {\n      userId,\n      pubKey: pubkey.compressed.toString(16),\n      sessionId: sessionId,\n    });\n    SetTallyKeyPub(pubkey.compressed.toString(16));\n    SetTallyKeyPriv(priv_key.toString(16));\n  }\n\n  useEffect(() => {\n    const cb = async () => {\n      try {\n        if (!session && sessionId) {\n          console.log(\"creating session\");\n          const s = await joinEncryptSession(sessionId);\n          setSession(s);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    cb();\n\n    return () => {\n      if (session) {\n        session.cleanup();\n      }\n    };\n  }, [sessionId, session]);\n\n  const [userId, parties] = useSession(session);\n\n  const WaitForTokens = async () => {\n    return new Promise((resolve, reject) => {\n      const myInter = setInterval(async function getUserData() {\n        try {\n          const {\n            data: { result },\n          } = await axios.get(BACKEND_URL + \"/TokenTriggerVal\");\n          console.log(\"result\", result);\n          if (result == 1) {\n            clearInterval(myInter);\n            resolve(\"done\");\n          }\n        \n        } catch (error) {\n          console.log(error);\n          reject(error);\n        }\n      }, 1000);\n    });\n  };\n\n  const WaitForLimit = async () => {\n    return new Promise((resolve, reject) => {\n      const myInter = setInterval(async function getUserData() {\n        try {\n          const {\n            data: { result },\n          } = await axios.get(BACKEND_URL + \"/TriggerVal\");\n          console.log(\"result\", result);\n          if (result == 1) {\n            clearInterval(myInter);\n            resolve(\"done\");\n          }\n          // ? else setinterval will call this again ?\n        } catch (error) {\n          console.log(error);\n          reject(error);\n        }\n      }, 1000);\n    });\n  };\n\n  const keys = useObservable(\n    (i, session$) =>\n      session$.pipe(switchMap(([s]) => (s ? s.generatedKeys$ : EMPTY))),\n    null as null | GeneratedKeys,\n    [session]\n  );\n\n  useEffect(() => {\n    setVrf(session?.vrf);\n  }, [session]);\n\n  useEffect(() => {\n    const allPartyData = parties.map((party) => {\n      return {\n        partyId: party.partyId,\n        vrf: party.vrf,\n      };\n    });\n\n    // console.log(\"vrf\", allPartyVrfs);\n    if (userId != null && myVrf != null) {\n      allPartyData.push({ partyId: userId, vrf: myVrf });\n    }\n\n    // sort allpartydata based on vrf\n    allPartyData.sort((n1, n2) => {\n      if (n1.vrf > n2.vrf) {\n        return 1;\n      }\n      if (n1.vrf < n2.vrf) {\n        return -1;\n      }\n      return 0;\n    });\n\n    console.log(\"allParty vrfs\", allPartyData);\n\n    if (keys) {\n      {\n        //console.log(\"selecting party\", allPartyData);\n        // set party where vrf = allpartyvrfs[0]\n\n        SetParty_vid(allPartyData[0].partyId);\n        SetParty_counterlimit(allPartyData[1].partyId);\n        SetComplete(true);\n      }\n    }\n    console.log(\"just checking\");\n  }, [keys]);\n\n  const encryptTokens = async () => {\n    // * get the tokens from the backend\n    const {\n      data: { tokens },\n    } = await axios.get(BACKEND_URL + \"/getTokensAll\");\n    const pubKeytoPoint = Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub));\n    const privKey = BigInt(\"0x\" + TallyKeyPriv);\n\n    console.log(\"tokens\", tokens);\n\n    // * encrypt the tokens\n    const encryptedTokens: any[] = [];\n    for (let i = 0; i < tokens.length; i++) {\n\n\n      const mappedVid = Point.fromXYPair(CURVE.Gx, CURVE.Gy).multiplyCT(\n        BigInt(\"0x\" + tokens[i].vid)\n      );\n\n      const encryptedVid = ElgammalEncrypt(\n        Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub)),\n        mappedVid\n      )\n        .map((n) => n.compressed.toString(16).padStart(256 / 4 + 1))\n        .join(\"\");\n\n      const counters = tokens[i].counters\n      let counterIndex =0 ; \n      for ( let i = 0 ; i < counters.length ; i++ ) {\n\n        const mappedCounter = Point.fromXYPair(CURVE.Gx, CURVE.Gy).multiplyCT(\n          BigInt(\"0x\" + counters[i])\n        );\n        const encryptedCounter = ElgammalEncrypt(\n          Point.fromCompressed(BigInt(\"0x\" + TallyKeyPub)),\n          mappedCounter\n        )\n          .map((n) => n.compressed.toString(16).padStart(256 / 4 + 1))\n          .join(\"\");\n        const sign = signature(tokens[i].vid, BigInt(\"0x\" + TallyKeyPriv));\n        const [R, s, e] = sign;\n        const signObj = {\n          R: R.compressed.toString(16),\n          s: s.toString(),\n          e: e.toString(),\n        };\n        const signJson = JSON.stringify(signObj);\n        encryptedTokens.push({\n          vid: encryptedVid,\n          counter: encryptedCounter,\n          HashedId: tokens[i].HashedId,\n          signature: signJson,\n          counterIndex: counterIndex,\n          pubkey : TallyKeyPub\n        });\n        counterIndex += 1;\n\n      }\n    }\n\n    // * post the encrypted tokens to the backend\n    console.log(\"tokens to encrypt\", encryptedTokens);\n\n    await axios.post(BACKEND_URL + \"/StoreEncryptedTokens\", { encryptedTokens: encryptedTokens});\n  };\n\n  const FetchlimitsandGenerateCounters = async () => {\n    const {\n      data: { limits, HashIds },\n    } = await axios.get(BACKEND_URL + \"/getCounterlimit\");\n    console.log(\"result from limits\");\n    console.log(\"limits\", limits);\n    console.log(\"HashIds\", HashIds);\n\n    // * generate the tokens\n    const tokens: any[] = [];\n    for (let i = 0; i < HashIds.length; i++) {\n      const vid = GenerateRandom();\n      let counter = BigInt(Math.floor(Math.random() * 10000000).toString(10));\n\n      for (let j = 0; j < limits[j]; j++) {\n        // * for every hash id generate limit number of counters\n        counter += 1n;\n        tokens.push({\n          vid: vid.toString(),\n          counter: counter.toString(),\n          HashedId: HashIds[i],\n        });\n      }\n    }\n    // console.log(\"tokens\", tokens);\n    await postTokens(tokens);\n  };\n\n  const postTokens = async (tokens: any[]) => {\n    let promises = [];\n    for (let i = 0; i < tokens.length; i++) {\n      promises.push(\n        axios.post(BACKEND_URL + \"/StoreTokens\", {\n          vid: tokens[i].vid,\n          HashedId: tokens[i].HashedId,\n          counter: tokens[i].counter,\n        })\n      );\n    }\n    Promise.all([promises]).then((res) => {\n      console.log(\"tokens result \", res);\n    });\n  };\n\n  const waitAndEncrypt = async () => {\n    await WaitForTokens();\n    await encryptTokens();\n  };\n\n  useEffect(() => {\n    if (!keys) return;\n    //  Party for generating Counter limit\n    if (userId && userId == Party_counterlimit) {\n      console.log(\"I am the counterlimit party\");\n\n      const generateLimits = async () => {\n        let limits: { Limit: number; HashedId: string }[] = [];\n        HashedIds.forEach((element) => {\n          const limit = Math.floor(Math.random() * (8 - 5 + 1) + 5);\n          limits.push({ Limit: limit, HashedId: element });\n        });\n\n        // Post the limit to the backend\n        console.log(limits);\n        let promises = [];\n        for (let i = 0; i < limits.length; i++) {\n          promises.push(\n            axios.post(BACKEND_URL + \"/counterlimit\", {\n              limit: limits[i].Limit,\n              HashedId: limits[i].HashedId,\n            })\n          );\n        }\n        Promise.all(promises).then((res) => {\n          console.log(res);\n        });\n\n        await axios.post(BACKEND_URL + \"/SetTriggerVal\", { flag: 1 });\n        SetMessage(\"limits generated & encrypted tokens \");\n      };\n      generateLimits();\n      waitAndEncrypt();\n    }\n    // Party for generating VoterIds & Counter\n    else if (userId === Party_vid) {\n      console.log(\"I am the vid party\");\n      // * Post the tokens to the backend\n\n      const waitandgenerate = async () => {\n        SetMessage(\"waiting for limits\");\n        await WaitForLimit();\n        await FetchlimitsandGenerateCounters();\n        SetMessage(\"Generated vids\");\n        await axios.post(BACKEND_URL + \"/SetTokenTriggerVal\", { flag: 1 });\n        waitAndEncrypt();\n        SetMessage(\"Generated vids & encyrpted tokens\");\n      };\n\n      waitandgenerate();\n    } else if (userId) {\n      SetMessage(\"waiting for tokens\");\n      waitAndEncrypt();\n      SetMessage(\"Tokens encrypted\");\n\n      //SetMessage(\"\");\n    }\n  }, [complete]);\n\n  useEffect(() => {\n    if (!userId) return;\n    const cb = async () => {\n      try {\n        if (!TallyKeyPub && !TallyKeyPriv) {\n          //console.log(\"creating TallyKey\");\n          await createTallyKey();\n          //console.log(\"tally key \", TallyKey);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    cb();\n  }, [userId]);\n\n  useEffect(() => {\n    console.log('tally key:', TallyKeyPriv, TallyKeyPriv);\n  }, [TallyKeyPriv, TallyKeyPub]);\n\n  return (\n    <div className=\"flex flex-col items-center space-y-4\">\n      <h2 className=\"text-3xl font-semibold\">Generate Public Key</h2>\n      <br />\n      {sessionId ? (\n        <span>\n          Session Link:{\" \"}\n          <span className=\"border border-blue-300 rounded-md py-5 px-4\">\n            {\"localhost:3000/generate/\" + sessionId}\n          </span>\n        </span>\n      ) : (\n        <></>\n      )}\n      <br />\n\n      {userId ? <Parties userId={userId} parties={parties} /> : <></>}\n\n      {TallyKeyPub && (\n        <>\n          <div className=\"flex space-x-2\"> My TS Public key: {TallyKeyPub}</div>\n          <div className=\"flex space-x-2\"> My TS priv key: {TallyKeyPriv}</div>\n        </>\n      )}\n\n      <button\n        className=\"block blue-btn ripple\"\n        onClick={() => session?.ready(!session.isReady)}\n      >\n        Start Key Generation\n      </button>\n\n      {keys ? (\n        <>\n          <div className=\"rounded-md text-center bg-blue-200 px-2 py-2\">\n            <h3 className=\"text-xl font-medium\">Generated Keys</h3>\n            <h4 className=\"text-lg font-semibold\">Public</h4>\n            <div>N: {keys.public.N.toString()}</div>\n            <div>Theta: {keys.public.theta.toString()}</div>\n            <div>Delta: {keys.public.delta.toString()}</div>\n            <div>Vk: {keys.public.vk.toString()}</div>\n            <h4 className=\"text-lg font-semibold\">Private</h4>\n            <div>f: {keys.private.f.toString()}</div>\n            <div>Vki: {keys.private.vki.toString()}</div>\n            <h5 className=\"text-lg font-semibold\">Selected Parties </h5>\n            <p> For Counter: {Party_counterlimit} </p>\n            <p> For Token generation: {Party_vid}</p>\n          </div>\n          <div className=\"rounded-md text-center bg-blue-200 px-2 py-2\">\n            {message}\n          </div>\n        </>\n      ) : (\n        //\n        <></>\n      )}\n    </div>\n  );\n}\n\nasync function createSession() {\n  const {\n    data: { sessionId: id },\n  } = await axios.post(BACKEND_URL + \"/CreateSession\");\n  return id as string;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}