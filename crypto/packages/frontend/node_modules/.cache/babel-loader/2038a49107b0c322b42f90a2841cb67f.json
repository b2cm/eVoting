{"ast":null,"code":"// Generated by psc version 0.9.3\n\"use strict\";\n\nvar Control_Applicative = require(\"../Control.Applicative\");\nvar Control_Apply = require(\"../Control.Apply\");\nvar Control_Bind = require(\"../Control.Bind\");\nvar Control_Comonad = require(\"../Control.Comonad\");\nvar Control_Extend = require(\"../Control.Extend\");\nvar Control_Monad = require(\"../Control.Monad\");\nvar Data_Bounded = require(\"../Data.Bounded\");\nvar Data_Eq = require(\"../Data.Eq\");\nvar Data_Functor = require(\"../Data.Functor\");\nvar Data_Functor_Invariant = require(\"../Data.Functor.Invariant\");\nvar Data_Monoid = require(\"../Data.Monoid\");\nvar Data_Ord = require(\"../Data.Ord\");\nvar Data_Semigroup = require(\"../Data.Semigroup\");\nvar Data_Show = require(\"../Data.Show\");\nvar Dual = function (x) {\n  return x;\n};\nvar showDual = function (dictShow) {\n  return new Data_Show.Show(function (v) {\n    return \"(Dual \" + (Data_Show.show(dictShow)(v) + \")\");\n  });\n};\nvar semigroupDual = function (dictSemigroup) {\n  return new Data_Semigroup.Semigroup(function (v) {\n    return function (v1) {\n      return Data_Semigroup.append(dictSemigroup)(v1)(v);\n    };\n  });\n};\nvar runDual = function (v) {\n  return v;\n};\nvar monoidDual = function (dictMonoid) {\n  return new Data_Monoid.Monoid(function () {\n    return semigroupDual(dictMonoid[\"__superclass_Data.Semigroup.Semigroup_0\"]());\n  }, Data_Monoid.mempty(dictMonoid));\n};\nvar invariantDual = new Data_Functor_Invariant.Invariant(function (f) {\n  return function (v) {\n    return function (v1) {\n      return f(v1);\n    };\n  };\n});\nvar functorDual = new Data_Functor.Functor(function (f) {\n  return function (v) {\n    return f(v);\n  };\n});\nvar extendDual = new Control_Extend.Extend(function () {\n  return functorDual;\n}, function (f) {\n  return function (x) {\n    return f(x);\n  };\n});\nvar eqDual = function (dictEq) {\n  return new Data_Eq.Eq(function (v) {\n    return function (v1) {\n      return Data_Eq.eq(dictEq)(v)(v1);\n    };\n  });\n};\nvar ordDual = function (dictOrd) {\n  return new Data_Ord.Ord(function () {\n    return eqDual(dictOrd[\"__superclass_Data.Eq.Eq_0\"]());\n  }, function (v) {\n    return function (v1) {\n      return Data_Ord.compare(dictOrd)(v)(v1);\n    };\n  });\n};\nvar comonadDual = new Control_Comonad.Comonad(function () {\n  return extendDual;\n}, runDual);\nvar boundedDual = function (dictBounded) {\n  return new Data_Bounded.Bounded(function () {\n    return ordDual(dictBounded[\"__superclass_Data.Ord.Ord_0\"]());\n  }, Data_Bounded.bottom(dictBounded), Data_Bounded.top(dictBounded));\n};\nvar applyDual = new Control_Apply.Apply(function () {\n  return functorDual;\n}, function (v) {\n  return function (v1) {\n    return v(v1);\n  };\n});\nvar bindDual = new Control_Bind.Bind(function () {\n  return applyDual;\n}, function (v) {\n  return function (f) {\n    return f(v);\n  };\n});\nvar applicativeDual = new Control_Applicative.Applicative(function () {\n  return applyDual;\n}, Dual);\nvar monadDual = new Control_Monad.Monad(function () {\n  return applicativeDual;\n}, function () {\n  return bindDual;\n});\nmodule.exports = {\n  Dual: Dual,\n  runDual: runDual,\n  eqDual: eqDual,\n  ordDual: ordDual,\n  boundedDual: boundedDual,\n  functorDual: functorDual,\n  invariantDual: invariantDual,\n  applyDual: applyDual,\n  applicativeDual: applicativeDual,\n  bindDual: bindDual,\n  monadDual: monadDual,\n  extendDual: extendDual,\n  comonadDual: comonadDual,\n  showDual: showDual,\n  semigroupDual: semigroupDual,\n  monoidDual: monoidDual\n};","map":{"version":3,"names":["Control_Applicative","require","Control_Apply","Control_Bind","Control_Comonad","Control_Extend","Control_Monad","Data_Bounded","Data_Eq","Data_Functor","Data_Functor_Invariant","Data_Monoid","Data_Ord","Data_Semigroup","Data_Show","Dual","x","showDual","dictShow","Show","v","show","semigroupDual","dictSemigroup","Semigroup","v1","append","runDual","monoidDual","dictMonoid","Monoid","mempty","invariantDual","Invariant","f","functorDual","Functor","extendDual","Extend","eqDual","dictEq","Eq","eq","ordDual","dictOrd","Ord","compare","comonadDual","Comonad","boundedDual","dictBounded","Bounded","bottom","top","applyDual","Apply","bindDual","Bind","applicativeDual","Applicative","monadDual","Monad","module","exports"],"sources":["/Users/kemlohalex/Documents/evoting/crypto/packages/lrs/build/esm/lib/Data.Monoid.Dual/index.js"],"sourcesContent":["// Generated by psc version 0.9.3\n\"use strict\";\nvar Control_Applicative = require(\"../Control.Applicative\");\nvar Control_Apply = require(\"../Control.Apply\");\nvar Control_Bind = require(\"../Control.Bind\");\nvar Control_Comonad = require(\"../Control.Comonad\");\nvar Control_Extend = require(\"../Control.Extend\");\nvar Control_Monad = require(\"../Control.Monad\");\nvar Data_Bounded = require(\"../Data.Bounded\");\nvar Data_Eq = require(\"../Data.Eq\");\nvar Data_Functor = require(\"../Data.Functor\");\nvar Data_Functor_Invariant = require(\"../Data.Functor.Invariant\");\nvar Data_Monoid = require(\"../Data.Monoid\");\nvar Data_Ord = require(\"../Data.Ord\");\nvar Data_Semigroup = require(\"../Data.Semigroup\");\nvar Data_Show = require(\"../Data.Show\");\nvar Dual = function (x) {\n    return x;\n};\nvar showDual = function (dictShow) {\n    return new Data_Show.Show(function (v) {\n        return \"(Dual \" + (Data_Show.show(dictShow)(v) + \")\");\n    });\n};\nvar semigroupDual = function (dictSemigroup) {\n    return new Data_Semigroup.Semigroup(function (v) {\n        return function (v1) {\n            return Data_Semigroup.append(dictSemigroup)(v1)(v);\n        };\n    });\n};\nvar runDual = function (v) {\n    return v;\n};\nvar monoidDual = function (dictMonoid) {\n    return new Data_Monoid.Monoid(function () {\n        return semigroupDual(dictMonoid[\"__superclass_Data.Semigroup.Semigroup_0\"]());\n    }, Data_Monoid.mempty(dictMonoid));\n};\nvar invariantDual = new Data_Functor_Invariant.Invariant(function (f) {\n    return function (v) {\n        return function (v1) {\n            return f(v1);\n        };\n    };\n});\nvar functorDual = new Data_Functor.Functor(function (f) {\n    return function (v) {\n        return f(v);\n    };\n});\nvar extendDual = new Control_Extend.Extend(function () {\n    return functorDual;\n}, function (f) {\n    return function (x) {\n        return f(x);\n    };\n});\nvar eqDual = function (dictEq) {\n    return new Data_Eq.Eq(function (v) {\n        return function (v1) {\n            return Data_Eq.eq(dictEq)(v)(v1);\n        };\n    });\n};\nvar ordDual = function (dictOrd) {\n    return new Data_Ord.Ord(function () {\n        return eqDual(dictOrd[\"__superclass_Data.Eq.Eq_0\"]());\n    }, function (v) {\n        return function (v1) {\n            return Data_Ord.compare(dictOrd)(v)(v1);\n        };\n    });\n};\nvar comonadDual = new Control_Comonad.Comonad(function () {\n    return extendDual;\n}, runDual);\nvar boundedDual = function (dictBounded) {\n    return new Data_Bounded.Bounded(function () {\n        return ordDual(dictBounded[\"__superclass_Data.Ord.Ord_0\"]());\n    }, Data_Bounded.bottom(dictBounded), Data_Bounded.top(dictBounded));\n};\nvar applyDual = new Control_Apply.Apply(function () {\n    return functorDual;\n}, function (v) {\n    return function (v1) {\n        return v(v1);\n    };\n});\nvar bindDual = new Control_Bind.Bind(function () {\n    return applyDual;\n}, function (v) {\n    return function (f) {\n        return f(v);\n    };\n});\nvar applicativeDual = new Control_Applicative.Applicative(function () {\n    return applyDual;\n}, Dual);\nvar monadDual = new Control_Monad.Monad(function () {\n    return applicativeDual;\n}, function () {\n    return bindDual;\n});\nmodule.exports = {\n    Dual: Dual,\n    runDual: runDual,\n    eqDual: eqDual,\n    ordDual: ordDual,\n    boundedDual: boundedDual,\n    functorDual: functorDual,\n    invariantDual: invariantDual,\n    applyDual: applyDual,\n    applicativeDual: applicativeDual,\n    bindDual: bindDual,\n    monadDual: monadDual,\n    extendDual: extendDual,\n    comonadDual: comonadDual,\n    showDual: showDual,\n    semigroupDual: semigroupDual,\n    monoidDual: monoidDual\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}