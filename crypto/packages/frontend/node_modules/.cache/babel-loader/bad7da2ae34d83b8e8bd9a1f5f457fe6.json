{"ast":null,"code":"// Generated by psc version 0.9.3\n\"use strict\";\n\nvar $foreign = require(\"./foreign\");\nvar Prelude = require(\"../Prelude\");\nvar Data_Maybe = require(\"../Data.Maybe\");\nvar Data_Eq = require(\"../Data.Eq\");\nvar Data_Ord = require(\"../Data.Ord\");\nvar Data_Ordering = require(\"../Data.Ordering\");\nvar Data_Show = require(\"../Data.Show\");\nvar Data_Semigroup = require(\"../Data.Semigroup\");\nvar Data_Semiring = require(\"../Data.Semiring\");\nvar Data_Ring = require(\"../Data.Ring\");\nvar Data_CommutativeRing = require(\"../Data.CommutativeRing\");\nvar Data_EuclideanRing = require(\"../Data.EuclideanRing\");\nvar Control_Semigroupoid = require(\"../Control.Semigroupoid\");\nvar showBigInt = new Data_Show.Show(function (x) {\n  return \"fromString \\\"\" + ($foreign.toString(x) + \"\\\"\");\n});\nvar semiringBigInt = new Data_Semiring.Semiring($foreign.biAdd, $foreign.biMul, $foreign.fromInt(1), $foreign.fromInt(0));\nvar ringBigInt = new Data_Ring.Ring(function () {\n  return semiringBigInt;\n}, $foreign.biSub);\nvar fromBase = $foreign[\"fromBase'\"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\nvar fromString = fromBase(10);\nvar eqBigInt = new Data_Eq.Eq($foreign.biEquals);\nvar ordBigInt = new Data_Ord.Ord(function () {\n  return eqBigInt;\n}, function (x) {\n  return function (y) {\n    var $0 = $foreign.biCompare(x)(y);\n    if ($0 === 1) {\n      return Data_Ordering.GT.value;\n    }\n    ;\n    if ($0 === 0) {\n      return Data_Ordering.EQ.value;\n    }\n    ;\n    return Data_Ordering.LT.value;\n  };\n});\nvar commutativeRingBigInt = new Data_CommutativeRing.CommutativeRing(function () {\n  return ringBigInt;\n});\nvar euclideanRingBigInt = new Data_EuclideanRing.EuclideanRing(function () {\n  return commutativeRingBigInt;\n}, function ($1) {\n  return Data_EuclideanRing.degree(Data_EuclideanRing.euclideanRingNumber)($foreign.toNumber($1));\n}, $foreign.biDiv, $foreign.biMod);\nmodule.exports = {\n  fromBase: fromBase,\n  fromString: fromString,\n  eqBigInt: eqBigInt,\n  ordBigInt: ordBigInt,\n  showBigInt: showBigInt,\n  semiringBigInt: semiringBigInt,\n  ringBigInt: ringBigInt,\n  commutativeRingBigInt: commutativeRingBigInt,\n  euclideanRingBigInt: euclideanRingBigInt,\n  abs: $foreign.abs,\n  even: $foreign.even,\n  fromInt: $foreign.fromInt,\n  modPow: $foreign.modPow,\n  negative: $foreign.negative,\n  odd: $foreign.odd,\n  positive: $foreign.positive,\n  pow: $foreign.pow,\n  prime: $foreign.prime,\n  toBase: $foreign.toBase,\n  toNumber: $foreign.toNumber,\n  toString: $foreign.toString\n};","map":{"version":3,"names":["$foreign","require","Prelude","Data_Maybe","Data_Eq","Data_Ord","Data_Ordering","Data_Show","Data_Semigroup","Data_Semiring","Data_Ring","Data_CommutativeRing","Data_EuclideanRing","Control_Semigroupoid","showBigInt","Show","x","toString","semiringBigInt","Semiring","biAdd","biMul","fromInt","ringBigInt","Ring","biSub","fromBase","Just","create","Nothing","value","fromString","eqBigInt","Eq","biEquals","ordBigInt","Ord","y","$0","biCompare","GT","EQ","LT","commutativeRingBigInt","CommutativeRing","euclideanRingBigInt","EuclideanRing","$1","degree","euclideanRingNumber","toNumber","biDiv","biMod","module","exports","abs","even","modPow","negative","odd","positive","pow","prime","toBase"],"sources":["/Users/kemlohalex/Documents/evoting/crypto/packages/lrs/build/esm/lib/Data.BigInt/index.js"],"sourcesContent":["// Generated by psc version 0.9.3\n\"use strict\";\nvar $foreign = require(\"./foreign\");\nvar Prelude = require(\"../Prelude\");\nvar Data_Maybe = require(\"../Data.Maybe\");\nvar Data_Eq = require(\"../Data.Eq\");\nvar Data_Ord = require(\"../Data.Ord\");\nvar Data_Ordering = require(\"../Data.Ordering\");\nvar Data_Show = require(\"../Data.Show\");\nvar Data_Semigroup = require(\"../Data.Semigroup\");\nvar Data_Semiring = require(\"../Data.Semiring\");\nvar Data_Ring = require(\"../Data.Ring\");\nvar Data_CommutativeRing = require(\"../Data.CommutativeRing\");\nvar Data_EuclideanRing = require(\"../Data.EuclideanRing\");\nvar Control_Semigroupoid = require(\"../Control.Semigroupoid\");\nvar showBigInt = new Data_Show.Show(function (x) {\n    return \"fromString \\\"\" + ($foreign.toString(x) + \"\\\"\");\n});\nvar semiringBigInt = new Data_Semiring.Semiring($foreign.biAdd, $foreign.biMul, $foreign.fromInt(1), $foreign.fromInt(0));\nvar ringBigInt = new Data_Ring.Ring(function () {\n    return semiringBigInt;\n}, $foreign.biSub);\nvar fromBase = $foreign[\"fromBase'\"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\nvar fromString = fromBase(10);\nvar eqBigInt = new Data_Eq.Eq($foreign.biEquals);\nvar ordBigInt = new Data_Ord.Ord(function () {\n    return eqBigInt;\n}, function (x) {\n    return function (y) {\n        var $0 = $foreign.biCompare(x)(y);\n        if ($0 === 1) {\n            return Data_Ordering.GT.value;\n        }\n        ;\n        if ($0 === 0) {\n            return Data_Ordering.EQ.value;\n        }\n        ;\n        return Data_Ordering.LT.value;\n    };\n});\nvar commutativeRingBigInt = new Data_CommutativeRing.CommutativeRing(function () {\n    return ringBigInt;\n});\nvar euclideanRingBigInt = new Data_EuclideanRing.EuclideanRing(function () {\n    return commutativeRingBigInt;\n}, function ($1) {\n    return Data_EuclideanRing.degree(Data_EuclideanRing.euclideanRingNumber)($foreign.toNumber($1));\n}, $foreign.biDiv, $foreign.biMod);\nmodule.exports = {\n    fromBase: fromBase,\n    fromString: fromString,\n    eqBigInt: eqBigInt,\n    ordBigInt: ordBigInt,\n    showBigInt: showBigInt,\n    semiringBigInt: semiringBigInt,\n    ringBigInt: ringBigInt,\n    commutativeRingBigInt: commutativeRingBigInt,\n    euclideanRingBigInt: euclideanRingBigInt,\n    abs: $foreign.abs,\n    even: $foreign.even,\n    fromInt: $foreign.fromInt,\n    modPow: $foreign.modPow,\n    negative: $foreign.negative,\n    odd: $foreign.odd,\n    positive: $foreign.positive,\n    pow: $foreign.pow,\n    prime: $foreign.prime,\n    toBase: $foreign.toBase,\n    toNumber: $foreign.toNumber,\n    toString: $foreign.toString\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}