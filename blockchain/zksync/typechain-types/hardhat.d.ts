/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BootloaderUtilities",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BootloaderUtilities__factory>;
    getContractFactory(
      name: "IAccountCodeStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccountCodeStorage__factory>;
    getContractFactory(
      name: "IBootloaderUtilities",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBootloaderUtilities__factory>;
    getContractFactory(
      name: "IBytecodeCompressor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBytecodeCompressor__factory>;
    getContractFactory(
      name: "IContractDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContractDeployer__factory>;
    getContractFactory(
      name: "IEthToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEthToken__factory>;
    getContractFactory(
      name: "IImmutableSimulator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IImmutableSimulator__factory>;
    getContractFactory(
      name: "IKnownCodesStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKnownCodesStorage__factory>;
    getContractFactory(
      name: "IL1Messenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1Messenger__factory>;
    getContractFactory(
      name: "INonceHolder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonceHolder__factory>;
    getContractFactory(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymaster__factory>;
    getContractFactory(
      name: "IPaymasterFlow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymasterFlow__factory>;
    getContractFactory(
      name: "ISystemContext",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISystemContext__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Evoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Evoting__factory>;
    getContractFactory(
      name: "FactoryEvoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryEvoting__factory>;
    getContractFactory(
      name: "IEvoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEvoting__factory>;
    getContractFactory(
      name: "IFactoryEvoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactoryEvoting__factory>;
    getContractFactory(
      name: "Register",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Register__factory>;
    getContractFactory(
      name: "VerifierMembershipZKP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifierMembershipZKP__factory>;
    getContractFactory(
      name: "ZkSyncPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkSyncPaymaster__factory>;

    getContractAt(
      name: "BootloaderUtilities",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BootloaderUtilities>;
    getContractAt(
      name: "IAccountCodeStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccountCodeStorage>;
    getContractAt(
      name: "IBootloaderUtilities",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBootloaderUtilities>;
    getContractAt(
      name: "IBytecodeCompressor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBytecodeCompressor>;
    getContractAt(
      name: "IContractDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContractDeployer>;
    getContractAt(
      name: "IEthToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEthToken>;
    getContractAt(
      name: "IImmutableSimulator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IImmutableSimulator>;
    getContractAt(
      name: "IKnownCodesStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKnownCodesStorage>;
    getContractAt(
      name: "IL1Messenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1Messenger>;
    getContractAt(
      name: "INonceHolder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INonceHolder>;
    getContractAt(
      name: "IPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymaster>;
    getContractAt(
      name: "IPaymasterFlow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymasterFlow>;
    getContractAt(
      name: "ISystemContext",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISystemContext>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Evoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Evoting>;
    getContractAt(
      name: "FactoryEvoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryEvoting>;
    getContractAt(
      name: "IEvoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEvoting>;
    getContractAt(
      name: "IFactoryEvoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactoryEvoting>;
    getContractAt(
      name: "Register",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Register>;
    getContractAt(
      name: "VerifierMembershipZKP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifierMembershipZKP>;
    getContractAt(
      name: "ZkSyncPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkSyncPaymaster>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
