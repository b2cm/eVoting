/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace Utils {
  export type BallotPaperStruct = {
    ballotType: BigNumberish;
    name: string;
    information: string;
    title: string;
    candidates: string[];
    maxSelectableAnswer: BigNumberish;
  };

  export type BallotPaperStructOutput = [
    number,
    string,
    string,
    string,
    string[],
    BigNumber
  ] & {
    ballotType: number;
    name: string;
    information: string;
    title: string;
    candidates: string[];
    maxSelectableAnswer: BigNumber;
  };

  export type ProofStruct = { p1: string[]; p2: string[]; p3: string[] };

  export type ProofStructOutput = [string[], string[], string[]] & {
    p1: string[];
    p2: string[];
    p3: string[];
  };

  export type SignatureStruct = { y0: string; s: string; c: string[] };

  export type SignatureStructOutput = [string, string, string[]] & {
    y0: string;
    s: string;
    c: string[];
  };

  export type TokenStruct = { vid: string; partyId: string; counter: string };

  export type TokenStructOutput = [string, string, string] & {
    vid: string;
    partyId: string;
    counter: string;
  };

  export type VoteStruct = {
    sessionId: string;
    cipherText: string;
    proof: Utils.ProofStruct;
    signature: Utils.SignatureStruct;
    groupId: string;
    token: Utils.TokenStruct[];
  };

  export type VoteStructOutput = [
    string,
    string,
    Utils.ProofStructOutput,
    Utils.SignatureStructOutput,
    string,
    Utils.TokenStructOutput[]
  ] & {
    sessionId: string;
    cipherText: string;
    proof: Utils.ProofStructOutput;
    signature: Utils.SignatureStructOutput;
    groupId: string;
    token: Utils.TokenStructOutput[];
  };
}

export interface IEvotingInterface extends utils.Interface {
  functions: {
    "add_ballots((uint8,string,string,string,string[],uint256)[])": FunctionFragment;
    "add_voter(address)": FunctionFragment;
    "delete_ballot(uint256)": FunctionFragment;
    "get_count_total_votes()": FunctionFragment;
    "get_voters()": FunctionFragment;
    "get_votes()": FunctionFragment;
    "vote((string,string,(string[],string[],string[]),(string,string,string[]),string,(string,string,string)[])[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add_ballots"
      | "add_voter"
      | "delete_ballot"
      | "get_count_total_votes"
      | "get_voters"
      | "get_votes"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add_ballots",
    values: [Utils.BallotPaperStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "add_voter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delete_ballot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_count_total_votes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_voters",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "get_votes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [Utils.VoteStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "add_ballots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add_voter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delete_ballot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_count_total_votes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_voters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_votes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {};
}

export interface IEvoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEvotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add_ballots(
      _ballot_papers: Utils.BallotPaperStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    add_voter(
      _voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delete_ballot(
      _ballot_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    get_count_total_votes(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    get_voters(overrides?: CallOverrides): Promise<[string[]]>;

    get_votes(overrides?: CallOverrides): Promise<[Utils.VoteStructOutput[][]]>;

    vote(
      _votes: Utils.VoteStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  add_ballots(
    _ballot_papers: Utils.BallotPaperStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  add_voter(
    _voter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delete_ballot(
    _ballot_id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  get_count_total_votes(overrides?: CallOverrides): Promise<BigNumber[]>;

  get_voters(overrides?: CallOverrides): Promise<string[]>;

  get_votes(overrides?: CallOverrides): Promise<Utils.VoteStructOutput[][]>;

  vote(
    _votes: Utils.VoteStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    add_ballots(
      _ballot_papers: Utils.BallotPaperStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    add_voter(_voter: string, overrides?: CallOverrides): Promise<void>;

    delete_ballot(
      _ballot_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    get_count_total_votes(overrides?: CallOverrides): Promise<BigNumber[]>;

    get_voters(overrides?: CallOverrides): Promise<string[]>;

    get_votes(overrides?: CallOverrides): Promise<Utils.VoteStructOutput[][]>;

    vote(
      _votes: Utils.VoteStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    add_ballots(
      _ballot_papers: Utils.BallotPaperStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    add_voter(
      _voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delete_ballot(
      _ballot_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    get_count_total_votes(overrides?: CallOverrides): Promise<BigNumber>;

    get_voters(overrides?: CallOverrides): Promise<BigNumber>;

    get_votes(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _votes: Utils.VoteStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add_ballots(
      _ballot_papers: Utils.BallotPaperStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    add_voter(
      _voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delete_ballot(
      _ballot_id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    get_count_total_votes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_voters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_votes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _votes: Utils.VoteStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
