/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Utils {
  export type VoterDataStruct = { pubKey: BytesLike; hashedId: BytesLike };

  export type VoterDataStructOutput = [string, string] & {
    pubKey: string;
    hashedId: string;
  };
}

export interface RegisterInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "getHashedIDs()": FunctionFragment;
    "getVoterData()": FunctionFragment;
    "isRegistrationOpen()": FunctionFragment;
    "register(bytes,bytes)": FunctionFragment;
    "setRegistrationPeriod(uint256,uint256)": FunctionFragment;
    "voterData(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "getHashedIDs"
      | "getVoterData"
      | "isRegistrationOpen"
      | "register"
      | "setRegistrationPeriod"
      | "voterData"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getHashedIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistrationOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistrationPeriod",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voterData",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHashedIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistrationOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voterData", data: BytesLike): Result;

  events: {
    "RegistrationPeriodSet()": EventFragment;
    "RegistrationSuccessful()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RegistrationPeriodSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrationSuccessful"): EventFragment;
}

export interface RegistrationPeriodSetEventObject {}
export type RegistrationPeriodSetEvent = TypedEvent<
  [],
  RegistrationPeriodSetEventObject
>;

export type RegistrationPeriodSetEventFilter =
  TypedEventFilter<RegistrationPeriodSetEvent>;

export interface RegistrationSuccessfulEventObject {}
export type RegistrationSuccessfulEvent = TypedEvent<
  [],
  RegistrationSuccessfulEventObject
>;

export type RegistrationSuccessfulEventFilter =
  TypedEventFilter<RegistrationSuccessfulEvent>;

export interface Register extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegisterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    getHashedIDs(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _hashedIDs: string[] }>;

    getVoterData(
      overrides?: CallOverrides
    ): Promise<[Utils.VoterDataStructOutput[]]>;

    isRegistrationOpen(
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOpen: boolean }>;

    register(
      _hashedID: BytesLike,
      _publicKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRegistrationPeriod(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    voterData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { pubKey: string; hashedId: string }>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  getHashedIDs(overrides?: CallOverrides): Promise<string[]>;

  getVoterData(
    overrides?: CallOverrides
  ): Promise<Utils.VoterDataStructOutput[]>;

  isRegistrationOpen(overrides?: CallOverrides): Promise<boolean>;

  register(
    _hashedID: BytesLike,
    _publicKey: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRegistrationPeriod(
    _start: BigNumberish,
    _end: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  voterData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { pubKey: string; hashedId: string }>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    getHashedIDs(overrides?: CallOverrides): Promise<string[]>;

    getVoterData(
      overrides?: CallOverrides
    ): Promise<Utils.VoterDataStructOutput[]>;

    isRegistrationOpen(overrides?: CallOverrides): Promise<boolean>;

    register(
      _hashedID: BytesLike,
      _publicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistrationPeriod(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voterData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { pubKey: string; hashedId: string }>;
  };

  filters: {
    "RegistrationPeriodSet()"(): RegistrationPeriodSetEventFilter;
    RegistrationPeriodSet(): RegistrationPeriodSetEventFilter;

    "RegistrationSuccessful()"(): RegistrationSuccessfulEventFilter;
    RegistrationSuccessful(): RegistrationSuccessfulEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    getHashedIDs(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterData(overrides?: CallOverrides): Promise<BigNumber>;

    isRegistrationOpen(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      _hashedID: BytesLike,
      _publicKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRegistrationPeriod(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    voterData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHashedIDs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoterData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegistrationOpen(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      _hashedID: BytesLike,
      _publicKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRegistrationPeriod(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    voterData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
