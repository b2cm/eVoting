/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IEvoting,
  IEvotingInterface,
} from "../../../contracts/interfaces/IEvoting";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "ballotType",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "information",
            type: "string",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "candidates",
            type: "string[]",
          },
          {
            internalType: "uint256",
            name: "maxSelectableAnswer",
            type: "uint256",
          },
        ],
        internalType: "struct Utils.BallotPaper[]",
        name: "_ballot_papers",
        type: "tuple[]",
      },
    ],
    name: "add_ballots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_voter",
        type: "address",
      },
    ],
    name: "add_voter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ballot_id",
        type: "uint256",
      },
    ],
    name: "delete_ballot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "get_count_total_votes",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get_voters",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get_votes",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "sessionId",
            type: "string",
          },
          {
            internalType: "string",
            name: "cipherText",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string[]",
                name: "p1",
                type: "string[]",
              },
              {
                internalType: "string[]",
                name: "p2",
                type: "string[]",
              },
              {
                internalType: "string[]",
                name: "p3",
                type: "string[]",
              },
            ],
            internalType: "struct Utils.Proof",
            name: "proof",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "string",
                name: "y0",
                type: "string",
              },
              {
                internalType: "string",
                name: "s",
                type: "string",
              },
              {
                internalType: "string[]",
                name: "c",
                type: "string[]",
              },
            ],
            internalType: "struct Utils.Signature",
            name: "signature",
            type: "tuple",
          },
          {
            internalType: "string",
            name: "groupId",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string",
                name: "vid",
                type: "string",
              },
              {
                internalType: "string",
                name: "partyId",
                type: "string",
              },
              {
                internalType: "string",
                name: "counter",
                type: "string",
              },
            ],
            internalType: "struct Utils.Token[]",
            name: "token",
            type: "tuple[]",
          },
        ],
        internalType: "struct Utils.Vote[][]",
        name: "",
        type: "tuple[][]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "sessionId",
            type: "string",
          },
          {
            internalType: "string",
            name: "cipherText",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string[]",
                name: "p1",
                type: "string[]",
              },
              {
                internalType: "string[]",
                name: "p2",
                type: "string[]",
              },
              {
                internalType: "string[]",
                name: "p3",
                type: "string[]",
              },
            ],
            internalType: "struct Utils.Proof",
            name: "proof",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "string",
                name: "y0",
                type: "string",
              },
              {
                internalType: "string",
                name: "s",
                type: "string",
              },
              {
                internalType: "string[]",
                name: "c",
                type: "string[]",
              },
            ],
            internalType: "struct Utils.Signature",
            name: "signature",
            type: "tuple",
          },
          {
            internalType: "string",
            name: "groupId",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string",
                name: "vid",
                type: "string",
              },
              {
                internalType: "string",
                name: "partyId",
                type: "string",
              },
              {
                internalType: "string",
                name: "counter",
                type: "string",
              },
            ],
            internalType: "struct Utils.Token[]",
            name: "token",
            type: "tuple[]",
          },
        ],
        internalType: "struct Utils.Vote[]",
        name: "_votes",
        type: "tuple[]",
      },
    ],
    name: "vote",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IEvoting__factory {
  static readonly abi = _abi;
  static createInterface(): IEvotingInterface {
    return new utils.Interface(_abi) as IEvotingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IEvoting {
    return new Contract(address, _abi, signerOrProvider) as IEvoting;
  }
}
